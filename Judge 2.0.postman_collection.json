{
	"info": {
		"_postman_id": "27f41ad3-15c2-4194-963b-5a0ae3c9d7ed",
		"name": "Judge 2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33854868"
	},
	"item": [
		{
			"name": "Débito",
			"item": [
				{
					"name": "t464",
					"item": [
						{
							"name": "2- AUTHORIZATION (approved) Debito Copy 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// o que precisa ser gerado nesse pre-request script\r",
											"var uuid = require('uuid');\r",
											"const idTeste = \"1725477888\";\r",
											"const networkAuthorizationEventId = uuid.v4(); // usado como: event_id, org_id, cid, unique_cid, correlationId\r",
											"const networkAuthorizationEventDate = (new Date()).toISOString();\r",
											"const IntMaxValue = parseInt(\"2147483647\");\r",
											"const authorizationId = 7651375417441792; // usado como authorization_id, nsu, retrieval_reference_number e authorization_code\r",
											"postman.setGlobalVariable('authorizationId', authorizationId); // criado para ser usado nesse e em outros requests\r",
											"postman.setGlobalVariable('networkAuthorizationEventId', networkAuthorizationEventId);\r",
											"// o que é obtido da chamada do Antifraude\r",
											"const merchantName = postman.getGlobalVariable('merchantName');\r",
											"const contryCode = postman.getGlobalVariable('contryCode');\r",
											"const currency = postman.getGlobalVariable('currency');\r",
											"const randomAmount = postman.getGlobalVariable('randomAmount')\r",
											"const accountId = postman.getGlobalVariable('accountId');\r",
											"const customerId = postman.getGlobalVariable('customerId', 103194628);\r",
											"const numOfInstallments = postman.getGlobalVariable('numberOfInstallments');\r",
											"const type = postman.getGlobalVariable('transactionType');\r",
											"const em = postman.getGlobalVariable('entryMode');\r",
											"const pan = \"TfFR59DgTO4KNlVOtMZkGKs40xwqQ4ckypfeeVzm0lNKOpMi/HIQNsnQf8r9lMElDWTs6lo6APs3nw9bGrff7w==\"\r",
											"\r",
											"const authorizationCode = \"WZHD8\";\r",
											"const processorCardId = 7133380;\r",
											"const referenceNumber = 7651375417441792;\r",
											"const transactionId = '13b545a8-e30d-4d98-bc4a-065dd13eb411';\r",
											"const cardId = 2500761000004494174;\r",
											"\r",
											"//geração do payload\r",
											"const networkAuthorizationEvent = {\r",
											"  \"destinationAddress\": \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/operational.judge.v1.pismo.clearing.debit\",\r",
											"  \"headers\": {},\r",
											"  \"message\": {\r",
											"    \"event_id\": \"8ab7c4ca-3aee-43d7-8f6f-c35d89d5d14d\",\r",
											"    \"timestamp\": \"2024-05-14T08:41:16.637Z\",\r",
											"    \"domain\": \"networktransactions\",\r",
											"    \"event_type\": \"network-authorization\",\r",
											"    \"schema_version\": 1,\r",
											"    \"org_id\": \"TN-8ab7c4ca-3aee-43d7-8f6f-c35d89d5d14d\",\r",
											"    \"cid\": \"aaa91e5d-6f41-4429-a637-762a0752d44a\",\r",
											"    \"Id\": \"8bff1824-1507-4b28-b0bd-c30adab20104\",\r",
											"      \"Data\": {\r",
											"        \"file_type\": \"T464\",\r",
											"        \"network\": \"Mastercard\",\r",
											"        \"card_id\": processorCardId,\r",
											"        \"account_id\": 2003,\r",
											"        \"program_id\": 2003,\r",
											"        \"raw_message\": {\r",
											"          \"caller\": \"Mastercard\",\r",
											"          \"transactionTime\": \"203154\",\r",
											"          \"crossBorderCurrencyIndicator\": \"Y\",\r",
											"          \"correlationId\": \"c22fb067-6de2-4d62-a997-6f859877fba9\",\r",
											"          \"currencyCodeSettlement\": \"840\",\r",
											"          \"authorizationId\": \"6338500000\",\r",
											"          \"interchangeFeeIndicator\": \"C\",\r",
											"          \"clearingType\": \"DEBIT\",\r",
											"          \"isaFeeIndicator\": \" \",\r",
											"          \"traceNumberAdjustmentTrans\": \"000000\",\r",
											"          \"intracurrencyAgreementCode\": \"    \",\r",
											"          \"posEntry\": \"051\",\r",
											"          \"processingCode\": \"000000\",\r",
											"          \"messageTypeIndicator\": \"FREC\",\r",
											"          \"completedAmountTransactionIndicator\": \"D\",\r",
											"          \"requestedAmountTransaction\": \"000000110228\",\r",
											"          \"processorId\": \"0219\",\r",
											"          \"s3Path\": \"TN-c36a8d2d-d99a-4b82-b62a-faacdf3650e8/fromMaster/T464/2024/099/T4640990102060230036671.txt\",\r",
											"          \"impliedDecimalTransaction\": \"0\",\r",
											"          \"reconActivity\": \" \",\r",
											"          \"completedAmountTransaction\": \"0000003200\",\r",
											"          \"zeroBalanceUrl\": null,\r",
											"          \"traceNumber\": \"899194\",\r",
											"          \"positiveIdIndicator\": \"4\",\r",
											"          \"serviceLevelIndicator\": \"   \",\r",
											"          \"accessFee\": \"00000000\",\r",
											"          \"messageNumber\": \"587137968\",\r",
											"          \"cashBackAmountIndicator\": \"D\",\r",
											"          \"recordType\": \"NREC\",\r",
											"          \"transactionDate\": \"040624\",\r",
											"          \"accessFeeIndicator\": \"D\",\r",
											"          \"conversionRateSettlement\": \"47238951\",\r",
											"          \"atmSurcharge\": \"N\",\r",
											"          \"responseCodeDE39\": \"00\",\r",
											"          \"brand\": \"MS1\",\r",
											"          \"orgId\": \"TN-c36a8d2d-d99a-4b82-b62a-faacdf3650e8\",\r",
											"          \"transactionDestinationInstitutionIdCode\": \"rwZC2ag/m6+pWirb6mAkk6qDdU1vZant3L9puAJvM5Cp2cSE/F3onC4yzpD0mgE8NgQUFC/HLoCuUF5r54GuUg==\",\r",
											"          \"crossBorderIndicator\": \"Y\",\r",
											"          \"authorizationCode\": authorizationCode,\r",
											"          \"responseCode\": \"  \",\r",
											"          \"cashBackAmount\": \"000000000000\",\r",
											"          \"network\": \"Mastercard\",\r",
											"          \"referenceNumber\": referenceNumber,\r",
											"          \"merchantType\": \"5411\",\r",
											"          \"acquirerInstitutionId\": \"1960021912\",\r",
											"          \"pan\": pan,\r",
											"          \"impliedDecimalSettlement\": \"2\",\r",
											"          \"endpoint\": \"0036671\",\r",
											"          \"currencyCodeTransaction\": \"840\",\r",
											"          \"completedAmountSettlementIndicator\": \"D\",\r",
											"          \"institutionId\": null,\r",
											"          \"terminalId\": \"POS62627  \",\r",
											"          \"processorType\": \"I\",\r",
											"          \"adviceReasonCode\": \"       \",\r",
											"          \"completedAmountSettlement\": \"00000000592\",\r",
											"          \"addendums\": [\r",
											"            {\r",
											"              \"caller\": null,\r",
											"              \"cardIssuerInstitution\": \"1400004651\",\r",
											"              \"correlationId\": \"c22fb067-6de2-4d62-a997-6f859877fba9\",\r",
											"              \"merchantId\": \"000062627      \",\r",
											"              \"orgId\": null,\r",
											"              \"account2Length\": \"19\",\r",
											"              \"account2To\": \"0000000000000000000\",\r",
											"              \"cardAcceptorCity\": \"E.A.GARAY Y C   \",\r",
											"              \"clearingType\": \"DEBIT\",\r",
											"              \"standinTransaction\": \"N\",\r",
											"              \"paymentTypeIndicator\": \"   \",\r",
											"              \"impliedDecimalCardholderBilling\": \"2\",\r",
											"              \"transactionDestinationInstitutionIdCode\": null,\r",
											"              \"authorizationCode\": idTeste,\r",
											"              \"amountIndicator\": \"D\",\r",
											"              \"debitMastercardOffline\": \"N\",\r",
											"              \"network\": null,\r",
											"              \"messageTypeIndicator\": \"FPST\",\r",
											"              \"processorId\": \"000219\",\r",
											"              \"s3Path\": null,\r",
											"              \"currencyCodeCardholderBilling\": \"986\",\r",
											"              \"endpoint\": null,\r",
											"              \"filler3\": \"                                   \",\r",
											"              \"account1From\": \"0000000000000000000\",\r",
											"              \"cardAcceptorNameAddress\": \"SUP.S6-3 DE FEBRERO   \",\r",
											"              \"account1Length\": \"19\",\r",
											"              \"zeroBalanceUrl\": null,\r",
											"              \"paymentFacilitatorId\": \"           \",\r",
											"              \"amountCardholderBilling\": \"000000007594\",\r",
											"              \"submerchantId\": \"               \",\r",
											"              \"cardAcceptorStateOrCountryCode\": \"PRY\",\r",
											"              \"institutionId\": null,\r",
											"              \"posData\": \"00000002003\",\r",
											"              \"switchSerialNumber\": \"587137968\",\r",
											"              \"filler1\": \"         \",\r",
											"              \"independentSalesOrganizationId\": \"           \",\r",
											"              \"filler2\": \"         \",\r",
											"              \"recordType\": \"FPST\"\r",
											"            }\r",
											"          ],\r",
											"          \"interchangeFee\": \"0000000007\",\r",
											"          \"switchSerialNumber\": \"587137968\",\r",
											"          \"filler1\": \"          \",\r",
											"          \"panLength\": \"16\",\r",
											"          \"filler2\": \"            \"\r",
											"      }\r",
											"    }\r",
											"  },\r",
											"  \"messageType\": [\r",
											"    \"urn:message:Operational.Judge.NetworkAuthorizationEvents.Strategies.Pismo.PayLoads:NetworkAuthorizationClearingDebitEvent\"\r",
											"  ],\r",
											"  \"correlationId\": \"8ab7c4ca-3aee-43d7-8f6f-c35d89d5d14d\"\r",
											"};\r",
											"postman.setGlobalVariable('networkAuthorizationEvent', JSON.stringify(JSON.stringify(networkAuthorizationEvent)));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code precisa ser ok (200)\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Precisa receber resposta de sucesso do rabbit\", function() {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.routed).to.equal(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "R_u!7cy*2-BLpVQLkV!9",
											"type": "string"
										},
										{
											"key": "username",
											"value": "dev",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{BasicAuthRabbit}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.masstransit+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"properties\": {\r\n    \"content-type\": \"application/vnd.masstransit+json\"\r\n  },\r\n  \"routing_key\": \"\",\r\n  \"payload\": {{networkAuthorizationEvent}},\r\n  \"payload_encoding\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlRabbit}}api/exchanges/%2F/operational.judge.v1.pismo.clearing.debit/publish",
									"host": [
										"{{UrlRabbit}}api"
									],
									"path": [
										"exchanges",
										"%2F",
										"operational.judge.v1.pismo.clearing.debit",
										"publish"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Autorização",
					"item": [
						{
							"name": "DMC",
							"item": [
								{
									"name": "Testes - Master",
									"item": [
										{
											"name": "MTI-0120",
											"item": [
												{
													"name": "1 - Autorização - DMC - MTI 0100-0120",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"\r",
																	"function delay(ms) {\r",
																	"    return new Promise(resolve => setTimeout(resolve, ms));\r",
																	"}\r",
																	"\r",
																	"const FLAGS = {\r",
																	"    sendNetworkEventEnabled: true,      // Controle o envio dos eventos ProcessorAuthorizationEvent\r",
																	"    sendJudgeTransactionEnabled: true,  // Controle o envio da transação Judge\r",
																	"    sendSecondNetworkEventEnabled: true,// Controle o envio do segundo evento ProcessorAuthorizationEvent\r",
																	"    sendClearingEventEnabled: true,     // Controle o envio do clearing confirmation\r",
																	"    getTransactionEnabled: true,\r",
																	"    validateMambuEnabled: false\r",
																	"};\r",
																	"\r",
																	"const requestPayload = JSON.parse(pm.request.body.raw);\r",
																	"console.log(requestPayload);\r",
																	"\r",
																	"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
																	"const pan = pm.collectionVariables.get('pan');\r",
																	"const debitProgramCardId = requestPayload.fields.program_id;\r",
																	"\r",
																	"const type = pm.globals.get('transactionType');\r",
																	"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
																	"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
																	"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
																	"const judgeSendfunction = pm.collectionVariables.get('sendJudgeTransactionRequest');\r",
																	"\r",
																	"const getTransaction = new Function('params', judgeFunction);\r",
																	"const sendJudgeTransactionRequest = new Function('params', judgeSendfunction);\r",
																	"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
																	"const validateMambu = new Function('params', validateMambuBody);\r",
																	"\r",
																	"const correlationId = uuid.v4().toString();\r",
																	"\r",
																	"const response = JSON.parse(pm.response.stream.toString());\r",
																	"const statusCode = pm.response.status;\r",
																	"\r",
																	"console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
																	"console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
																	"console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
																	"console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
																	"console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
																	"console.log(\"|=========================================================================================|\\n\");\r",
																	"\r",
																	"async function main() {\r",
																	"    if (!(response.approve === true || statusCode === \"OK\")) {\r",
																	"        console.log(\"Resposta não aprovada ou statusCode inesperado, abortando execução.\");\r",
																	"        return;\r",
																	"    }\r",
																	"\r",
																	"    try {\r",
																	"        if (FLAGS.sendNetworkEventEnabled) {\r",
																	"            console.log(\"Executando request do Rabbit: enviando primeiro evento...\");\r",
																	"            const firstEventResponse = await sendNetworkEvent({\r",
																	"                pm,\r",
																	"                correlationId,\r",
																	"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"                messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"                mti: \"0100\",\r",
																	"                conciliationType: \"DUAL_MESSAGE\",\r",
																	"                authorizationCategory: authorizationCategory[1].description,\r",
																	"                authorizationResponseCode: \"00\",\r",
																	"                pan,\r",
																	"                requestPayload,\r",
																	"                exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"                caller: \"Mastercard\",\r",
																	"                custom_response_code: \"\",\r",
																	"                debitProgramCard: debitProgramCardId,\r",
																	"                adviceCode: \"111\"\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida:\", firstEventResponse);\r",
																	"\r",
																	"            await delay(15000);\r",
																	"        }\r",
																	"\r",
																	"        if (FLAGS.sendJudgeTransactionEnabled) {\r",
																	"            // Preparar payload para envio da transação Judge\r",
																	"            requestPayload.fields.mti = \"0120\";\r",
																	"            requestPayload.fields.response_code = \"05\";\r",
																	"            requestPayload.fields.original_network_data.de60_advice_reason_code = {\r",
																	"                \"de112Size\": \"007\",\r",
																	"                \"de112Start\": \"216\",\r",
																	"                \"sf1_advice_reason_code\": \"111\",\r",
																	"                \"sf2_advice_detail_code\": \"0020\"\r",
																	"            };\r",
																	"\r",
																	"            const judgeResponse = await sendJudgeTransactionRequest({\r",
																	"                pm,\r",
																	"                requestBody: requestPayload,\r",
																	"                correlationId\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida SendTransaction(Judge):\", judgeResponse);\r",
																	"\r",
																	"            await delay(10000);\r",
																	"        }\r",
																	"\r",
																	"        if (FLAGS.sendSecondNetworkEventEnabled) {\r",
																	"            const secondEventResponse = await sendNetworkEvent({\r",
																	"                pm,\r",
																	"                correlationId,\r",
																	"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"                messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"                mti: \"0100\",\r",
																	"                conciliationType: \"DUAL_MESSAGE\",\r",
																	"                authorizationCategory: authorizationCategory[1].description,\r",
																	"                authorizationResponseCode: \"00\",\r",
																	"                pan,\r",
																	"                requestPayload,\r",
																	"                exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"                caller: \"Mastercard\",\r",
																	"                custom_response_code: \"\",\r",
																	"                debitProgramCard: debitProgramCardId,\r",
																	"                adviceCode: \"111\"\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida segundo evento:\", secondEventResponse);\r",
																	"        }\r",
																	"\r",
																	"        if (FLAGS.sendClearingEventEnabled) {\r",
																	"            const clearingEventResponse = await sendNetworkEvent({\r",
																	"                pm,\r",
																	"                correlationId,\r",
																	"                destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
																	"                messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
																	"                mti: \"1240\",\r",
																	"                conciliationType: \"UNDEFINED\",\r",
																	"                debitProgramCard: debitProgramCardId,\r",
																	"                authorizationCategory: authorizationCategory[2].description,\r",
																	"                authorizationResponseCode: \"00\",\r",
																	"                pan,\r",
																	"                requestPayload,\r",
																	"                exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
																	"                caller: \"Mastercard\",\r",
																	"                custom_response_code: \"\"\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida clearing confirmation:\", clearingEventResponse);\r",
																	"        }\r",
																	"\r",
																	"        let transactionResponse = null;\r",
																	"        if (FLAGS.getTransactionEnabled) {\r",
																	"            transactionResponse = await getTransaction({\r",
																	"                pm,\r",
																	"                fields: requestPayload.fields,\r",
																	"                correlationId\r",
																	"            });\r",
																	"\r",
																	"            const result = {\r",
																	"                authorizationCode: transactionResponse.transactionIdentifier.authorizationCode,\r",
																	"                nsu: transactionResponse.transactionIdentifier.nsu,\r",
																	"                panHash: transactionResponse.card.panHashProcessor,\r",
																	"                transactionId: transactionResponse.transactionId,\r",
																	"                transactionFunction: transactionResponse.transactionFunction,\r",
																	"                status: transactionResponse.status,\r",
																	"                proxy: transactionResponse.card.proxy\r",
																	"            };\r",
																	"            console.log(\"Resposta recebida GetTransaction(Judge):\", result);\r",
																	"        }\r",
																	"\r",
																	"        if (FLAGS.validateMambuEnabled && transactionResponse) {\r",
																	"            await delay(100000);\r",
																	"            const mambuResponse = await validateMambu({\r",
																	"                pm,\r",
																	"                proxy: transactionResponse.card.proxy,\r",
																	"                authorizationId: transactionResponse.transactionId\r",
																	"            });\r",
																	"\r",
																	"            if (mambuResponse) {\r",
																	"                const mambuResult = {\r",
																	"                    currencyCode: mambuResponse.currencyCode,\r",
																	"                    amount: mambuResponse.amount,\r",
																	"                    externalReferenceId: mambuResponse.externalReferenceId,\r",
																	"                    status: mambuResponse.status,\r",
																	"                    creditDebitIndicator: mambuResponse.creditDebitIndicator,\r",
																	"                };\r",
																	"                console.log(\"Resposta recebida Mambu:\", mambuResult);\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.error(\"Erro:\", error);\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"main();\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//console.clear()",
																	"",
																	"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
																	"// Converter strings de funções em funções executáveis",
																	"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
																	"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
																	"const nsu = generateNsu(6);",
																	"",
																	"const authorizationCode = generateRandomString(5);",
																	"pm.collectionVariables.set('authorizationCode', authorizationCode);",
																	"pm.collectionVariables.set('nsuGlobal', nsu);",
																	"const IntMaxValue = parseInt(\"2147483647\");",
																	"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
																	"pm.collectionVariables.set('authorizationId', authorizationId)",
																	"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
																	"const amount = _.random(1, 20);",
																	"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
																	"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
																	"//pm.collectionVariables.set('randomAmount', 0);",
																	"var uuid = require('uuid');",
																	"pm.collectionVariables.set('randomId', uuid.v4());",
																	"pm.collectionVariables.set('currency', '840'); // Real = 986; Dollar = 840",
																	"pm.collectionVariables.set('contryCode', 'USA'); // Brasil = BRA; Luxemburgo = LUX",
																	"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
																	"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
																	"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
																	"pm.collectionVariables.set('mcc', '5311');",
																	"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
																	"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
																	"pm.collectionVariables.set('walletId', '111');",
																	"pm.collectionVariables.set('responseCode', '00');",
																	"pm.collectionVariables.set('denialCode', '00');",
																	"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
																	"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
																	"pm.collectionVariables.set('acquirerCode',728384008);",
																	"pm.collectionVariables.set('accountIdDebit',45545454);",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-correlation-id",
																"value": "{{$guid}}",
																"type": "text"
															},
															{
																"key": "x-pismo-sign",
																"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
																"type": "text"
															},
															{
																"key": "x-cid",
																"value": "testandoooo",
																"type": "text"
															},
															{
																"key": "bypass-validation",
																"value": "{{BypassValidationHeader}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n   \"fields\": {\r\n      \"mti\": \"0100\",\r\n      \"card_id\": 344528168,\r\n      \"account_id\": 291625284,\r\n      \"program_id\": 28707,\r\n      \"token_id\": null,\r\n      \"wallet_id\": \"\",\r\n      \"amount_transaction\": 20.0,\r\n      \"amount_local\": 20.0,\r\n      \"amount_settlement\": 0,\r\n      \"transaction_timestamp\": \"2025-08-01T12:02:25\",\r\n      \"processing_code\": \"000000\",\r\n      \"payment_card_brand\": \"Mastercard\",\r\n      \"currency\": \"986\",\r\n      \"merchant_id_code\": \"ABC123TESTMTF19\",\r\n      \"merchant_name\": \"Merchant1\\\\UNKNOWN\\\\Wate\",\r\n      \"merchant_city\": \"loo\\\\B1410  BR\",\r\n      \"merchant_state_or_country_code\": \"BRA\",\r\n      \"merchant_terminal_id\": \"\",\r\n      \"atc_chip\": \"\",\r\n      \"atc_database\": \"[]\",\r\n      \"cvv_data\": \"\",\r\n      \"entry_mode\": \"01\",\r\n      \"mcc\": \"5411\",\r\n      \"card_type\": \"PLASTIC\",\r\n      \"country_code\": \"\",\r\n      \"chip_validation\": true,\r\n      \"postal_code\": \"\",\r\n      \"chip_cryptogram_information_data\": \"\",\r\n      \"chip_transaction_date\": \"\",\r\n      \"chip_transaction_type\": \"\",\r\n      \"chip_amount_authorized\": \"\",\r\n      \"chip_transaction_currency_code\": \"\",\r\n      \"chip_application_interchange_profile\": \"\",\r\n      \"chip_terminal_country_code\": \"\",\r\n      \"chip_cardholder_verification_method\": \"\",\r\n      \"chip_terminal_capabilities\": \"\",\r\n      \"chip_amount_other\": \"\",\r\n      \"chip_application_transaction_counter\": \"\",\r\n      \"cardholder_postal_code\": \"\",\r\n      \"cardholder_street_number\": \"\",\r\n      \"cardholder_street_address\": \"\",\r\n      \"match_address\": null,\r\n      \"match_postal_code\": null,\r\n      \"no_address_data\": null,\r\n      \"transaction_type\": \"00\",\r\n      \"nsu\": \"{{nsuGlobal}}\",\r\n      \"retrieval_reference_number\": \"{{nsuGlobal}}\",\r\n      \"authorization_code\": \"{{authorizationCode}}\",\r\n      \"incoming_authorization_code\": \"\",\r\n      \"response_code\": \"00\",\r\n      \"terminal_capability\": \"0\",\r\n      \"tvr\": \"\",\r\n      \"cvr\": \"\",\r\n      \"number_of_installments\": 1,\r\n      \"network_score\": 0,\r\n      \"pos_postal_code\": \"\",\r\n      \"acquirer_code\": \"999698\",\r\n      \"denial_code\": \"\",\r\n      \"financial_network_code\": \"MPL\",\r\n      \"banknet_reference_number\": \"NRP9MM\",\r\n      \"cvv_presence\": false,\r\n      \"password_present\": false,\r\n      \"account_type\": \"20\",\r\n      \"validation_results\": [\r\n        {\r\n          \"name\": \"BALANCE_CONFIG\",\r\n          \"status\": \"APPROVED\",\r\n          \"reason\": \"BALANCE_CONFIG_FOUND\",\r\n          \"description\": \"Balance Config exists.\",\r\n          \"additional_data\": {}\r\n        },\r\n        {\r\n          \"name\": \"CARD_EXISTS\",\r\n          \"status\": \"APPROVED\",\r\n          \"reason\": \"CARD_FOUND\",\r\n          \"description\": \"Card exists.\",\r\n          \"additional_data\": {\r\n            \"token\": \"\",\r\n            \"type\": \"PLASTIC\",\r\n            \"pan_hash\": \"ZVnGo25/vNdcwgR5mNT1j9BJYyZmFg4sdMmzgpcHQ+tuNDnoV6vna+muijMFO6Je7eGiLLWBDi8yf17aIo6JfA==\"\r\n          }\r\n        },\r\n        {\r\n          \"name\": \"CARD_MODE\",\r\n          \"status\": \"APPROVED\",\r\n          \"reason\": \"CARD_MODE_VALID\",\r\n          \"description\": \"Valid card mode\",\r\n          \"additional_data\": {\r\n            \"mode_type\": \"DEBIT\"\r\n          }\r\n        },\r\n        {\r\n          \"name\": \"CONTACTLESS\",\r\n          \"status\": \"APPROVED\",\r\n          \"reason\": \"CONTACTLESS_ENABLED\",\r\n          \"description\": \"Contactless enabled.\",\r\n          \"additional_data\": {\r\n            \"is_contactless_enabled\": true,\r\n            \"entry_mode\": \"010\",\r\n            \"is_token_present\": false\r\n          }\r\n        },\r\n        {\r\n          \"name\": \"ACCOUNT_TYPE\",\r\n          \"status\": \"APPROVED\",\r\n          \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n          \"description\": \"Valid account type selection.\",\r\n          \"additional_data\": {\r\n            \"account_type\": \"20\",\r\n            \"account_type_selection\": \"DEBIT\",\r\n            \"card_mode\": \"DEBIT\"\r\n          }\r\n        },\r\n        {\r\n          \"name\": \"ACCOUNT\",\r\n          \"status\": \"APPROVED\",\r\n          \"reason\": \"ACCOUNT_FOUND\",\r\n          \"description\": \"Account found.\",\r\n          \"additional_data\": {\r\n            \"account_id\": 291625284\r\n          }\r\n        },\r\n        {\r\n          \"name\": \"RULES\",\r\n          \"status\": \"SKIPPED\",\r\n          \"reason\": \"RULES_NOT_ENABLED\",\r\n          \"description\": \"Rules Evaluation not enabled.\",\r\n          \"additional_data\": {}\r\n        }\r\n      ],\r\n      \"account_owner_data\": [\r\n        {\r\n          \"accountOwnerType\": \"\",\r\n          \"accountOwnerNameFirst\": \"\",\r\n          \"accountOwnerNameMiddle\": \"\",\r\n          \"accountOwnerNameLast\": \"\",\r\n          \"additionalServiceResultData\": {\r\n            \"accountNameRequestResult\": null,\r\n            \"fullNameAccountMatchDecision\": null,\r\n            \"firstNameAccountMatchDecision\": null,\r\n            \"middleNameAccountMatchDecision\": null,\r\n            \"lastNameAccountMatchDecision\": null\r\n          }\r\n        }\r\n      ],\r\n      \"account_name_request\": \"I\",\r\n      \"card_metadata\": {\r\n        \"env\": \"Sandbox\",\r\n        \"proxy\": \"2720982395400000358\",\r\n        \"motivo\": \"COMPLETO\",\r\n        \"parcerias\": \"BV CARTÕES\",\r\n        \"companyKey\": \"SDB_BV\",\r\n        \"corDoPlastico\": \"2\",\r\n        \"correlationId\": \"48e6e77f-31c1-43cd-a683-85475c89331f\",\r\n        \"numeroProposta\": \"1924636\",\r\n        \"codigoTipoCartao\": \"43\",\r\n        \"descricaoTipoCartao\": \"MASTERCARD MAIS\",\r\n        \"codigoGrupoRelacionamento\": \"1\"\r\n      },\r\n      \"pin_block\": \"\",\r\n      \"network_transaction_data\": \"{\\\"de2_primary_account_number\\\":\\\"ZVnGo25/vNdcwgR5mNT1j9BJYyZmFg4sdMmzgpcHQ+tuNDnoV6vna+muijMFO6Je7eGiLLWBDi8yf17aIo6JfA==\\\",\\\"de3_processing_code\\\":{\\\"sf1_cardholder_transaction_type_code\\\":\\\"00\\\",\\\"sf2_cardholder_from_account_type_code\\\":\\\"20\\\",\\\"sf3_cardholder_to_account_type_code\\\":\\\"00\\\"},\\\"de4_amount_transaction\\\":\\\"000000002000\\\",\\\"de6_amount_cardholder_billing\\\":\\\"000000002000\\\",\\\"de7_tranmission_date_and_time\\\":{\\\"sf1_date\\\":\\\"0801\\\",\\\"sf2_time\\\":\\\"170225\\\"},\\\"de9_conversion_rate_settlement\\\":{},\\\"de10_conversion_rate_cardholder_billing\\\":{\\\"sf1_decimal_indicator\\\":\\\"6\\\",\\\"sf2_cardholderbilling_conversion_rate\\\":\\\"1000000\\\"},\\\"de11_stan\\\":\\\"000035\\\",\\\"de12_time_local_transaction\\\":\\\"120225\\\",\\\"de13_date_local_transaction\\\":\\\"0801\\\",\\\"de14_date_expiration\\\":\\\"3007\\\",\\\"de15_date_settlement\\\":\\\"0801\\\",\\\"de16_date_conversion\\\":\\\"0731\\\",\\\"de18_merchant_type\\\":\\\"5411\\\",\\\"de19_acquiring_institution_country_code\\\":\\\"076\\\",\\\"de22_pos_entry_mode\\\":{\\\"sf1_pos_terminal_pan_entry_mode\\\":\\\"01\\\",\\\"sf2_pos_terminal_pin_entry_mode\\\":\\\"0\\\"},\\\"de28_amount_transaction_fee\\\":{},\\\"de29_amount_settlement_fee\\\":{},\\\"de30_amount_transaction_processing_fee\\\":{},\\\"de31_amount_settlement_processing_fee\\\":{},\\\"de32_acquiring_institution_id_code\\\":\\\"999698\\\",\\\"de37_retrieval_reference_number\\\":{\\\"sf1_transaction_date_and_initiator_discretionary_data\\\":\\\"5213129\\\",\\\"sf2_terminal_transaction_number\\\":\\\"00035\\\"},\\\"de39_response_code\\\":\\\"05\\\",\\\"de42_card_acceptor_id_code\\\":\\\"ABC123TESTMTF19\\\",\\\"de43_card_acceptor_name_location_for_all_transactions\\\":{\\\"sf1_card_acceptor_name\\\":\\\"Merchant1\\\\\\\\UNKNOWN\\\\\\\\Wate\\\",\\\"sf2_space\\\":\\\"r\\\",\\\"sf3_card_acceptor_city\\\":\\\"loo\\\\\\\\B1410  BR\\\",\\\"sf4_space\\\":\\\"A\\\",\\\"sf5_card_acceptor_state_or_country_code\\\":\\\"BRA\\\"},\\\"de48_additional_data_private_user\\\":{\\\"de48_tcc\\\":\\\"R\\\",\\\"de48_start\\\":\\\"201\\\",\\\"de48_size\\\":\\\"006\\\",\\\"de48SubElements\\\":[\\\"14\\\"],\\\"se06_device_related_data\\\":{},\\\"se07_transaction_related_data1\\\":{},\\\"se08_transaction_related_data2\\\":{},\\\"se09_virtual_card_number_data\\\":{},\\\"se11_key_exchange_block_data\\\":{},\\\"se13_mastercard_hosted_mobile_phone_top_up_request_data\\\":{},\\\"se14_account_type_indicator\\\":\\\"D\\\",\\\"se15_authorization_system_advice_date_and_time\\\":{},\\\"se18_service_parameters\\\":{},\\\"se21_acceptance_data\\\":{},\\\"se22_multi_purpose_merchant_indicator\\\":{},\\\"se23_payment_initiation_channel\\\":{},\\\"se24_account_level_management_service_data\\\":{},\\\"se25_mastercard_cash_program_data\\\":{},\\\"se26_wallet_program_data\\\":{},\\\"se27_transaction_analysis\\\":{},\\\"se33_pan_mapping_file_information\\\":{},\\\"se34_atc_information\\\":{},\\\"se36_visa_mmv\\\":{},\\\"se37_additional_merchant_data\\\":{},\\\"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\\\":{},\\\"se41_eletronic_commercer_certificate_qualifying_information\\\":{},\\\"se42_eletronic_commerce_indicator\\\":{},\\\"se43_ucaf\\\":{},\\\"se48_digital_commerce_solutions_indicators\\\":{},\\\"se49_time_validation_information\\\":{},\\\"se51_merchant_on_behalf_services\\\":{},\\\"se55_merchant_fraud_scoring_data\\\":{},\\\"se58_atm_additional_data\\\":{},\\\"se59_original_serial_switch_number\\\":{},\\\"se61_pos_data_extended_condition_codes\\\":{},\\\"se64_transit_program\\\":{},\\\"se65_terminal_compliant_indicator\\\":{},\\\"se66_authentication_data\\\":{},\\\"se67_money_send_information\\\":{},\\\"se74_additional_processing_information\\\":{},\\\"se75_fraud_scoring_data\\\":{},\\\"se78_payment_service_indicator\\\":{},\\\"se93_fleet_card_id_request_data\\\":{}},\\\"de49_currency_code_transaction\\\":\\\"986\\\",\\\"de51_currency_code_cardholder_billing\\\":\\\"986\\\",\\\"de55_integrated_circuit_card\\\":{},\\\"de60_advice_reason_code\\\":{\\\"de112Size\\\":\\\"007\\\",\\\"de112Start\\\":\\\"216\\\",\\\"sf1_advice_reason_code\\\":\\\"111\\\",\\\"sf2_advice_detail_code\\\":\\\"0020\\\"},\\\"de61_pos_data\\\":{\\\"sf1_pos_terminal_attendance\\\":\\\"0\\\",\\\"sf2_reserved_for_future_use\\\":\\\"0\\\",\\\"sf3_pos_terminal_location\\\":\\\"0\\\",\\\"sf4_pos_cardholder_presence\\\":\\\"0\\\",\\\"sf5_pos_card_presence\\\":\\\"0\\\",\\\"sf6_pos_card_capture_capabilities\\\":\\\"0\\\",\\\"sf7_pos_transaction_status\\\":\\\"0\\\",\\\"sf8_pos_transaction_security\\\":\\\"0\\\",\\\"sf9_reserved_for_future_use\\\":\\\"0\\\",\\\"sf10_cardholder_activated_terminal_level\\\":\\\"0\\\",\\\"sf11_pos_card_data_terminal_input_capability_indicator\\\":\\\"0\\\",\\\"sf12_pos_authorization_life_cycle\\\":\\\"00\\\",\\\"sf13_pos_country_code_or_submerchant\\\":\\\"076\\\"},\\\"de63_network_data\\\":{\\\"sf1_financial_network_code\\\":\\\"MPL\\\",\\\"sf2_banknet_reference_number\\\":\\\"NRP9MM\\\"},\\\"de90_original_data_elements\\\":{},\\\"de94_service_indicator\\\":{},\\\"de95_replacement_amounts\\\":{},\\\"de97_amount_net_settlement\\\":{},\\\"de104_transaction_description\\\":{\\\"se004_digital_service_provider\\\":{},\\\"se005_digital_authentication_data\\\":{}},\\\"de105_multi_use_transaction_identification_data\\\":{\\\"sf1_transaction_link_id\\\":\\\"61R-1pEHTNOamLMe9ucdSQ\\\"},\\\"de112_additional_data_national_use\\\":{},\\\"de120_record_data\\\":{},\\\"de120_standin_account_file_data\\\":{},\\\"de121_authorizing_agent_id_code\\\":\\\"000001\\\",\\\"de122_additional_acceptor_data\\\":{},\\\"de124_member_defined_data\\\":{},\\\"start\\\":1754068130390923959,\\\"de126_switch_private_data\\\":{}}\",\r\n      \"original_network_data\": {\r\n        \"de2_primary_account_number\": \"p5wOjLNbLKyvYJqk6ixnTlBrZBAdc6r8/7H4/Wj5GNdMZuc5kmBJMAD3gtmmoTdYUL2Xv7UGYlQMZKPWF9SWXA==\",\r\n        \"de3_processing_code\": {\r\n          \"sf1_cardholder_transaction_type_code\": \"00\",\r\n          \"sf2_cardholder_from_account_type_code\": \"20\",\r\n          \"sf3_cardholder_to_account_type_code\": \"00\"\r\n        },\r\n        \"de4_amount_transaction\": \"000000002000\",\r\n        \"de6_amount_cardholder_billing\": \"000000002000\",\r\n        \"de7_tranmission_date_and_time\": {\r\n          \"sf1_date\": \"0801\",\r\n          \"sf2_time\": \"170225\"\r\n        },\r\n        \"de9_conversion_rate_settlement\": {},\r\n        \"de10_conversion_rate_cardholder_billing\": {\r\n          \"sf1_decimal_indicator\": \"6\",\r\n          \"sf2_cardholderbilling_conversion_rate\": \"1000000\"\r\n        },\r\n        \"de11_stan\": \"000035\",\r\n        \"de12_time_local_transaction\": \"120225\",\r\n        \"de13_date_local_transaction\": \"0801\",\r\n        \"de14_date_expiration\": \"3007\",\r\n        \"de15_date_settlement\": \"0801\",\r\n        \"de16_date_conversion\": \"0731\",\r\n        \"de18_merchant_type\": \"5411\",\r\n        \"de19_acquiring_institution_country_code\": \"076\",\r\n        \"de22_pos_entry_mode\": {\r\n          \"sf1_pos_terminal_pan_entry_mode\": \"01\",\r\n          \"sf2_pos_terminal_pin_entry_mode\": \"0\"\r\n        },\r\n        \"de28_amount_transaction_fee\": {},\r\n        \"de29_amount_settlement_fee\": {},\r\n        \"de30_amount_transaction_processing_fee\": {},\r\n        \"de31_amount_settlement_processing_fee\": {},\r\n        \"de32_acquiring_institution_id_code\": \"999698\",\r\n        \"de37_retrieval_reference_number\": {\r\n          \"sf1_transaction_date_and_initiator_discretionary_data\": \"5213129\",\r\n          \"sf2_terminal_transaction_number\": \"00035\"\r\n        },\r\n        \"de39_response_code\": \"05\",\r\n        \"de42_card_acceptor_id_code\": \"ABC123TESTMTF19\",\r\n        \"de43_card_acceptor_name_location_for_all_transactions\": {\r\n          \"sf1_card_acceptor_name\": \"Merchant1\\\\UNKNOWN\\\\Wate\",\r\n          \"sf2_space\": \"r\",\r\n          \"sf3_card_acceptor_city\": \"loo\\\\B1410  BR\",\r\n          \"sf4_space\": \"A\",\r\n          \"sf5_card_acceptor_state_or_country_code\": \"BRA\"\r\n        },\r\n        \"de48_additional_data_private_user\": {\r\n          \"de48_tcc\": \"R\",\r\n          \"de48_start\": \"201\",\r\n          \"de48_size\": \"006\",\r\n          \"de48SubElements\": [\r\n            \"14\"\r\n          ],\r\n          \"se06_device_related_data\": {},\r\n          \"se07_transaction_related_data1\": {},\r\n          \"se08_transaction_related_data2\": {},\r\n          \"se09_virtual_card_number_data\": {},\r\n          \"se11_key_exchange_block_data\": {},\r\n          \"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r\n          \"se14_account_type_indicator\": \"D\",\r\n          \"se15_authorization_system_advice_date_and_time\": {},\r\n          \"se18_service_parameters\": {},\r\n          \"se21_acceptance_data\": {},\r\n          \"se22_multi_purpose_merchant_indicator\": {},\r\n          \"se23_payment_initiation_channel\": {},\r\n          \"se24_account_level_management_service_data\": {},\r\n          \"se25_mastercard_cash_program_data\": {},\r\n          \"se26_wallet_program_data\": {},\r\n          \"se27_transaction_analysis\": {},\r\n          \"se33_pan_mapping_file_information\": {},\r\n          \"se34_atc_information\": {},\r\n          \"se36_visa_mmv\": {},\r\n          \"se37_additional_merchant_data\": {},\r\n          \"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r\n          \"se41_eletronic_commercer_certificate_qualifying_information\": {},\r\n          \"se42_eletronic_commerce_indicator\": {},\r\n          \"se43_ucaf\": {},\r\n          \"se48_digital_commerce_solutions_indicators\": {},\r\n          \"se49_time_validation_information\": {},\r\n          \"se51_merchant_on_behalf_services\": {},\r\n          \"se55_merchant_fraud_scoring_data\": {},\r\n          \"se58_atm_additional_data\": {},\r\n          \"se59_original_serial_switch_number\": {},\r\n          \"se61_pos_data_extended_condition_codes\": {},\r\n          \"se64_transit_program\": {},\r\n          \"se65_terminal_compliant_indicator\": {},\r\n          \"se66_authentication_data\": {},\r\n          \"se67_money_send_information\": {},\r\n          \"se74_additional_processing_information\": {},\r\n          \"se75_fraud_scoring_data\": {},\r\n          \"se78_payment_service_indicator\": {},\r\n          \"se93_fleet_card_id_request_data\": {}\r\n        },\r\n        \"de49_currency_code_transaction\": \"986\",\r\n        \"de51_currency_code_cardholder_billing\": \"986\",\r\n        \"de55_integrated_circuit_card\": {},\r\n        \"de60_advice_reason_code\": {},\r\n        \"de61_pos_data\": {\r\n          \"sf1_pos_terminal_attendance\": \"0\",\r\n          \"sf2_reserved_for_future_use\": \"0\",\r\n          \"sf3_pos_terminal_location\": \"0\",\r\n          \"sf4_pos_cardholder_presence\": \"0\",\r\n          \"sf5_pos_card_presence\": \"0\",\r\n          \"sf6_pos_card_capture_capabilities\": \"0\",\r\n          \"sf7_pos_transaction_status\": \"0\",\r\n          \"sf8_pos_transaction_security\": \"0\",\r\n          \"sf9_reserved_for_future_use\": \"0\",\r\n          \"sf10_cardholder_activated_terminal_level\": \"0\",\r\n          \"sf11_pos_card_data_terminal_input_capability_indicator\": \"0\",\r\n          \"sf12_pos_authorization_life_cycle\": \"00\",\r\n          \"sf13_pos_country_code_or_submerchant\": \"076\"\r\n        },\r\n        \"de63_network_data\": {\r\n          \"sf1_financial_network_code\": \"MPL\",\r\n          \"sf2_banknet_reference_number\": \"NRP9MM\"\r\n        },\r\n        \"de90_original_data_elements\": {},\r\n        \"de94_service_indicator\": {},\r\n        \"de95_replacement_amounts\": {},\r\n        \"de97_amount_net_settlement\": {},\r\n        \"de104_transaction_description\": {\r\n          \"se004_digital_service_provider\": {},\r\n          \"se005_digital_authentication_data\": {}\r\n        },\r\n        \"de105_multi_use_transaction_identification_data\": {\r\n          \"sf1_transaction_link_id\": \"61R-1pEHTNOamLMe9ucdSQ\"\r\n        },\r\n        \"de112_additional_data_national_use\": {},\r\n        \"de120_record_data\": {},\r\n        \"de120_standin_account_file_data\": {},\r\n        \"de121_authorizing_agent_id_code\": \"000001\",\r\n        \"de122_additional_acceptor_data\": {},\r\n        \"de124_member_defined_data\": {},\r\n        \"start\": 1754068130390923959,\r\n        \"de126_switch_private_data\": {}\r\n      }\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{UrlJudge}}/transactions",
															"host": [
																"{{UrlJudge}}"
															],
															"path": [
																"transactions"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "MTI-0400",
											"item": [
												{
													"name": "DMC - MTI 0100-0400",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"\r",
																	"// Função delay para pausar execução async\r",
																	"function delay(ms) {\r",
																	"    return new Promise(resolve => setTimeout(resolve, ms));\r",
																	"}\r",
																	"\r",
																	"// FLAGS para controlar execução de blocos, caso queira desativar algum\r",
																	"const FLAGS = {\r",
																	"    sendNetworkEventEnabled: true,\r",
																	"    sendJudgeTransactionEnabled: true,\r",
																	"    sendSecondNetworkEventEnabled: true,\r",
																	"    getTransactionEnabled: true,\r",
																	"    validateMambuEnabled: false,\r",
																	"};\r",
																	"\r",
																	"const requestPayload = JSON.parse(pm.request.body.raw);\r",
																	"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
																	"const pan = pm.collectionVariables.get('pan');\r",
																	"const debitProgramCardId = requestPayload.fields.program_id;\r",
																	"// let transactionData; // usaremos onde for o caso\r",
																	"\r",
																	"const type = pm.globals.get('transactionType');\r",
																	"\r",
																	"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
																	"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
																	"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
																	"const judgeSendfunction = pm.collectionVariables.get('sendJudgeTransactionRequest');\r",
																	"\r",
																	"const getTransaction = new Function('params', judgeFunction);\r",
																	"const sendJudgeTransactionRequest = new Function('params', judgeSendfunction);\r",
																	"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
																	"const validateMambu = new Function('params', validateMambuBody);\r",
																	"\r",
																	"const correlationId = uuid.v4().toString();\r",
																	"\r",
																	"const statusCode = pm.response.status;\r",
																	"const response = JSON.parse(pm.response.stream.toString());\r",
																	"\r",
																	"function logRequest() {\r",
																	"    console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
																	"    console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
																	"    console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
																	"    console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
																	"    console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
																	"    console.log(\"|=========================================================================================|\\n\");\r",
																	"}\r",
																	"\r",
																	"// Função para enviar o evento inicial ao RabbitMQ\r",
																	"async function sendFirstNetworkEvent() {\r",
																	"    if (!FLAGS.sendNetworkEventEnabled) return null;\r",
																	"\r",
																	"    console.log(\"Executando request do Rabbit: enviando evento...\");\r",
																	"    return await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        mti: \"0100\",\r",
																	"        conciliationType: \"DUAL_MESSAGE\",\r",
																	"        authorizationCategory: authorizationCategory[1].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\",\r",
																	"        debitProgramCard: debitProgramCardId,\r",
																	"        adviceCode: \"111\"\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"// Função para enviar a transação para Judge (segunda chamada)\r",
																	"async function sendJudgeTransaction() {\r",
																	"    if (!FLAGS.sendJudgeTransactionEnabled) return null;\r",
																	"\r",
																	"    // Prepara requestPayload para enviar\r",
																	"    requestPayload.fields.mti = \"0400\";\r",
																	"    requestPayload.fields.response_code = \"34\";\r",
																	"    requestPayload.fields.original_network_data.de90_original_data_elements = {\r",
																	"        \"sf1_original_message_type_identifier\": \"0100\",\r",
																	"        \"sf2_original_de11_systems_trace_audit_number\": requestPayload.nsu,\r",
																	"        \"sf3_original_de7_tranmission_date_and_time\": \"0807135459\",\r",
																	"        \"sf4_original_de32_acquiring_institution_id_code\": \"00000999698\",\r",
																	"        \"sf5_original_de33_forwarding_institution_id_code\": \"00000000000\"\r",
																	"    };\r",
																	"\r",
																	"    return await sendJudgeTransactionRequest({\r",
																	"        pm,\r",
																	"        requestBody: requestPayload,\r",
																	"        correlationId\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"// Função para enviar o segundo evento ao RabbitMQ (terceira chamada)\r",
																	"async function sendSecondNetworkEvent() {\r",
																	"    if (!FLAGS.sendSecondNetworkEventEnabled) return null;\r",
																	"\r",
																	"    return await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        mti: \"0100\",\r",
																	"        conciliationType: \"DUAL_MESSAGE\",\r",
																	"        authorizationCategory: authorizationCategory[1].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\",\r",
																	"        debitProgramCard: debitProgramCardId,\r",
																	"        adviceCode: \"111\"\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"// Função para enviar evento de clearing confirmation\r",
																	"async function sendClearingConfirmationEvent() {\r",
																	"    if (!FLAGS.sendSecondNetworkEventEnabled) return null;\r",
																	"\r",
																	"    return await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
																	"        messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
																	"        mti: \"1240\",\r",
																	"        conciliationType: \"UNDEFINED\",\r",
																	"        debitProgramCard: debitProgramCardId,\r",
																	"        authorizationCategory: authorizationCategory[2].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\"\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"// Função para buscar transação no Judge (última chamada)\r",
																	"async function requestGetTransaction() {\r",
																	"    if (!FLAGS.getTransactionEnabled) return null;\r",
																	"\r",
																	"    return await getTransaction({\r",
																	"        pm,\r",
																	"        fields: requestPayload.fields,\r",
																	"        correlationId\r",
																	"    });\r",
																	"}\r",
																	"// Validação Mambu (última validação)\r",
																	"async function requestValidateMambu(proxy, authorizationId) {\r",
																	"    if (!FLAGS.validateMambuEnabled) return null;\r",
																	"\r",
																	"    return await validateMambu({ pm, proxy, authorizationId });\r",
																	"}\r",
																	"\r",
																	"// Função principal que executa o fluxo sequencial com delays controlados\r",
																	"async function main() {\r",
																	"    logRequest();\r",
																	"\r",
																	"    if (!(response.approve === true || statusCode === \"OK\")) {\r",
																	"        console.log(\"Response não aprovado ou statusCode inesperado, não executa ações subsequentes.\");\r",
																	"        return;\r",
																	"    }\r",
																	"\r",
																	"    try {\r",
																	"        // 1) Envia primeiro evento do Rabbit\r",
																	"        const firstEventResponse = await sendFirstNetworkEvent();\r",
																	"        console.log(\"Resposta recebida primeiro evento:\", firstEventResponse);\r",
																	"\r",
																	"        // 2) Espera 15s para garantir o processamento no backend\r",
																	"        await delay(15000);\r",
																	"\r",
																	"        // 3) Envia o sendJudgeTransaction\r",
																	"        const judgeResponse = await sendJudgeTransaction();\r",
																	"        console.log(\"Resposta recebida SendTransaction(Judge):\", judgeResponse);\r",
																	"\r",
																	"        // 4) Espera 10s antes de continuar (pode ajustar se quiser)\r",
																	"        await delay(10000);\r",
																	"\r",
																	"        // 5) Envia o segundo evento network event\r",
																	"        const secondEventResponse = await sendSecondNetworkEvent();\r",
																	"        console.log(\"Resposta recebida segundo evento:\", secondEventResponse);\r",
																	"\r",
																	"        // 6) Envia evento de clearing confirmation\r",
																	"        const clearingEventResponse = await sendClearingConfirmationEvent();\r",
																	"        console.log(\"Resposta recebida clearing confirmation:\", clearingEventResponse);\r",
																	"\r",
																	"        // 7) Busca transação no Judge\r",
																	"        const transactionResponse = await requestGetTransaction();\r",
																	"\r",
																	"        if (!transactionResponse) {\r",
																	"            console.warn(\"Sem dados de transação para validar.\");\r",
																	"            return;\r",
																	"        }\r",
																	"\r",
																	"        const result = {\r",
																	"            authorizationCode: transactionResponse.transactionIdentifier.authorizationCode,\r",
																	"            nsu: transactionResponse.transactionIdentifier.nsu,\r",
																	"            panHash: transactionResponse.card.panHashProcessor,\r",
																	"            transactionId: transactionResponse.transactionId,\r",
																	"            transactionFunction: transactionResponse.transactionFunction,\r",
																	"            status: transactionResponse.status,\r",
																	"            proxy: transactionResponse.card.proxy\r",
																	"        };\r",
																	"\r",
																	"        console.log(\"Resposta recebida GetTransaction(Judge):\", result);\r",
																	"\r",
																	"        // 8) Aguarda 100 segundos antes de validar Mambu\r",
																	"        await delay(100000);\r",
																	"\r",
																	"        const mambuResponse = await requestValidateMambu(transactionResponse.card.proxy, transactionResponse.transactionId);\r",
																	"\r",
																	"        if (mambuResponse) {\r",
																	"            const mambuResult = {\r",
																	"                currencyCode: mambuResponse.currencyCode,\r",
																	"                amount: mambuResponse.amount,\r",
																	"                externalReferenceId: mambuResponse.externalReferenceId,\r",
																	"                status: mambuResponse.status,\r",
																	"                creditDebitIndicator: mambuResponse.creditDebitIndicator,\r",
																	"            };\r",
																	"            console.log(\"Resposta recebida Mambu:\", mambuResult);\r",
																	"        }\r",
																	"\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.error(\"Erro no processamento:\", error);\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"main();\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//console.clear()",
																	"",
																	"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
																	"// Converter strings de funções em funções executáveis",
																	"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
																	"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
																	"const nsu = generateNsu(6);",
																	"",
																	"const authorizationCode = generateRandomString(5);",
																	"pm.collectionVariables.set('authorizationCode', authorizationCode);",
																	"pm.collectionVariables.set('nsuGlobal', nsu);",
																	"const IntMaxValue = parseInt(\"2147483647\");",
																	"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
																	"pm.collectionVariables.set('authorizationId', authorizationId)",
																	"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
																	"const amount = _.random(1, 20);",
																	"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
																	"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
																	"//pm.collectionVariables.set('randomAmount', 0);",
																	"var uuid = require('uuid');",
																	"pm.collectionVariables.set('randomId', uuid.v4());",
																	"pm.collectionVariables.set('currency', '840'); // Real = 986; Dollar = 840",
																	"pm.collectionVariables.set('contryCode', 'USA'); // Brasil = BRA; Luxemburgo = LUX",
																	"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
																	"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
																	"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
																	"pm.collectionVariables.set('mcc', '5311');",
																	"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
																	"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
																	"pm.collectionVariables.set('walletId', '111');",
																	"pm.collectionVariables.set('responseCode', '00');",
																	"pm.collectionVariables.set('denialCode', '00');",
																	"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
																	"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
																	"pm.collectionVariables.set('acquirerCode',728384008);",
																	"pm.collectionVariables.set('accountIdDebit',45545454);",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-correlation-id",
																"value": "{{$guid}}",
																"type": "text"
															},
															{
																"key": "x-pismo-sign",
																"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
																"type": "text"
															},
															{
																"key": "x-cid",
																"value": "testandoooo",
																"type": "text"
															},
															{
																"key": "bypass-validation",
																"value": "{{BypassValidationHeader}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\": \"{{authorizationId}}\",\r\n  \"entity\": \"transaction\",\r\n  \"fields\": {\r\n    \"mti\": \"0100\",\r\n    \"card_id\": 344528168,\r\n    \"account_id\": 291625284,\r\n    \"program_id\": 28707,\r\n    \"token_id\": null,\r\n    \"wallet_id\": \"\",\r\n    \"amount_transaction\": 95.0,\r\n    \"amount_local\": 95.0,\r\n    \"amount_settlement\": 0,\r\n    \"transaction_timestamp\": \"2025-08-07T08:54:59\",\r\n    \"processing_code\": \"000000\",\r\n    \"payment_card_brand\": \"Mastercard\",\r\n    \"currency\": \"986\",\r\n    \"merchant_id_code\": \"ABC123TESTMTF19\",\r\n    \"merchant_name\": \"Merchant1\\\\UNKNOWN\\\\Wate\",\r\n    \"merchant_city\": \"loo\\\\B1410  BR\",\r\n    \"merchant_state_or_country_code\": \"BRA\",\r\n    \"merchant_terminal_id\": \"\",\r\n    \"atc_chip\": \"\",\r\n    \"atc_database\": \"[]\",\r\n    \"cvv_data\": \"\",\r\n    \"entry_mode\": \"81\",\r\n    \"mcc\": \"5411\",\r\n    \"card_type\": \"PLASTIC\",\r\n    \"country_code\": \"\",\r\n    \"chip_validation\": true,\r\n    \"postal_code\": \"\",\r\n    \"chip_cryptogram_information_data\": \"\",\r\n    \"chip_transaction_date\": \"\",\r\n    \"chip_transaction_type\": \"\",\r\n    \"chip_amount_authorized\": \"\",\r\n    \"chip_transaction_currency_code\": \"\",\r\n    \"chip_application_interchange_profile\": \"\",\r\n    \"chip_terminal_country_code\": \"\",\r\n    \"chip_cardholder_verification_method\": \"\",\r\n    \"chip_terminal_capabilities\": \"\",\r\n    \"chip_amount_other\": \"\",\r\n    \"chip_application_transaction_counter\": \"\",\r\n    \"cardholder_postal_code\": \"\",\r\n    \"cardholder_street_number\": \"\",\r\n    \"cardholder_street_address\": \"\",\r\n    \"match_address\": null,\r\n    \"match_postal_code\": null,\r\n    \"no_address_data\": null,\r\n    \"transaction_type\": \"00\",\r\n    \"nsu\": \"{{nsuGlobal}}\",\r\n    \"retrieval_reference_number\": \"{{nsuGlobal}}\",\r\n    \"authorization_code\": \"{{authorizationCode}}\",\r\n    \"incoming_authorization_code\": \"\",\r\n    \"response_code\": \"00\",\r\n    \"terminal_capability\": \"0\",\r\n    \"tvr\": \"\",\r\n    \"cvr\": \"\",\r\n    \"number_of_installments\": 1,\r\n    \"network_score\": 0,\r\n    \"pos_postal_code\": \"\",\r\n    \"acquirer_code\": \"999698\",\r\n    \"denial_code\": \"\",\r\n    \"financial_network_code\": \"MBK\",\r\n    \"banknet_reference_number\": \"WQX4WR\",\r\n    \"cvv_presence\": false,\r\n    \"password_present\": false,\r\n    \"account_type\": \"20\",\r\n    \"validation_results\": [\r\n      {\r\n        \"name\": \"TERMINAL_CAPABILITY\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"TERMINAL_CAPABILITY_VALID\",\r\n        \"description\": \"Terminal capability is valid\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"ARQC\",\r\n        \"status\": \"SKIPPED\",\r\n        \"reason\": \"NO_CRYPTOGRAM\",\r\n        \"description\": \"No cryptogram present\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"CVM\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"NO_CVM_TRANSACTION_WITH_NO_AUTH_METHOD\",\r\n        \"description\": \"Ica configured to allow no CVM\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"ENTRY_MODE\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"ENTRY_MODE_VALID\",\r\n        \"description\": \"Entry mode valid\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"CHIP_SIGNATURE\",\r\n        \"status\": \"SKIPPED\",\r\n        \"reason\": \"NO_CHIP_SIGNATURE\",\r\n        \"description\": \"No chip signature present\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"CARD_EXISTS\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_FOUND\",\r\n        \"description\": \"Card exists.\",\r\n        \"additional_data\": {\r\n          \"token\": \"\",\r\n          \"type\": \"PLASTIC\",\r\n          \"pan_hash\": \"pXP/ATTFHpAlrzY5pzG7fX1It6oVIQvUbLmOVO3kpzO8fKAn7Pwtaqj0rMpTs8sOTpikFYv55ee+yhaQhLc6XA==\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CARD_MODE\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_MODE_VALID\",\r\n        \"description\": \"Valid card mode\",\r\n        \"additional_data\": {\r\n          \"mode_type\": \"DEBIT\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CARD_TOKEN_STATUS\",\r\n        \"status\": \"SKIPPED\",\r\n        \"reason\": \"SKIPPED\",\r\n        \"description\": \"Validation not executed\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"PROGRAM\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"PROGRAM_FOUND\",\r\n        \"description\": \"Program 28706 found.\",\r\n        \"additional_data\": {\r\n          \"program_id\": 28706\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"PROCESSING_CODE\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"PROCESSING_CODE_FOUND\",\r\n        \"description\": \"Processing code by network 00 and processing code mapped is 00.\",\r\n        \"additional_data\": {\r\n          \"processing_code_by_network\": \"00\",\r\n          \"processing_code_mapped\": \"00\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"PLATFORM_CONFIG\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"PLATFORM_CONFIG_FOUND\",\r\n        \"description\": \"Program found.\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"PROGRAM_CONFIG\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"PROGRAM_CONFIG_FOUND\",\r\n        \"description\": \"Program found.\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"AUTHORIZATION_DISABLED\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"AUTHORIZATION_CONFIG_APPROVED\",\r\n        \"description\": \"Authorization enabled for current transaction\",\r\n        \"additional_data\": {\r\n          \"bin\": \"27209862\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"DCC\",\r\n        \"status\": \"SKIPPED\",\r\n        \"reason\": \"NOT_DCC_TRANSACTION\",\r\n        \"description\": \"It is not a DCC transaction.\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"BALANCE_CONFIG\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"BALANCE_CONFIG_FOUND\",\r\n        \"description\": \"Balance Config exists.\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"CARD_EXISTS\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_FOUND\",\r\n        \"description\": \"Card exists.\",\r\n        \"additional_data\": {\r\n          \"token\": \"\",\r\n          \"type\": \"PLASTIC\",\r\n          \"pan_hash\": \"pXP/ATTFHpAlrzY5pzG7fX1It6oVIQvUbLmOVO3kpzO8fKAn7Pwtaqj0rMpTs8sOTpikFYv55ee+yhaQhLc6XA==\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CARD_MODE\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_MODE_VALID\",\r\n        \"description\": \"Valid card mode\",\r\n        \"additional_data\": {\r\n          \"mode_type\": \"DEBIT\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CONTACTLESS\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CONTACTLESS_ENABLED\",\r\n        \"description\": \"Contactless enabled.\",\r\n        \"additional_data\": {\r\n          \"is_contactless_enabled\": true,\r\n          \"entry_mode\": \"810\",\r\n          \"is_token_present\": false\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"ACCOUNT_TYPE\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n        \"description\": \"Valid account type selection.\",\r\n        \"additional_data\": {\r\n          \"account_type\": \"20\",\r\n          \"account_type_selection\": \"DEBIT\",\r\n          \"card_mode\": \"DEBIT\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CARD_ATC\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_ATC_VALID\",\r\n        \"description\": \"Received null but the last is []. Used these params: MinOffset: null, MaxOffset: null, IsAdvice: false.\",\r\n        \"additional_data\": {\r\n          \"persisted_card_atc\": \"[]\",\r\n          \"is_advice\": false,\r\n          \"merchant_category\": \"5411\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n        \"description\": \"Card inputted expiration date is valid.\",\r\n        \"additional_data\": {\r\n          \"expiration_date\": \"3008\",\r\n          \"inputted_expiration_date\": \"3008\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CARD_VALID_UNTIL\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n        \"description\": \"Card is valid.\",\r\n        \"additional_data\": {}\r\n      },\r\n      {\r\n        \"name\": \"CARD_EXPIRATION_DATE\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_NOT_EXPIRED\",\r\n        \"description\": \"Card not expired.\",\r\n        \"additional_data\": {\r\n          \"expiration_date\": \"2030-08-31\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CARD_STATUS\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_STATUS_VALID\",\r\n        \"description\": \"Card status: NORMAL.\",\r\n        \"additional_data\": {\r\n          \"status\": \"NORMAL\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CARD_MODE_STATUS\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_MODE_STATUS_ACTIVE\",\r\n        \"description\": \"Valid card mode status\",\r\n        \"additional_data\": {\r\n          \"status\": \"ACTIVE\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"PASSWORD_ATTEMPTS\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n        \"description\": \"Password tries is valid.\",\r\n        \"additional_data\": {\r\n          \"password_max_tries\": \"3.00000000\",\r\n          \"password_tries\": \"0\",\r\n          \"has_invalid_password\": false\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"ACCOUNT\",\r\n        \"status\": \"APPROVED\",\r\n        \"reason\": \"ACCOUNT_FOUND\",\r\n        \"description\": \"Account found.\",\r\n        \"additional_data\": {\r\n          \"account_id\": 300725179\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"RULES\",\r\n        \"status\": \"SKIPPED\",\r\n        \"reason\": \"RULES_NOT_ENABLED\",\r\n        \"description\": \"Rules Evaluation not enabled.\",\r\n        \"additional_data\": {}\r\n      }\r\n    ],\r\n    \"account_owner_data\": [\r\n      {\r\n        \"accountOwnerType\": \"\",\r\n        \"accountOwnerNameFirst\": \"\",\r\n        \"accountOwnerNameMiddle\": \"\",\r\n        \"accountOwnerNameLast\": \"\",\r\n        \"additionalServiceResultData\": {\r\n          \"accountNameRequestResult\": null,\r\n          \"fullNameAccountMatchDecision\": null,\r\n          \"firstNameAccountMatchDecision\": null,\r\n          \"middleNameAccountMatchDecision\": null,\r\n          \"lastNameAccountMatchDecision\": null\r\n        }\r\n      }\r\n    ],\r\n    \"account_name_request\": \"I\",\r\n    \"card_metadata\": {\r\n      \"env\": \"Sandbox\",\r\n      \"proxy\": \"2720986295600217294\",\r\n      \"motivo\": \"COMPLETO\",\r\n      \"parcerias\": \"BV CARTÕES\",\r\n      \"companyKey\": \"SDB_BV\",\r\n      \"corDoPlastico\": \"2\",\r\n      \"correlationId\": \"e0a5b546-caca-4e14-b892-7be1e5e388c4\",\r\n      \"numeroProposta\": \"1927788\",\r\n      \"codigoTipoCartao\": \"41\",\r\n      \"descricaoTipoCartao\": \"PLASTICO\",\r\n      \"codigoGrupoRelacionamento\": \"1\"\r\n    },\r\n    \"pin_block\": \"\",\r\n    \"network_transaction_data\": \"{\\\"de2_primary_account_number\\\":\\\"pXP/ATTFHpAlrzY5pzG7fX1It6oVIQvUbLmOVO3kpzO8fKAn7Pwtaqj0rMpTs8sOTpikFYv55ee+yhaQhLc6XA==\\\",\\\"de3_processing_code\\\":{\\\"sf1_cardholder_transaction_type_code\\\":\\\"00\\\",\\\"sf2_cardholder_from_account_type_code\\\":\\\"20\\\",\\\"sf3_cardholder_to_account_type_code\\\":\\\"00\\\"},\\\"de4_amount_transaction\\\":\\\"000000009500\\\",\\\"de6_amount_cardholder_billing\\\":\\\"000000009500\\\",\\\"de7_tranmission_date_and_time\\\":{\\\"sf1_date\\\":\\\"0807\\\",\\\"sf2_time\\\":\\\"135459\\\"},\\\"de9_conversion_rate_settlement\\\":{},\\\"de10_conversion_rate_cardholder_billing\\\":{\\\"sf1_decimal_indicator\\\":\\\"6\\\",\\\"sf2_cardholderbilling_conversion_rate\\\":\\\"1000000\\\"},\\\"de11_stan\\\":\\\"000110\\\",\\\"de12_time_local_transaction\\\":\\\"085459\\\",\\\"de13_date_local_transaction\\\":\\\"0807\\\",\\\"de14_date_expiration\\\":\\\"3008\\\",\\\"de15_date_settlement\\\":\\\"0807\\\",\\\"de16_date_conversion\\\":\\\"0806\\\",\\\"de18_merchant_type\\\":\\\"5411\\\",\\\"de19_acquiring_institution_country_code\\\":\\\"076\\\",\\\"de22_pos_entry_mode\\\":{\\\"sf1_pos_terminal_pan_entry_mode\\\":\\\"81\\\",\\\"sf2_pos_terminal_pin_entry_mode\\\":\\\"0\\\"},\\\"de28_amount_transaction_fee\\\":{},\\\"de29_amount_settlement_fee\\\":{},\\\"de30_amount_transaction_processing_fee\\\":{},\\\"de31_amount_settlement_processing_fee\\\":{},\\\"de32_acquiring_institution_id_code\\\":\\\"999698\\\",\\\"de37_retrieval_reference_number\\\":{\\\"sf1_transaction_date_and_initiator_discretionary_data\\\":\\\"5219129\\\",\\\"sf2_terminal_transaction_number\\\":\\\"00110\\\"},\\\"de42_card_acceptor_id_code\\\":\\\"ABC123TESTMTF19\\\",\\\"de43_card_acceptor_name_location_for_all_transactions\\\":{\\\"sf1_card_acceptor_name\\\":\\\"Merchant1\\\\\\\\UNKNOWN\\\\\\\\Wate\\\",\\\"sf2_space\\\":\\\"r\\\",\\\"sf3_card_acceptor_city\\\":\\\"loo\\\\\\\\B1410  BR\\\",\\\"sf4_space\\\":\\\"A\\\",\\\"sf5_card_acceptor_state_or_country_code\\\":\\\"BRA\\\"},\\\"de48_additional_data_private_user\\\":{\\\"de48_tcc\\\":\\\"T\\\",\\\"de48_start\\\":\\\"199\\\",\\\"de48_size\\\":\\\"017\\\",\\\"de48SubElements\\\":[\\\"14\\\",\\\"42\\\"],\\\"se06_device_related_data\\\":{},\\\"se07_transaction_related_data1\\\":{},\\\"se08_transaction_related_data2\\\":{},\\\"se09_virtual_card_number_data\\\":{},\\\"se11_key_exchange_block_data\\\":{},\\\"se13_mastercard_hosted_mobile_phone_top_up_request_data\\\":{},\\\"se14_account_type_indicator\\\":\\\"D\\\",\\\"se15_authorization_system_advice_date_and_time\\\":{},\\\"se18_service_parameters\\\":{},\\\"se21_acceptance_data\\\":{},\\\"se22_multi_purpose_merchant_indicator\\\":{},\\\"se23_payment_initiation_channel\\\":{},\\\"se24_account_level_management_service_data\\\":{},\\\"se25_mastercard_cash_program_data\\\":{},\\\"se26_wallet_program_data\\\":{},\\\"se27_transaction_analysis\\\":{},\\\"se33_pan_mapping_file_information\\\":{},\\\"se34_atc_information\\\":{},\\\"se36_visa_mmv\\\":{},\\\"se37_additional_merchant_data\\\":{},\\\"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\\\":{},\\\"se41_eletronic_commercer_certificate_qualifying_information\\\":{},\\\"se42_eletronic_commerce_indicator\\\":{\\\"sf1_eletronic_commerce_security_level_indicator_ucaf_collection_indicator\\\":\\\"210\\\"},\\\"se43_ucaf\\\":{},\\\"se48_digital_commerce_solutions_indicators\\\":{},\\\"se49_time_validation_information\\\":{},\\\"se51_merchant_on_behalf_services\\\":{},\\\"se55_merchant_fraud_scoring_data\\\":{},\\\"se58_atm_additional_data\\\":{},\\\"se59_original_serial_switch_number\\\":{},\\\"se61_pos_data_extended_condition_codes\\\":{},\\\"se64_transit_program\\\":{},\\\"se65_terminal_compliant_indicator\\\":{},\\\"se66_authentication_data\\\":{},\\\"se67_money_send_information\\\":{},\\\"se74_additional_processing_information\\\":{},\\\"se75_fraud_scoring_data\\\":{},\\\"se78_payment_service_indicator\\\":{},\\\"se87_card_validation_code_result_or_cvv2\\\":\\\"U\\\",\\\"se93_fleet_card_id_request_data\\\":{}},\\\"de49_currency_code_transaction\\\":\\\"986\\\",\\\"de51_currency_code_cardholder_billing\\\":\\\"986\\\",\\\"de55_integrated_circuit_card\\\":{},\\\"de60_advice_reason_code\\\":{},\\\"de61_pos_data\\\":{\\\"sf1_pos_terminal_attendance\\\":\\\"0\\\",\\\"sf2_reserved_for_future_use\\\":\\\"0\\\",\\\"sf3_pos_terminal_location\\\":\\\"0\\\",\\\"sf4_pos_cardholder_presence\\\":\\\"0\\\",\\\"sf5_pos_card_presence\\\":\\\"0\\\",\\\"sf6_pos_card_capture_capabilities\\\":\\\"0\\\",\\\"sf7_pos_transaction_status\\\":\\\"0\\\",\\\"sf8_pos_transaction_security\\\":\\\"0\\\",\\\"sf9_reserved_for_future_use\\\":\\\"0\\\",\\\"sf10_cardholder_activated_terminal_level\\\":\\\"6\\\",\\\"sf11_pos_card_data_terminal_input_capability_indicator\\\":\\\"0\\\",\\\"sf12_pos_authorization_life_cycle\\\":\\\"00\\\",\\\"sf13_pos_country_code_or_submerchant\\\":\\\"076\\\"},\\\"de63_network_data\\\":{\\\"sf1_financial_network_code\\\":\\\"MBK\\\",\\\"sf2_banknet_reference_number\\\":\\\"WQX4WR\\\"},\\\"de90_original_data_elements\\\":{},\\\"de94_service_indicator\\\":{},\\\"de95_replacement_amounts\\\":{},\\\"de97_amount_net_settlement\\\":{},\\\"de104_transaction_description\\\":{\\\"se004_digital_service_provider\\\":{},\\\"se005_digital_authentication_data\\\":{}},\\\"de105_multi_use_transaction_identification_data\\\":{\\\"sf1_transaction_link_id\\\":\\\"Tqt_4HR4Rnmfn7HUZuBm0A\\\"},\\\"de112_additional_data_national_use\\\":{},\\\"de120_record_data\\\":{},\\\"de120_standin_account_file_data\\\":{},\\\"de122_additional_acceptor_data\\\":{},\\\"de124_member_defined_data\\\":{},\\\"start\\\":1754574899154518169,\\\"de126_switch_private_data\\\":{}}\",\r\n    \"original_network_data\": {\r\n      \"de2_primary_account_number\": \"p5wOjLNbLKyvYJqk6ixnTlBrZBAdc6r8/7H4/Wj5GNdMZuc5kmBJMAD3gtmmoTdYUL2Xv7UGYlQMZKPWF9SWXA==\",\r\n      \"de3_processing_code\": {\r\n        \"sf1_cardholder_transaction_type_code\": \"00\",\r\n        \"sf2_cardholder_from_account_type_code\": \"20\",\r\n        \"sf3_cardholder_to_account_type_code\": \"00\"\r\n      },\r\n      \"de4_amount_transaction\": \"000000009500\",\r\n      \"de6_amount_cardholder_billing\": \"000000009500\",\r\n      \"de7_tranmission_date_and_time\": {\r\n        \"sf1_date\": \"0807\",\r\n        \"sf2_time\": \"135459\"\r\n      },\r\n      \"de9_conversion_rate_settlement\": {},\r\n      \"de10_conversion_rate_cardholder_billing\": {\r\n        \"sf1_decimal_indicator\": \"6\",\r\n        \"sf2_cardholderbilling_conversion_rate\": \"1000000\"\r\n      },\r\n      \"de11_stan\": \"000110\",\r\n      \"de12_time_local_transaction\": \"085459\",\r\n      \"de13_date_local_transaction\": \"0807\",\r\n      \"de14_date_expiration\": \"3008\",\r\n      \"de15_date_settlement\": \"0807\",\r\n      \"de16_date_conversion\": \"0806\",\r\n      \"de18_merchant_type\": \"5411\",\r\n      \"de19_acquiring_institution_country_code\": \"076\",\r\n      \"de22_pos_entry_mode\": {\r\n        \"sf1_pos_terminal_pan_entry_mode\": \"81\",\r\n        \"sf2_pos_terminal_pin_entry_mode\": \"0\"\r\n      },\r\n      \"de28_amount_transaction_fee\": {},\r\n      \"de29_amount_settlement_fee\": {},\r\n      \"de30_amount_transaction_processing_fee\": {},\r\n      \"de31_amount_settlement_processing_fee\": {},\r\n      \"de32_acquiring_institution_id_code\": \"999698\",\r\n      \"de37_retrieval_reference_number\": {\r\n        \"sf1_transaction_date_and_initiator_discretionary_data\": \"5219129\",\r\n        \"sf2_terminal_transaction_number\": \"00110\"\r\n      },\r\n      \"de42_card_acceptor_id_code\": \"ABC123TESTMTF19\",\r\n      \"de43_card_acceptor_name_location_for_all_transactions\": {\r\n        \"sf1_card_acceptor_name\": \"Merchant1\\\\UNKNOWN\\\\Wate\",\r\n        \"sf2_space\": \"r\",\r\n        \"sf3_card_acceptor_city\": \"loo\\\\B1410  BR\",\r\n        \"sf4_space\": \"A\",\r\n        \"sf5_card_acceptor_state_or_country_code\": \"BRA\"\r\n      },\r\n      \"de48_additional_data_private_user\": {\r\n        \"de48_tcc\": \"T\",\r\n        \"de48_start\": \"199\",\r\n        \"de48_size\": \"017\",\r\n        \"de48SubElements\": [\r\n          \"14\",\r\n          \"42\"\r\n        ],\r\n        \"se06_device_related_data\": {},\r\n        \"se07_transaction_related_data1\": {},\r\n        \"se08_transaction_related_data2\": {},\r\n        \"se09_virtual_card_number_data\": {},\r\n        \"se11_key_exchange_block_data\": {},\r\n        \"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r\n        \"se14_account_type_indicator\": \"D\",\r\n        \"se15_authorization_system_advice_date_and_time\": {},\r\n        \"se18_service_parameters\": {},\r\n        \"se21_acceptance_data\": {},\r\n        \"se22_multi_purpose_merchant_indicator\": {},\r\n        \"se23_payment_initiation_channel\": {},\r\n        \"se24_account_level_management_service_data\": {},\r\n        \"se25_mastercard_cash_program_data\": {},\r\n        \"se26_wallet_program_data\": {},\r\n        \"se27_transaction_analysis\": {},\r\n        \"se33_pan_mapping_file_information\": {},\r\n        \"se34_atc_information\": {},\r\n        \"se36_visa_mmv\": {},\r\n        \"se37_additional_merchant_data\": {},\r\n        \"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r\n        \"se41_eletronic_commercer_certificate_qualifying_information\": {},\r\n        \"se42_eletronic_commerce_indicator\": {\r\n          \"sf1_eletronic_commerce_security_level_indicator_ucaf_collection_indicator\": \"210\"\r\n        },\r\n        \"se43_ucaf\": {},\r\n        \"se48_digital_commerce_solutions_indicators\": {},\r\n        \"se49_time_validation_information\": {},\r\n        \"se51_merchant_on_behalf_services\": {},\r\n        \"se55_merchant_fraud_scoring_data\": {},\r\n        \"se58_atm_additional_data\": {},\r\n        \"se59_original_serial_switch_number\": {},\r\n        \"se61_pos_data_extended_condition_codes\": {},\r\n        \"se64_transit_program\": {},\r\n        \"se65_terminal_compliant_indicator\": {},\r\n        \"se66_authentication_data\": {},\r\n        \"se67_money_send_information\": {},\r\n        \"se74_additional_processing_information\": {},\r\n        \"se75_fraud_scoring_data\": {},\r\n        \"se78_payment_service_indicator\": {},\r\n        \"se87_card_validation_code_result_or_cvv2\": \"U\",\r\n        \"se93_fleet_card_id_request_data\": {}\r\n      },\r\n      \"de49_currency_code_transaction\": \"986\",\r\n      \"de51_currency_code_cardholder_billing\": \"986\",\r\n      \"de55_integrated_circuit_card\": {},\r\n      \"de60_advice_reason_code\": {},\r\n      \"de61_pos_data\": {\r\n        \"sf1_pos_terminal_attendance\": \"0\",\r\n        \"sf2_reserved_for_future_use\": \"0\",\r\n        \"sf3_pos_terminal_location\": \"0\",\r\n        \"sf4_pos_cardholder_presence\": \"0\",\r\n        \"sf5_pos_card_presence\": \"0\",\r\n        \"sf6_pos_card_capture_capabilities\": \"0\",\r\n        \"sf7_pos_transaction_status\": \"0\",\r\n        \"sf8_pos_transaction_security\": \"0\",\r\n        \"sf9_reserved_for_future_use\": \"0\",\r\n        \"sf10_cardholder_activated_terminal_level\": \"6\",\r\n        \"sf11_pos_card_data_terminal_input_capability_indicator\": \"0\",\r\n        \"sf12_pos_authorization_life_cycle\": \"00\",\r\n        \"sf13_pos_country_code_or_submerchant\": \"076\"\r\n      },\r\n      \"de63_network_data\": {\r\n        \"sf1_financial_network_code\": \"MBK\",\r\n        \"sf2_banknet_reference_number\": \"WQX4WR\"\r\n      },\r\n      \"de90_original_data_elements\": {},\r\n      \"de94_service_indicator\": {},\r\n      \"de95_replacement_amounts\": {},\r\n      \"de97_amount_net_settlement\": {},\r\n      \"de104_transaction_description\": {\r\n        \"se004_digital_service_provider\": {},\r\n        \"se005_digital_authentication_data\": {}\r\n      },\r\n      \"de105_multi_use_transaction_identification_data\": {\r\n        \"sf1_transaction_link_id\": \"Tqt_4HR4Rnmfn7HUZuBm0A\"\r\n      },\r\n      \"de112_additional_data_national_use\": {},\r\n      \"de120_record_data\": {},\r\n      \"de120_standin_account_file_data\": {},\r\n      \"de122_additional_acceptor_data\": {},\r\n      \"de124_member_defined_data\": {},\r\n      \"start\": 1754574899154518169,\r\n      \"de126_switch_private_data\": {}\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{UrlJudge}}/transactions",
															"host": [
																"{{UrlJudge}}"
															],
															"path": [
																"transactions"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "MTI-0100",
											"item": [
												{
													"name": "MTI-0100",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"\r",
																	"function delay(ms) {\r",
																	"    return new Promise(resolve => setTimeout(resolve, ms));\r",
																	"}\r",
																	"\r",
																	"const FLAGS = {\r",
																	"    sendFirstNetworkEventEnabled: true,\r",
																	"    sendClearingConfirmationEnabled: true,\r",
																	"    getTransactionEnabled: true,\r",
																	"    validateMambuEnabled: false,\r",
																	"};\r",
																	"\r",
																	"const requestPayload = JSON.parse(pm.request.body.raw);\r",
																	"console.log(requestPayload);\r",
																	"\r",
																	"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
																	"const pan = pm.collectionVariables.get('pan');\r",
																	"const debitProgramCardId = requestPayload.fields.program_id;\r",
																	"\r",
																	"const type = pm.globals.get('transactionType');\r",
																	"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
																	"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
																	"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
																	"\r",
																	"const getTransaction = new Function('params', judgeFunction);\r",
																	"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
																	"const validateMambu = new Function('params', validateMambuBody);\r",
																	"\r",
																	"const correlationId = uuid.v4().toString();\r",
																	"\r",
																	"const response = JSON.parse(pm.response.stream.toString());\r",
																	"const statusCode = pm.response.status;\r",
																	"\r",
																	"console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
																	"console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
																	"console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
																	"console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
																	"console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
																	"console.log(\"|=========================================================================================|\\n\");\r",
																	"\r",
																	"// Polling que aguarda o status ser diferente dos valores ignorados\r",
																	"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
																	"    const ignoredStatuses = [\r",
																	"        \"DebitTransactionProcessedByProcessorWasReceived\",\r",
																	"        \"TransactionHoldWasApproved\"\r",
																	"    ];\r",
																	"\r",
																	"    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
																	"        try {\r",
																	"            const transaction = await getTransaction(params);\r",
																	"            const currentStatus = transaction?.status;\r",
																	"            console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${currentStatus}`);\r",
																	"            \r",
																	"            if (!ignoredStatuses.includes(currentStatus)) {\r",
																	"                return transaction;\r",
																	"            }\r",
																	"        } catch (error) {\r",
																	"            console.warn(`Erro na tentativa ${attempt} de getTransaction:`, error);\r",
																	"        }\r",
																	"        await delay(intervalMs);\r",
																	"    }\r",
																	"    throw new Error(`Timeout: getTransaction continuou com status ignorados após ${maxAttempts} tentativas.`);\r",
																	"}\r",
																	"\r",
																	"async function main() {\r",
																	"    if (!(response.approve === true || statusCode === \"OK\")) {\r",
																	"        console.log(\"Resposta não aprovada ou statusCode inesperado, abortando execução.\");\r",
																	"        return;\r",
																	"    }\r",
																	"\r",
																	"    try {\r",
																	"        if (FLAGS.sendFirstNetworkEventEnabled) {\r",
																	"            console.log(\"Executando request do Rabbit: enviando primeiro evento...\");\r",
																	"            const firstEventResponse = await sendNetworkEvent({\r",
																	"                pm,\r",
																	"                correlationId,\r",
																	"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"                messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"                mti: \"0100\",\r",
																	"                conciliationType: \"DUAL_MESSAGE\",\r",
																	"                authorizationCategory: authorizationCategory[1].description,\r",
																	"                authorizationResponseCode: \"00\",\r",
																	"                pan,\r",
																	"                requestPayload,\r",
																	"                exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"                caller: \"Mastercard\",\r",
																	"                custom_response_code: \"\",\r",
																	"                debitProgramCard: debitProgramCardId\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida:\", firstEventResponse);\r",
																	"            await delay(30000);\r",
																	"        }\r",
																	"\r",
																	"        // Primeira polling\r",
																	"        let transactionStatusFirst = null;\r",
																	"        if (FLAGS.getTransactionEnabled) {\r",
																	"            transactionStatusFirst = await pollGetTransaction({ pm, fields: requestPayload.fields, correlationId });\r",
																	"            console.log(\"Resposta recebida na primeira poll GetTransaction(Judge):\", {\r",
																	"                authorizationCode: transactionStatusFirst.transactionIdentifier.authorizationCode,\r",
																	"                nsu: transactionStatusFirst.transactionIdentifier.nsu,\r",
																	"                panHash: transactionStatusFirst.card.panHashProcessor,\r",
																	"                transactionId: transactionStatusFirst.transactionId,\r",
																	"                transactionFunction: transactionStatusFirst.transactionFunction,\r",
																	"                status: transactionStatusFirst.status,\r",
																	"                proxy: transactionStatusFirst.card.proxy\r",
																	"            });\r",
																	"        }\r",
																	"\r",
																	"        await delay(20000); // atraso antes da segunda polling\r",
																	"\r",
																	"        if (FLAGS.sendClearingConfirmationEnabled && transactionStatusFirst && transactionStatusFirst.status) {\r",
																	"            const clearingConfirmationResponse = await sendNetworkEvent({\r",
																	"                pm,\r",
																	"                correlationId,\r",
																	"                destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
																	"                messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
																	"                mti: \"1240\",\r",
																	"                conciliationType: \"UNDEFINED\",\r",
																	"                debitProgramCard: debitProgramCardId,\r",
																	"                authorizationCategory: authorizationCategory[3].description,\r",
																	"                authorizationResponseCode: \"00\",\r",
																	"                pan,\r",
																	"                requestPayload,\r",
																	"                exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
																	"                caller: \"Mastercard\",\r",
																	"                custom_response_code: \"\"\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida clearing confirmation:\", clearingConfirmationResponse);\r",
																	"        } else if (FLAGS.sendClearingConfirmationEnabled) {\r",
																	"            console.log(`Pulando clearing confirmation. Status está em lista de ignorados.`);\r",
																	"        }\r",
																	"\r",
																	"        if (FLAGS.validateMambuEnabled && transactionStatusFirst) {\r",
																	"            await delay(100000);\r",
																	"            const mambuResponse = await validateMambu({\r",
																	"                pm,\r",
																	"                proxy: transactionStatusFirst.card.proxy,\r",
																	"                authorizationId: transactionStatusFirst.transactionId\r",
																	"            });\r",
																	"            if (mambuResponse) {\r",
																	"                console.log(\"Resposta recebida Mambu:\", {\r",
																	"                    currencyCode: mambuResponse.currencyCode,\r",
																	"                    amount: mambuResponse.amount,\r",
																	"                    externalReferenceId: mambuResponse.externalReferenceId,\r",
																	"                    status: mambuResponse.status,\r",
																	"                    creditDebitIndicator: mambuResponse.creditDebitIndicator\r",
																	"                });\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.error(\"Erro:\", error);\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"main();\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//console.clear()",
																	"",
																	"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
																	"// Converter strings de funções em funções executáveis",
																	"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
																	"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
																	"const nsu = generateNsu(6);",
																	"",
																	"const authorizationCode = generateRandomString(5);",
																	"pm.collectionVariables.set('authorizationCode', authorizationCode);",
																	"pm.collectionVariables.set('nsuGlobal', nsu);",
																	"const IntMaxValue = parseInt(\"2147483647\");",
																	"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
																	"pm.collectionVariables.set('authorizationId', authorizationId)",
																	"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
																	"const amount = _.random(1, 20);",
																	"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
																	"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
																	"//pm.collectionVariables.set('randomAmount', 0);",
																	"var uuid = require('uuid');",
																	"pm.collectionVariables.set('randomId', uuid.v4());",
																	"pm.collectionVariables.set('currency', '840'); // Real = 986; Dollar = 840",
																	"pm.collectionVariables.set('contryCode', 'USA'); // Brasil = BRA; Luxemburgo = LUX",
																	"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
																	"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
																	"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
																	"pm.collectionVariables.set('mcc', '5311');",
																	"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
																	"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
																	"pm.collectionVariables.set('walletId', '111');",
																	"pm.collectionVariables.set('responseCode', '00');",
																	"pm.collectionVariables.set('denialCode', '00');",
																	"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
																	"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
																	"pm.collectionVariables.set('acquirerCode',728384008);",
																	"pm.collectionVariables.set('accountIdDebit',45545454);",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-correlation-id",
																"value": "{{$guid}}",
																"type": "text"
															},
															{
																"key": "x-pismo-sign",
																"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
																"type": "text"
															},
															{
																"key": "x-cid",
																"value": "testandoooo",
																"type": "text"
															},
															{
																"key": "bypass-validation",
																"value": "{{BypassValidationHeader}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n\t\t\"mti\": \"0100\",\r\n\t\t\"card_id\": 344528168,\r\n\t\t\"account_id\": 291690304,\r\n\t\t\"program_id\": 28707,\r\n\t\t\"token_id\": null,\r\n\t\t\"wallet_id\": \"\",\r\n\t\t\"amount_transaction\": 100.0,\r\n\t\t\"amount_local\": 100.0,\r\n\t\t\"amount_settlement\": 0,\r\n\t\t\"transaction_timestamp\": \"2025-08-01T09:42:28\",\r\n\t\t\"processing_code\": \"003100\",\r\n\t\t\"payment_card_brand\": \"Mastercard\",\r\n\t\t\"currency\": \"986\",\r\n\t\t\"merchant_id_code\": \"ABC123TESTMTF19\",\r\n\t\t\"merchant_name\": \"GROCERY, SUPERMARKETS \",\r\n\t\t\"merchant_city\": \"RIO          \",\r\n\t\t\"merchant_state_or_country_code\": \"BRA\",\r\n\t\t\"merchant_terminal_id\": \"\",\r\n\t\t\"atc_chip\": \"\",\r\n\t\t\"atc_database\": \"[]\",\r\n\t\t\"cvv_data\": \"\",\r\n\t\t\"entry_mode\": \"90\",\r\n\t\t\"mcc\": \"5411\",\r\n\t\t\"card_type\": \"PLASTIC\",\r\n\t\t\"country_code\": \"\",\r\n\t\t\"chip_validation\": true,\r\n\t\t\"postal_code\": \"\",\r\n\t\t\"chip_cryptogram_information_data\": \"\",\r\n\t\t\"chip_transaction_date\": \"\",\r\n\t\t\"chip_transaction_type\": \"\",\r\n\t\t\"chip_amount_authorized\": \"\",\r\n\t\t\"chip_transaction_currency_code\": \"\",\r\n\t\t\"chip_application_interchange_profile\": \"\",\r\n\t\t\"chip_terminal_country_code\": \"\",\r\n\t\t\"chip_cardholder_verification_method\": \"\",\r\n\t\t\"chip_terminal_capabilities\": \"\",\r\n\t\t\"chip_amount_other\": \"\",\r\n\t\t\"chip_application_transaction_counter\": \"\",\r\n\t\t\"cardholder_postal_code\": \"\",\r\n\t\t\"cardholder_street_number\": \"\",\r\n\t\t\"cardholder_street_address\": \"\",\r\n\t\t\"match_address\": null,\r\n\t\t\"match_postal_code\": null,\r\n\t\t\"no_address_data\": null,\r\n\t\t\"transaction_type\": \"00\",\r\n\t\t\"nsu\": {{nsuGlobal}},\r\n\t\t\"retrieval_reference_number\": \"081010100065\",\r\n\t\t\"authorization_code\": \"{{authorizationCode}}\",\r\n\t\t\"incoming_authorization_code\": \"\",\r\n\t\t\"response_code\": \"00\",\r\n\t\t\"terminal_capability\": \"0\",\r\n\t\t\"tvr\": \"\",\r\n\t\t\"cvr\": \"\",\r\n\t\t\"number_of_installments\": 1,\r\n\t\t\"network_score\": 0,\r\n\t\t\"pos_postal_code\": \"\",\r\n\t\t\"acquirer_code\": \"999698\",\r\n\t\t\"denial_code\": \"\",\r\n\t\t\"financial_network_code\": \"MCG\",\r\n\t\t\"banknet_reference_number\": \"HEJDMM\",\r\n\t\t\"cvv_presence\": false,\r\n\t\t\"password_present\": true,\r\n\t\t\"account_type\": \"20\",\r\n\t\t\"validation_results\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"TERMINAL_CAPABILITY\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"TERMINAL_CAPABILITY_VALID\",\r\n\t\t\t\t\"description\": \"Terminal capability is valid\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"ARQC\",\r\n\t\t\t\t\"status\": \"SKIPPED\",\r\n\t\t\t\t\"reason\": \"NO_CRYPTOGRAM\",\r\n\t\t\t\t\"description\": \"No cryptogram present\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CVM\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"PIN_AND_CVV_VALID\",\r\n\t\t\t\t\"description\": \"Pin and CVV are valid\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"ENTRY_MODE\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"ENTRY_MODE_VALID\",\r\n\t\t\t\t\"description\": \"Entry mode valid\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CHIP_SIGNATURE\",\r\n\t\t\t\t\"status\": \"SKIPPED\",\r\n\t\t\t\t\"reason\": \"NO_CHIP_SIGNATURE\",\r\n\t\t\t\t\"description\": \"No chip signature present\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_EXISTS\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_FOUND\",\r\n\t\t\t\t\"description\": \"Card exists.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"token\": \"\",\r\n\t\t\t\t\t\"type\": \"PLASTIC\",\r\n\t\t\t\t\t\"pan_hash\": \"p5wOjLNbLKyvYJqk6ixnTlBrZBAdc6r8/7H4/Wj5GNdMZuc5kmBJMAD3gtmmoTdYUL2Xv7UGYlQMZKPWF9SWXA==\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_MODE\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_MODE_VALID\",\r\n\t\t\t\t\"description\": \"Valid card mode\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"mode_type\": \"DEBIT\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_TOKEN_STATUS\",\r\n\t\t\t\t\"status\": \"SKIPPED\",\r\n\t\t\t\t\"reason\": \"SKIPPED\",\r\n\t\t\t\t\"description\": \"Validation not executed\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"PROGRAM\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"PROGRAM_FOUND\",\r\n\t\t\t\t\"description\": \"Program 28707 found.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"program_id\": 28707\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"PROCESSING_CODE\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"PROCESSING_CODE_FOUND\",\r\n\t\t\t\t\"description\": \"Processing code by network 00 and processing code mapped is 003100.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"processing_code_by_network\": \"00\",\r\n\t\t\t\t\t\"processing_code_mapped\": \"003100\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"PLATFORM_CONFIG\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"PLATFORM_CONFIG_FOUND\",\r\n\t\t\t\t\"description\": \"Program found.\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"PROGRAM_CONFIG\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"PROGRAM_CONFIG_FOUND\",\r\n\t\t\t\t\"description\": \"Program found.\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"AUTHORIZATION_DISABLED\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"AUTHORIZATION_CONFIG_APPROVED\",\r\n\t\t\t\t\"description\": \"Authorization enabled for current transaction\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"bin\": \"22330662\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"DCC\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"DCC_TRANSACTION_ALLOWED\",\r\n\t\t\t\t\"description\": \"DCC transaction allowed for program 28707.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"program_id\": 28707,\r\n\t\t\t\t\t\"is_dcc\": true,\r\n\t\t\t\t\t\"is_disable_dcc_config\": false,\r\n\t\t\t\t\t\"program_currency_code\": \"986\",\r\n\t\t\t\t\t\"program_country_code\": \"BRA\",\r\n\t\t\t\t\t\"transaction_currency_code\": \"986\",\r\n\t\t\t\t\t\"transaction_merchant_country_code\": \"IRQ\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"BALANCE_CONFIG\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"BALANCE_CONFIG_FOUND\",\r\n\t\t\t\t\"description\": \"Balance Config exists.\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_EXISTS\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_FOUND\",\r\n\t\t\t\t\"description\": \"Card exists.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"token\": \"\",\r\n\t\t\t\t\t\"type\": \"PLASTIC\",\r\n\t\t\t\t\t\"pan_hash\": \"p5wOjLNbLKyvYJqk6ixnTlBrZBAdc6r8/7H4/Wj5GNdMZuc5kmBJMAD3gtmmoTdYUL2Xv7UGYlQMZKPWF9SWXA==\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_MODE\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_MODE_VALID\",\r\n\t\t\t\t\"description\": \"Valid card mode\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"mode_type\": \"DEBIT\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CONTACTLESS\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CONTACTLESS_ENABLED\",\r\n\t\t\t\t\"description\": \"Contactless enabled.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"is_contactless_enabled\": true,\r\n\t\t\t\t\t\"entry_mode\": \"900\",\r\n\t\t\t\t\t\"is_token_present\": false\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"ACCOUNT_TYPE\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"ACCOUNT_TYPE_VALID\",\r\n\t\t\t\t\"description\": \"Valid account type selection.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"account_type\": \"20\",\r\n\t\t\t\t\t\"account_type_selection\": \"DEBIT\",\r\n\t\t\t\t\t\"card_mode\": \"DEBIT\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_ATC\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_ATC_VALID\",\r\n\t\t\t\t\"description\": \"Received null but the last is []. Used these params: MinOffset: null, MaxOffset: null, IsAdvice: false.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"persisted_card_atc\": \"[]\",\r\n\t\t\t\t\t\"is_advice\": false,\r\n\t\t\t\t\t\"merchant_category\": \"5411\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n\t\t\t\t\"description\": \"Card inputted expiration date is valid.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"expiration_date\": \"3007\",\r\n\t\t\t\t\t\"inputted_expiration_date\": \"3007\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_VALID_UNTIL\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n\t\t\t\t\"description\": \"Card is valid.\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_EXPIRATION_DATE\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_NOT_EXPIRED\",\r\n\t\t\t\t\"description\": \"Card not expired.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"expiration_date\": \"2030-07-31\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_STATUS\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_STATUS_VALID\",\r\n\t\t\t\t\"description\": \"Card status: NORMAL.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"status\": \"NORMAL\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"CARD_MODE_STATUS\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_MODE_STATUS_ACTIVE\",\r\n\t\t\t\t\"description\": \"Valid card mode status\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"status\": \"ACTIVE\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"PASSWORD_ATTEMPTS\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n\t\t\t\t\"description\": \"Password tries is valid.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"password_max_tries\": \"3\",\r\n\t\t\t\t\t\"password_tries\": \"0\",\r\n\t\t\t\t\t\"has_invalid_password\": false\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"ACCOUNT\",\r\n\t\t\t\t\"status\": \"APPROVED\",\r\n\t\t\t\t\"reason\": \"ACCOUNT_FOUND\",\r\n\t\t\t\t\"description\": \"Account found.\",\r\n\t\t\t\t\"additional_data\": {\r\n\t\t\t\t\t\"account_id\": 291690304\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"RULES\",\r\n\t\t\t\t\"status\": \"SKIPPED\",\r\n\t\t\t\t\"reason\": \"RULES_NOT_ENABLED\",\r\n\t\t\t\t\"description\": \"Rules Evaluation not enabled.\",\r\n\t\t\t\t\"additional_data\": {}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"account_owner_data\": [\r\n\t\t\t{\r\n\t\t\t\t\"accountOwnerType\": \"\",\r\n\t\t\t\t\"accountOwnerNameFirst\": \"\",\r\n\t\t\t\t\"accountOwnerNameMiddle\": \"\",\r\n\t\t\t\t\"accountOwnerNameLast\": \"\",\r\n\t\t\t\t\"additionalServiceResultData\": {\r\n\t\t\t\t\t\"accountNameRequestResult\": null,\r\n\t\t\t\t\t\"fullNameAccountMatchDecision\": null,\r\n\t\t\t\t\t\"firstNameAccountMatchDecision\": null,\r\n\t\t\t\t\t\"middleNameAccountMatchDecision\": null,\r\n\t\t\t\t\t\"lastNameAccountMatchDecision\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"account_name_request\": \"I\",\r\n\t\t\"card_metadata\": {\r\n\t\t\t\"env\": \"Sandbox\",\r\n\t\t\t\"proxy\": \"2233066295800000925\",\r\n\t\t\t\"motivo\": \"COMPLETO\",\r\n\t\t\t\"parcerias\": \"BV CARTÕES\",\r\n\t\t\t\"companyKey\": \"SDB_BV\",\r\n\t\t\t\"corDoPlastico\": \"2\",\r\n\t\t\t\"correlationId\": \"f410e8c2-8a4a-48b5-94f6-75144c9b982f\",\r\n\t\t\t\"numeroProposta\": \"1924815\",\r\n\t\t\t\"codigoTipoCartao\": \"39\",\r\n\t\t\t\"descricaoTipoCartao\": \"PLASTICO\",\r\n\t\t\t\"codigoGrupoRelacionamento\": \"1\"\r\n\t\t},\r\n\t\t\"pin_block\": \"\",\r\n\t\t\"network_transaction_data\": \"{\\\"de2_primary_account_number\\\":\\\"p5wOjLNbLKyvYJqk6ixnTlBrZBAdc6r8/7H4/Wj5GNdMZuc5kmBJMAD3gtmmoTdYUL2Xv7UGYlQMZKPWF9SWXA==\\\",\\\"de3_processing_code\\\":{\\\"sf1_cardholder_transaction_type_code\\\":\\\"00\\\",\\\"sf2_cardholder_from_account_type_code\\\":\\\"20\\\",\\\"sf3_cardholder_to_account_type_code\\\":\\\"00\\\"},\\\"de4_amount_transaction\\\":\\\"000000010000\\\",\\\"de6_amount_cardholder_billing\\\":\\\"000000010000\\\",\\\"de7_tranmission_date_and_time\\\":{\\\"sf1_date\\\":\\\"0801\\\",\\\"sf2_time\\\":\\\"144228\\\"},\\\"de9_conversion_rate_settlement\\\":{},\\\"de10_conversion_rate_cardholder_billing\\\":{\\\"sf1_decimal_indicator\\\":\\\"6\\\",\\\"sf2_cardholderbilling_conversion_rate\\\":\\\"1000000\\\"},\\\"de11_stan\\\":\\\"000026\\\",\\\"de12_time_local_transaction\\\":\\\"094228\\\",\\\"de13_date_local_transaction\\\":\\\"0801\\\",\\\"de14_date_expiration\\\":\\\"3007\\\",\\\"de15_date_settlement\\\":\\\"0801\\\",\\\"de16_date_conversion\\\":\\\"0731\\\",\\\"de18_merchant_type\\\":\\\"5411\\\",\\\"de19_acquiring_institution_country_code\\\":\\\"076\\\",\\\"de22_pos_entry_mode\\\":{\\\"sf1_pos_terminal_pan_entry_mode\\\":\\\"90\\\",\\\"sf2_pos_terminal_pin_entry_mode\\\":\\\"0\\\"},\\\"de28_amount_transaction_fee\\\":{},\\\"de29_amount_settlement_fee\\\":{},\\\"de30_amount_transaction_processing_fee\\\":{},\\\"de31_amount_settlement_processing_fee\\\":{},\\\"de32_acquiring_institution_id_code\\\":\\\"999698\\\",\\\"de37_retrieval_reference_number\\\":{\\\"sf1_transaction_date_and_initiator_discretionary_data\\\":\\\"0810101\\\",\\\"sf2_terminal_transaction_number\\\":\\\"00065\\\"},\\\"de42_card_acceptor_id_code\\\":\\\"ABC123TESTMTF19\\\",\\\"de43_card_acceptor_name_location_for_all_transactions\\\":{\\\"sf1_card_acceptor_name\\\":\\\"GROCERY, SUPERMARKETS \\\",\\\"sf2_space\\\":\\\" \\\",\\\"sf3_card_acceptor_city\\\":\\\"RIO          \\\",\\\"sf4_space\\\":\\\" \\\",\\\"sf5_card_acceptor_state_or_country_code\\\":\\\"IRQ\\\"},\\\"de48_additional_data_private_user\\\":{\\\"de48_tcc\\\":\\\"R\\\",\\\"de48_start\\\":\\\"234\\\",\\\"de48_size\\\":\\\"012\\\",\\\"de48SubElements\\\":[\\\"14\\\",\\\"80\\\"],\\\"se06_device_related_data\\\":{},\\\"se07_transaction_related_data1\\\":{},\\\"se08_transaction_related_data2\\\":{},\\\"se09_virtual_card_number_data\\\":{},\\\"se11_key_exchange_block_data\\\":{},\\\"se13_mastercard_hosted_mobile_phone_top_up_request_data\\\":{},\\\"se14_account_type_indicator\\\":\\\"D\\\",\\\"se15_authorization_system_advice_date_and_time\\\":{},\\\"se18_service_parameters\\\":{},\\\"se21_acceptance_data\\\":{},\\\"se22_multi_purpose_merchant_indicator\\\":{},\\\"se23_payment_initiation_channel\\\":{},\\\"se24_account_level_management_service_data\\\":{},\\\"se25_mastercard_cash_program_data\\\":{},\\\"se26_wallet_program_data\\\":{},\\\"se27_transaction_analysis\\\":{},\\\"se33_pan_mapping_file_information\\\":{},\\\"se34_atc_information\\\":{},\\\"se36_visa_mmv\\\":{},\\\"se37_additional_merchant_data\\\":{},\\\"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\\\":{},\\\"se41_eletronic_commercer_certificate_qualifying_information\\\":{},\\\"se42_eletronic_commerce_indicator\\\":{},\\\"se43_ucaf\\\":{},\\\"se48_digital_commerce_solutions_indicators\\\":{},\\\"se49_time_validation_information\\\":{},\\\"se51_merchant_on_behalf_services\\\":{},\\\"se55_merchant_fraud_scoring_data\\\":{},\\\"se58_atm_additional_data\\\":{},\\\"se59_original_serial_switch_number\\\":{},\\\"se61_pos_data_extended_condition_codes\\\":{},\\\"se64_transit_program\\\":{},\\\"se65_terminal_compliant_indicator\\\":{},\\\"se66_authentication_data\\\":{},\\\"se67_money_send_information\\\":{},\\\"se74_additional_processing_information\\\":{},\\\"se75_fraud_scoring_data\\\":{},\\\"se78_payment_service_indicator\\\":{},\\\"se80_pin_service_code\\\":\\\"TV\\\",\\\"se87_card_validation_code_result_or_cvv2\\\":\\\"M\\\",\\\"se93_fleet_card_id_request_data\\\":{}},\\\"de49_currency_code_transaction\\\":\\\"986\\\",\\\"de51_currency_code_cardholder_billing\\\":\\\"986\\\",\\\"de55_integrated_circuit_card\\\":{},\\\"de60_advice_reason_code\\\":{},\\\"de61_pos_data\\\":{\\\"sf1_pos_terminal_attendance\\\":\\\"0\\\",\\\"sf2_reserved_for_future_use\\\":\\\"0\\\",\\\"sf3_pos_terminal_location\\\":\\\"0\\\",\\\"sf4_pos_cardholder_presence\\\":\\\"0\\\",\\\"sf5_pos_card_presence\\\":\\\"0\\\",\\\"sf6_pos_card_capture_capabilities\\\":\\\"0\\\",\\\"sf7_pos_transaction_status\\\":\\\"0\\\",\\\"sf8_pos_transaction_security\\\":\\\"0\\\",\\\"sf9_reserved_for_future_use\\\":\\\"0\\\",\\\"sf10_cardholder_activated_terminal_level\\\":\\\"0\\\",\\\"sf11_pos_card_data_terminal_input_capability_indicator\\\":\\\"0\\\",\\\"sf12_pos_authorization_life_cycle\\\":\\\"00\\\",\\\"sf13_pos_country_code_or_submerchant\\\":\\\"076\\\"},\\\"de63_network_data\\\":{\\\"sf1_financial_network_code\\\":\\\"MCG\\\",\\\"sf2_banknet_reference_number\\\":\\\"HEJDMM\\\"},\\\"de90_original_data_elements\\\":{},\\\"de94_service_indicator\\\":{},\\\"de95_replacement_amounts\\\":{},\\\"de97_amount_net_settlement\\\":{},\\\"de104_transaction_description\\\":{\\\"se004_digital_service_provider\\\":{},\\\"se005_digital_authentication_data\\\":{}},\\\"de105_multi_use_transaction_identification_data\\\":{\\\"sf1_transaction_link_id\\\":\\\"Mfion0IvReepULo0QoE8xw\\\"},\\\"de112_additional_data_national_use\\\":{},\\\"de120_record_data\\\":{},\\\"de120_standin_account_file_data\\\":{},\\\"de122_additional_acceptor_data\\\":{},\\\"de124_member_defined_data\\\":{},\\\"start\\\":1754059348389925267,\\\"de126_switch_private_data\\\":{},\\\"pin_validated\\\":true,\\\"pin_validated_by_pismo\\\":true}\",\r\n\t\t\"original_network_data\": {\r\n\t\t\t\"de2_primary_account_number\": \"p5wOjLNbLKyvYJqk6ixnTlBrZBAdc6r8/7H4/Wj5GNdMZuc5kmBJMAD3gtmmoTdYUL2Xv7UGYlQMZKPWF9SWXA==\",\r\n\t\t\t\"de3_processing_code\": {\r\n\t\t\t\t\"sf1_cardholder_transaction_type_code\": \"00\",\r\n\t\t\t\t\"sf2_cardholder_from_account_type_code\": \"20\",\r\n\t\t\t\t\"sf3_cardholder_to_account_type_code\": \"00\"\r\n\t\t\t},\r\n\t\t\t\"de4_amount_transaction\": \"000000010000\",\r\n\t\t\t\"de6_amount_cardholder_billing\": \"000000010000\",\r\n\t\t\t\"de7_tranmission_date_and_time\": {\r\n\t\t\t\t\"sf1_date\": \"0801\",\r\n\t\t\t\t\"sf2_time\": \"144228\"\r\n\t\t\t},\r\n\t\t\t\"de9_conversion_rate_settlement\": {},\r\n\t\t\t\"de10_conversion_rate_cardholder_billing\": {\r\n\t\t\t\t\"sf1_decimal_indicator\": \"6\",\r\n\t\t\t\t\"sf2_cardholderbilling_conversion_rate\": \"1000000\"\r\n\t\t\t},\r\n\t\t\t\"de11_stan\": \"000026\",\r\n\t\t\t\"de12_time_local_transaction\": \"094228\",\r\n\t\t\t\"de13_date_local_transaction\": \"0801\",\r\n\t\t\t\"de14_date_expiration\": \"3007\",\r\n\t\t\t\"de15_date_settlement\": \"0801\",\r\n\t\t\t\"de16_date_conversion\": \"0731\",\r\n\t\t\t\"de18_merchant_type\": \"5411\",\r\n\t\t\t\"de19_acquiring_institution_country_code\": \"076\",\r\n\t\t\t\"de22_pos_entry_mode\": {\r\n\t\t\t\t\"sf1_pos_terminal_pan_entry_mode\": \"90\",\r\n\t\t\t\t\"sf2_pos_terminal_pin_entry_mode\": \"0\"\r\n\t\t\t},\r\n\t\t\t\"de28_amount_transaction_fee\": {},\r\n\t\t\t\"de29_amount_settlement_fee\": {},\r\n\t\t\t\"de30_amount_transaction_processing_fee\": {},\r\n\t\t\t\"de31_amount_settlement_processing_fee\": {},\r\n\t\t\t\"de32_acquiring_institution_id_code\": \"999698\",\r\n\t\t\t\"de37_retrieval_reference_number\": {\r\n\t\t\t\t\"sf1_transaction_date_and_initiator_discretionary_data\": \"0810101\",\r\n\t\t\t\t\"sf2_terminal_transaction_number\": \"00065\"\r\n\t\t\t},\r\n\t\t\t\"de42_card_acceptor_id_code\": \"ABC123TESTMTF19\",\r\n\t\t\t\"de43_card_acceptor_name_location_for_all_transactions\": {\r\n\t\t\t\t\"sf1_card_acceptor_name\": \"GROCERY, SUPERMARKETS \",\r\n\t\t\t\t\"sf2_space\": \" \",\r\n\t\t\t\t\"sf3_card_acceptor_city\": \"RIO          \",\r\n\t\t\t\t\"sf4_space\": \" \",\r\n\t\t\t\t\"sf5_card_acceptor_state_or_country_code\": \"IRQ\"\r\n\t\t\t},\r\n\t\t\t\"de48_additional_data_private_user\": {\r\n\t\t\t\t\"de48_tcc\": \"R\",\r\n\t\t\t\t\"de48_start\": \"234\",\r\n\t\t\t\t\"de48_size\": \"012\",\r\n\t\t\t\t\"de48SubElements\": [\r\n\t\t\t\t\t\"14\",\r\n\t\t\t\t\t\"80\"\r\n\t\t\t\t],\r\n\t\t\t\t\"se06_device_related_data\": {},\r\n\t\t\t\t\"se07_transaction_related_data1\": {},\r\n\t\t\t\t\"se08_transaction_related_data2\": {},\r\n\t\t\t\t\"se09_virtual_card_number_data\": {},\r\n\t\t\t\t\"se11_key_exchange_block_data\": {},\r\n\t\t\t\t\"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r\n\t\t\t\t\"se14_account_type_indicator\": \"D\",\r\n\t\t\t\t\"se15_authorization_system_advice_date_and_time\": {},\r\n\t\t\t\t\"se18_service_parameters\": {},\r\n\t\t\t\t\"se21_acceptance_data\": {},\r\n\t\t\t\t\"se22_multi_purpose_merchant_indicator\": {},\r\n\t\t\t\t\"se23_payment_initiation_channel\": {},\r\n\t\t\t\t\"se24_account_level_management_service_data\": {},\r\n\t\t\t\t\"se25_mastercard_cash_program_data\": {},\r\n\t\t\t\t\"se26_wallet_program_data\": {},\r\n\t\t\t\t\"se27_transaction_analysis\": {},\r\n\t\t\t\t\"se33_pan_mapping_file_information\": {},\r\n\t\t\t\t\"se34_atc_information\": {},\r\n\t\t\t\t\"se36_visa_mmv\": {},\r\n\t\t\t\t\"se37_additional_merchant_data\": {},\r\n\t\t\t\t\"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r\n\t\t\t\t\"se41_eletronic_commercer_certificate_qualifying_information\": {},\r\n\t\t\t\t\"se42_eletronic_commerce_indicator\": {},\r\n\t\t\t\t\"se43_ucaf\": {},\r\n\t\t\t\t\"se48_digital_commerce_solutions_indicators\": {},\r\n\t\t\t\t\"se49_time_validation_information\": {},\r\n\t\t\t\t\"se51_merchant_on_behalf_services\": {},\r\n\t\t\t\t\"se55_merchant_fraud_scoring_data\": {},\r\n\t\t\t\t\"se58_atm_additional_data\": {},\r\n\t\t\t\t\"se59_original_serial_switch_number\": {},\r\n\t\t\t\t\"se61_pos_data_extended_condition_codes\": {},\r\n\t\t\t\t\"se64_transit_program\": {},\r\n\t\t\t\t\"se65_terminal_compliant_indicator\": {},\r\n\t\t\t\t\"se66_authentication_data\": {},\r\n\t\t\t\t\"se67_money_send_information\": {},\r\n\t\t\t\t\"se74_additional_processing_information\": {},\r\n\t\t\t\t\"se75_fraud_scoring_data\": {},\r\n\t\t\t\t\"se78_payment_service_indicator\": {},\r\n\t\t\t\t\"se80_pin_service_code\": \"TV\",\r\n\t\t\t\t\"se87_card_validation_code_result_or_cvv2\": \"M\",\r\n\t\t\t\t\"se93_fleet_card_id_request_data\": {}\r\n\t\t\t},\r\n\t\t\t\"de49_currency_code_transaction\": \"986\",\r\n\t\t\t\"de51_currency_code_cardholder_billing\": \"986\",\r\n\t\t\t\"de55_integrated_circuit_card\": {},\r\n\t\t\t\"de60_advice_reason_code\": {},\r\n\t\t\t\"de61_pos_data\": {\r\n\t\t\t\t\"sf1_pos_terminal_attendance\": \"0\",\r\n\t\t\t\t\"sf2_reserved_for_future_use\": \"0\",\r\n\t\t\t\t\"sf3_pos_terminal_location\": \"0\",\r\n\t\t\t\t\"sf4_pos_cardholder_presence\": \"0\",\r\n\t\t\t\t\"sf5_pos_card_presence\": \"0\",\r\n\t\t\t\t\"sf6_pos_card_capture_capabilities\": \"0\",\r\n\t\t\t\t\"sf7_pos_transaction_status\": \"0\",\r\n\t\t\t\t\"sf8_pos_transaction_security\": \"0\",\r\n\t\t\t\t\"sf9_reserved_for_future_use\": \"0\",\r\n\t\t\t\t\"sf10_cardholder_activated_terminal_level\": \"0\",\r\n\t\t\t\t\"sf11_pos_card_data_terminal_input_capability_indicator\": \"0\",\r\n\t\t\t\t\"sf12_pos_authorization_life_cycle\": \"00\",\r\n\t\t\t\t\"sf13_pos_country_code_or_submerchant\": \"076\"\r\n\t\t\t},\r\n\t\t\t\"de63_network_data\": {\r\n\t\t\t\t\"sf1_financial_network_code\": \"MCG\",\r\n\t\t\t\t\"sf2_banknet_reference_number\": \"HEJDMM\"\r\n\t\t\t},\r\n\t\t\t\"de90_original_data_elements\": {},\r\n\t\t\t\"de94_service_indicator\": {},\r\n\t\t\t\"de95_replacement_amounts\": {},\r\n\t\t\t\"de97_amount_net_settlement\": {},\r\n\t\t\t\"de104_transaction_description\": {\r\n\t\t\t\t\"se004_digital_service_provider\": {},\r\n\t\t\t\t\"se005_digital_authentication_data\": {}\r\n\t\t\t},\r\n\t\t\t\"de105_multi_use_transaction_identification_data\": {\r\n\t\t\t\t\"sf1_transaction_link_id\": \"Mfion0IvReepULo0QoE8xw\"\r\n\t\t\t},\r\n\t\t\t\"de112_additional_data_national_use\": {},\r\n\t\t\t\"de120_record_data\": {},\r\n\t\t\t\"de120_standin_account_file_data\": {},\r\n\t\t\t\"de122_additional_acceptor_data\": {},\r\n\t\t\t\"de124_member_defined_data\": {},\r\n\t\t\t\"start\": 1754059348389925267,\r\n\t\t\t\"de126_switch_private_data\": {},\r\n\t\t\t\"pin_validated\": true,\r\n\t\t\t\"pin_validated_by_pismo\": true\r\n\t\t}\r\n\t}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{UrlJudge}}/transactions",
															"host": [
																"{{UrlJudge}}"
															],
															"path": [
																"transactions"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1 - Autorização - DMC - Master",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Fixed the error by replacing 'console' with 'pm'\r",
															"var uuid = require('uuid');\r",
															"\r",
															"const requestPayload = JSON.parse(pm.request.body.raw)\r",
															"console.log(requestPayload)\r",
															"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
															"const pan = pm.collectionVariables.get('pan');\r",
															"var debitProgramCard = pm.globals.get('debitProgramId');\r",
															"\r",
															"//let transactionData = {};\r",
															"//console.log(JSON.stringify(requestPayload))\r",
															"const type = pm.globals.get('transactionType');\r",
															"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
															"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
															"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
															"\r",
															"const getTransaction = new Function('params', judgeFunction);\r",
															"const correlationId = uuid.v4().toString();\r",
															"\r",
															"// logs request\r",
															"    console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
															"    console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
															"    console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
															"    console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
															"    console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
															"    console.log(\"|=========================================================================================|\\n\");\r",
															"\r",
															"\r",
															"const response = JSON.parse(pm.response.stream.toString())\r",
															"\r",
															"const statusCode = pm.response.status;\r",
															"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
															"const validateMambu = new Function('params', validateMambuBody);\r",
															"if(response.approve === true || statusCode === \"OK\")\r",
															"{\r",
															"    setTimeout(() => {\r",
															"            console.log(\"Executando request do Rabbit: enviando evento...\");\r",
															"\r",
															"            sendNetworkEvent({\r",
															"                pm,\r",
															"                correlationId,\r",
															"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
															"                messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
															"                mti: \"0100\",\r",
															"                conciliationType: \"DUAL_MESSAGE\",\r",
															"                authorizationCategory: authorizationCategory[1].description,\r",
															"                authorizationResponseCode: \"00\",\r",
															"                pan,\r",
															"                requestPayload,\r",
															"                exchangeName: \"pismo.authorization.events.judge.v2\",\r",
															"                caller: \"Mastercard\",\r",
															"                custom_response_code: \"\"\r",
															"            })\r",
															"            .then(response => {\r",
															"                console.log(\"Resposta recebida:\",  response);\r",
															"                setTimeout(() => {\r",
															"\r",
															"                        sendNetworkEvent({\r",
															"                        pm,\r",
															"                        correlationId,\r",
															"                        destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
															"                        messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
															"                        mti: \"1240\",\r",
															"                        conciliationType: \"UNDEFINED\",\r",
															"                        debitProgramCard,\r",
															"                        authorizationCategory: authorizationCategory[2].description,\r",
															"                        authorizationResponseCode: \"00\",\r",
															"                        pan,\r",
															"                        requestPayload,\r",
															"                        exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
															"                        caller: \"Mastercard\",\r",
															"                        custom_response_code: \"\"\r",
															"                    })\r",
															"                    .then(response => {\r",
															"                        console.log(\"Resposta recebida:\",  response);\r",
															"                        getTransaction({\r",
															"                            pm,\r",
															"                            fields: requestPayload.fields,\r",
															"                            correlationId\r",
															"                            })\r",
															"                            .then(response => {\r",
															"                                const result = {\r",
															"                                        authorizationCode: response.transactionIdentifier.authorizationCode,\r",
															"                                        nsu: response.transactionIdentifier.nsu,\r",
															"                                        panHash: response.card.panHashProcessor,\r",
															"                                        transactionId: response.transactionId,\r",
															"                                        transactionFunction: response.transactionFunction,\r",
															"                                        status: response.status,\r",
															"                                        proxy: response.card.proxy\r",
															"                                    };\r",
															"\r",
															"                                    console.log(\"Resposta recebida GetTransaction(Judge):\", result);\r",
															"\r",
															"                                setTimeout(() => {\r",
															"                                    transactionData = response;\r",
															"                                    validateMambu({ pm, proxy: transactionData.card.proxy, authorizationId: transactionData.transactionId})\r",
															"                                    .then(responseData => {\r",
															"                                       const result = {\r",
															"                                                currencyCode: responseData.currencyCode,\r",
															"                                                amount: responseData.amount,\r",
															"                                                externalReferenceId: responseData.externalReferenceId,\r",
															"                                                status: responseData.status,\r",
															"                                                creditDebitIndicator: responseData.creditDebitIndicator,\r",
															"                                                };\r",
															"                                                console.log(\"Resposta recebida Mambu:\", result);\r",
															"                                        })\r",
															"                                    .catch(error => {\r",
															"                                        console.error('Erro:', error);\r",
															"                                    });\r",
															"                                }, 100000)\r",
															"                            })\r",
															"                            .catch(error => {\r",
															"                                console.error(\"Erro:\", error);\r",
															"                            });\r",
															"                    })\r",
															"                    .catch(err => {\r",
															"                        console.error(\"Erro:\", err);\r",
															"                    });\r",
															"                }, 10000)\r",
															"            })\r",
															"            .catch(err => {\r",
															"                console.error(\"Erro:\", err);\r",
															"            });\r",
															"        }, 15000);\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//console.clear()",
															"",
															"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
															"// Converter strings de funções em funções executáveis",
															"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
															"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
															"const nsu = generateNsu(6);",
															"",
															"const authorizationCode = generateRandomString(5);",
															"pm.collectionVariables.set('authorizationCode', authorizationCode);",
															"pm.collectionVariables.set('nsuGlobal', nsu);",
															"const IntMaxValue = parseInt(\"2147483647\");",
															"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
															"pm.collectionVariables.set('authorizationId', authorizationId)",
															"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
															"const amount = _.random(1, 20);",
															"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
															"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
															"//pm.collectionVariables.set('randomAmount', 0);",
															"var uuid = require('uuid');",
															"pm.collectionVariables.set('randomId', uuid.v4());",
															"pm.collectionVariables.set('currency', '840'); // Real = 986; Dollar = 840",
															"pm.collectionVariables.set('contryCode', 'USA'); // Brasil = BRA; Luxemburgo = LUX",
															"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
															"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
															"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
															"pm.collectionVariables.set('mcc', '5311');",
															"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
															"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
															"pm.collectionVariables.set('walletId', '111');",
															"pm.collectionVariables.set('responseCode', '00');",
															"pm.collectionVariables.set('denialCode', '00');",
															"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
															"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
															"pm.collectionVariables.set('acquirerCode',728384008);",
															"pm.collectionVariables.set('accountIdDebit',45545454);",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-correlation-id",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "x-pismo-sign",
														"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
														"type": "text"
													},
													{
														"key": "x-cid",
														"value": "testandoooo",
														"type": "text"
													},
													{
														"key": "bypass-validation",
														"value": "{{BypassValidationHeader}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 344528168,\r\n        \"account_id\": 291625282,\r\n        \"program_id\": 28706,\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"013100\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"UBT\",\r\n           \"financial_network_code\": \"MBK\",\r\n        \"banknet_reference_number\": \"PY6JML\",\r\n        \"cvv_presence\": false,\r\n        \"payment_card_brand\": \"Mastercard\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"0000000000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"0\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"terminal_capability\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"TERMINAL_CAPABILITY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"TERMINAL_CAPABILITY_VALID\",\r\n                \"description\": \"Terminal capability is valid\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\",\r\n                \"additional_data\": {\r\n                    \"token\": \"\",\r\n                    \"type\": \"PLASTIC\",\r\n                    \"pan_hash\": \"KPdNoNiDN0hCMyU9c5QuyLks5ZKebSFcNfB4PAMsBmAast8yBq8xP4nprI2WTy+xlzNIJOavVrU1WCKMEBzUvg==\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_MODE_VALID\",\r\n                \"description\": \"Valid card mode\",\r\n                \"additional_data\": {\r\n                    \"mode_type\": \"DEBIT\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"PROGRAM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PROGRAM_FOUND\",\r\n                \"description\": \"Program 28706 found.\",\r\n                \"additional_data\": {\r\n                    \"program_id\": 28706\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"PROCESSING_CODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PROCESSING_CODE_FOUND\",\r\n                \"description\": \"Processing code by network 01 and processing code mapped is 013100.\",\r\n                \"additional_data\": {\r\n                    \"processing_code_by_network\": \"01\",\r\n                    \"processing_code_mapped\": \"013100\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"PLATFORM_CONFIG\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PLATFORM_CONFIG_FOUND\",\r\n                \"description\": \"Program found.\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"PROGRAM_CONFIG\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PROGRAM_CONFIG_FOUND\",\r\n                \"description\": \"Program found.\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"AUTHORIZATION_DISABLED\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"AUTHORIZATION_CONFIG_APPROVED\",\r\n                \"description\": \"Authorization enabled for current transaction\",\r\n                \"additional_data\": {\r\n                    \"bin\": \"27209862\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"DCC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NOT_DCC_TRANSACTION\",\r\n                \"description\": \"It is not a DCC transaction.\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"BALANCE_CONFIG\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"BALANCE_CONFIG_FOUND\",\r\n                \"description\": \"Balance Config exists.\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\",\r\n                \"additional_data\": {\r\n                    \"token\": \"\",\r\n                    \"type\": \"PLASTIC\",\r\n                    \"pan_hash\": \"KPdNoNiDN0hCMyU9c5QuyLks5ZKebSFcNfB4PAMsBmAast8yBq8xP4nprI2WTy+xlzNIJOavVrU1WCKMEBzUvg==\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_MODE_VALID\",\r\n                \"description\": \"Valid card mode\",\r\n                \"additional_data\": {\r\n                    \"mode_type\": \"DEBIT\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\",\r\n                \"additional_data\": {\r\n                    \"is_contactless_enabled\": true,\r\n                    \"entry_mode\": \"900\",\r\n                    \"is_token_present\": false\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Valid account type selection.\",\r\n                \"additional_data\": {\r\n                    \"account_type\": \"20\",\r\n                    \"account_type_selection\": \"DEBIT\",\r\n                    \"card_mode\": \"DEBIT\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is [1]. Used these params: MinOffset: null, MaxOffset: null, IsAdvice: false.\",\r\n                \"additional_data\": {\r\n                    \"persisted_card_atc\": \"[1]\",\r\n                    \"is_advice\": false,\r\n                    \"merchant_category\": \"6011\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"3007\",\r\n                    \"inputted_expiration_date\": \"3007\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\",\r\n                \"additional_data\": {}\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2030-07-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"REJECTED\",\r\n                \"reason\": \"CARD_STATUS_INVALID_BLOCKED\",\r\n                \"description\": \"Invalid card status: BLOCKED.\",\r\n                \"additional_data\": {\r\n                    \"status\": \"BLOCKED\",\r\n                    \"custom_code\": \"UBT\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_MODE_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_MODE_STATUS_ACTIVE\",\r\n                \"description\": \"Valid card mode status\",\r\n                \"additional_data\": {\r\n                    \"status\": \"ACTIVE\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\",\r\n                \"additional_data\": {\r\n                    \"password_max_tries\": \"3\",\r\n                    \"password_tries\": \"0\",\r\n                    \"has_invalid_password\": false\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_FOUND\",\r\n                \"description\": \"Account found.\",\r\n                \"additional_data\": {\r\n                    \"account_id\": 291625282\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"RULES\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Rules Evaluation skipped because has a previous rejection.\",\r\n                \"additional_data\": {}\r\n            }\r\n        ],\r\n        \"account_owner_data\": [\r\n            {\r\n                \"accountOwnerType\": \"\",\r\n                \"accountOwnerNameFirst\": \"\",\r\n                \"accountOwnerNameMiddle\": \"\",\r\n                \"accountOwnerNameLast\": \"\",\r\n                \"additionalServiceResultData\": {\r\n                    \"accountNameRequestResult\": null,\r\n                    \"fullNameAccountMatchDecision\": null,\r\n                    \"firstNameAccountMatchDecision\": null,\r\n                    \"middleNameAccountMatchDecision\": null,\r\n                    \"lastNameAccountMatchDecision\": null\r\n                }\r\n            }\r\n        ],\r\n        \"account_name_request\": \"I\",\r\n        \"card_metadata\": {\r\n            \"env\": \"Sandbox\",\r\n            \"proxy\": \"2720986295600000490\",\r\n            \"motivo\": \"COMPLETO\",\r\n            \"parcerias\": \"BV CARTÕES\",\r\n            \"companyKey\": \"SDB_BV\",\r\n            \"corDoPlastico\": \"2\",\r\n            \"correlationId\": \"68dc3fc5-7d84-4d49-ba2b-864b8b54e16e\",\r\n            \"numeroProposta\": \"1924634\",\r\n            \"codigoTipoCartao\": \"41\",\r\n            \"descricaoTipoCartao\": \"MASTERCARD UNICO\",\r\n            \"codigoGrupoRelacionamento\": \"1\"\r\n        },\r\n        \"pin_block\": \"\",\r\n        \"network_transaction_data\": {\r\n            \"de2_primary_account_number\": \"KPdNoNiDN0hCMyU9c5QuyLks5ZKebSFcNfB4PAMsBmAast8yBq8xP4nprI2WTy+xlzNIJOavVrU1WCKMEBzUvg==\",\r\n            \"de3_processing_code\": {\r\n                \"sf1_cardholder_transaction_type_code\": \"01\",\r\n                \"sf2_cardholder_from_account_type_code\": \"20\",\r\n                \"sf3_cardholder_to_account_type_code\": \"00\"\r\n            },\r\n            \"de4_amount_transaction\": \"000000008000\",\r\n            \"de6_amount_cardholder_billing\": \"000000045052\",\r\n            \"de7_tranmission_date_and_time\": {\r\n                \"sf1_date\": \"0801\",\r\n                \"sf2_time\": \"144906\"\r\n            },\r\n            \"de9_conversion_rate_settlement\": {},\r\n            \"de10_conversion_rate_cardholder_billing\": {\r\n                \"sf1_decimal_indicator\": \"6\",\r\n                \"sf2_cardholderbilling_conversion_rate\": \"5631500\"\r\n            },\r\n            \"de11_stan\": \"000031\",\r\n            \"de12_time_local_transaction\": \"094906\",\r\n            \"de13_date_local_transaction\": \"0801\",\r\n            \"de14_date_expiration\": \"3007\",\r\n            \"de15_date_settlement\": \"0801\",\r\n            \"de16_date_conversion\": \"0731\",\r\n            \"de18_merchant_type\": \"6011\",\r\n            \"de19_acquiring_institution_country_code\": \"840\",\r\n            \"de22_pos_entry_mode\": {\r\n                \"sf1_pos_terminal_pan_entry_mode\": \"90\",\r\n                \"sf2_pos_terminal_pin_entry_mode\": \"0\"\r\n            },\r\n            \"de28_amount_transaction_fee\": {},\r\n            \"de29_amount_settlement_fee\": {},\r\n            \"de30_amount_transaction_processing_fee\": {},\r\n            \"de31_amount_settlement_processing_fee\": {},\r\n            \"de32_acquiring_institution_id_code\": \"999080\",\r\n            \"de37_retrieval_reference_number\": {\r\n                \"sf1_transaction_date_and_initiator_discretionary_data\": \"0800001\",\r\n                \"sf2_terminal_transaction_number\": \"00001\"\r\n            },\r\n            \"de41_card_acceptor_terminal_id\": \"MTFT3TST\",\r\n            \"de42_card_acceptor_id_code\": \"Z-6011-USA     \",\r\n            \"de43_card_acceptor_name_location_for_all_transactions\": {\r\n                \"sf2_space\": \" \",\r\n                \"sf4_space\": \" \",\r\n                \"sf5_card_acceptor_state_or_country_code\": \"BRA\",\r\n                \"sf1_2_atm_owning_institution_or_terminal_merchant_address_or_both\": \"INTL EPSS ACQ         \",\r\n                \"sf3_2_atm_or_merchant_location_city\": \"EURO CITY    \",\r\n                \"sf5_2_atm_or_merchant_state_province_or_country_code_location\": \"BRA\"\r\n            },\r\n            \"de48_additional_data_private_user\": {\r\n                \"de48_tcc\": \"Z\",\r\n                \"de48_start\": \"242\",\r\n                \"de48_size\": \"006\",\r\n                \"de48SubElements\": [\r\n                    \"14\"\r\n                ],\r\n                \"se06_device_related_data\": {},\r\n                \"se07_transaction_related_data1\": {},\r\n                \"se08_transaction_related_data2\": {},\r\n                \"se09_virtual_card_number_data\": {},\r\n                \"se11_key_exchange_block_data\": {},\r\n                \"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r\n                \"se14_account_type_indicator\": \"D\",\r\n                \"se15_authorization_system_advice_date_and_time\": {},\r\n                \"se18_service_parameters\": {},\r\n                \"se21_acceptance_data\": {},\r\n                \"se22_multi_purpose_merchant_indicator\": {},\r\n                \"se23_payment_initiation_channel\": {},\r\n                \"se24_account_level_management_service_data\": {},\r\n                \"se25_mastercard_cash_program_data\": {},\r\n                \"se26_wallet_program_data\": {},\r\n                \"se27_transaction_analysis\": {},\r\n                \"se33_pan_mapping_file_information\": {},\r\n                \"se34_atc_information\": {},\r\n                \"se36_visa_mmv\": {},\r\n                \"se37_additional_merchant_data\": {},\r\n                \"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r\n                \"se41_eletronic_commercer_certificate_qualifying_information\": {},\r\n                \"se42_eletronic_commerce_indicator\": {},\r\n                \"se43_ucaf\": {},\r\n                \"se48_digital_commerce_solutions_indicators\": {},\r\n                \"se49_time_validation_information\": {},\r\n                \"se51_merchant_on_behalf_services\": {},\r\n                \"se55_merchant_fraud_scoring_data\": {},\r\n                \"se58_atm_additional_data\": {},\r\n                \"se59_original_serial_switch_number\": {},\r\n                \"se61_pos_data_extended_condition_codes\": {},\r\n                \"se64_transit_program\": {},\r\n                \"se65_terminal_compliant_indicator\": {},\r\n                \"se66_authentication_data\": {},\r\n                \"se67_money_send_information\": {},\r\n                \"se74_additional_processing_information\": {},\r\n                \"se75_fraud_scoring_data\": {},\r\n                \"se78_payment_service_indicator\": {},\r\n                \"se87_card_validation_code_result_or_cvv2\": \"M\",\r\n                \"se93_fleet_card_id_request_data\": {}\r\n            },\r\n            \"de49_currency_code_transaction\": \"840\",\r\n            \"de51_currency_code_cardholder_billing\": \"986\",\r\n            \"de55_integrated_circuit_card\": {},\r\n            \"de60_advice_reason_code\": {},\r\n            \"de61_pos_data\": {\r\n                \"sf1_pos_terminal_attendance\": \"1\",\r\n                \"sf2_reserved_for_future_use\": \"0\",\r\n                \"sf3_pos_terminal_location\": \"0\",\r\n                \"sf4_pos_cardholder_presence\": \"0\",\r\n                \"sf5_pos_card_presence\": \"0\",\r\n                \"sf6_pos_card_capture_capabilities\": \"1\",\r\n                \"sf7_pos_transaction_status\": \"0\",\r\n                \"sf8_pos_transaction_security\": \"0\",\r\n                \"sf9_reserved_for_future_use\": \"0\",\r\n                \"sf10_cardholder_activated_terminal_level\": \"1\",\r\n                \"sf11_pos_card_data_terminal_input_capability_indicator\": \"5\",\r\n                \"sf12_pos_authorization_life_cycle\": \"00\",\r\n                \"sf13_pos_country_code_or_submerchant\": \"076\",\r\n                \"sf14_postal_code_or_submerchant\": \"0000000000\"\r\n            },\r\n            \"de63_network_data\": {\r\n                \"sf1_financial_network_code\": \"MBK\",\r\n                \"sf2_banknet_reference_number\": \"PY6JML\"\r\n            },\r\n            \"de90_original_data_elements\": {},\r\n            \"de94_service_indicator\": {},\r\n            \"de95_replacement_amounts\": {},\r\n            \"de97_amount_net_settlement\": {},\r\n            \"de104_transaction_description\": {\r\n                \"se004_digital_service_provider\": {},\r\n                \"se005_digital_authentication_data\": {}\r\n            },\r\n            \"de105_multi_use_transaction_identification_data\": {\r\n                \"sf1_transaction_link_id\": \"f2VNvozKQ12bsgxlqAGu9g\"\r\n            },\r\n            \"de112_additional_data_national_use\": {},\r\n            \"de120_record_data\": {},\r\n            \"de120_standin_account_file_data\": {},\r\n            \"de122_additional_acceptor_data\": {},\r\n            \"de124_member_defined_data\": {},\r\n            \"start\": 1754059746457648532,\r\n            \"de126_switch_private_data\": {},\r\n            \"pin_validated\": true,\r\n            \"pin_validated_by_pismo\": true\r\n        },\r\n        \"original_network_data\": {\r\n            \"de2_primary_account_number\": \"KPdNoNiDN0hCMyU9c5QuyLks5ZKebSFcNfB4PAMsBmAast8yBq8xP4nprI2WTy+xlzNIJOavVrU1WCKMEBzUvg==\",\r\n            \"de3_processing_code\": {\r\n                \"sf1_cardholder_transaction_type_code\": \"01\",\r\n                \"sf2_cardholder_from_account_type_code\": \"20\",\r\n                \"sf3_cardholder_to_account_type_code\": \"00\"\r\n            },\r\n            \"de4_amount_transaction\": \"000000008000\",\r\n            \"de6_amount_cardholder_billing\": \"000000045052\",\r\n            \"de7_tranmission_date_and_time\": {\r\n                \"sf1_date\": \"0801\",\r\n                \"sf2_time\": \"144906\"\r\n            },\r\n            \"de9_conversion_rate_settlement\": {},\r\n            \"de10_conversion_rate_cardholder_billing\": {\r\n                \"sf1_decimal_indicator\": \"6\",\r\n                \"sf2_cardholderbilling_conversion_rate\": \"5631500\"\r\n            },\r\n            \"de11_stan\": \"000031\",\r\n            \"de12_time_local_transaction\": \"094906\",\r\n            \"de13_date_local_transaction\": \"0801\",\r\n            \"de14_date_expiration\": \"3007\",\r\n            \"de15_date_settlement\": \"0801\",\r\n            \"de16_date_conversion\": \"0731\",\r\n            \"de18_merchant_type\": \"6011\",\r\n            \"de19_acquiring_institution_country_code\": \"840\",\r\n            \"de22_pos_entry_mode\": {\r\n                \"sf1_pos_terminal_pan_entry_mode\": \"90\",\r\n                \"sf2_pos_terminal_pin_entry_mode\": \"0\"\r\n            },\r\n            \"de28_amount_transaction_fee\": {},\r\n            \"de29_amount_settlement_fee\": {},\r\n            \"de30_amount_transaction_processing_fee\": {},\r\n            \"de31_amount_settlement_processing_fee\": {},\r\n            \"de32_acquiring_institution_id_code\": \"999080\",\r\n            \"de37_retrieval_reference_number\": {\r\n                \"sf1_transaction_date_and_initiator_discretionary_data\": \"0800001\",\r\n                \"sf2_terminal_transaction_number\": \"00001\"\r\n            },\r\n            \"de41_card_acceptor_terminal_id\": \"MTFT3TST\",\r\n            \"de42_card_acceptor_id_code\": \"Z-6011-USA     \",\r\n            \"de43_card_acceptor_name_location_for_all_transactions\": {\r\n                \"sf2_space\": \" \",\r\n                \"sf4_space\": \" \",\r\n                \"sf5_card_acceptor_state_or_country_code\": \"BRA\",\r\n                \"sf1_2_atm_owning_institution_or_terminal_merchant_address_or_both\": \"INTL EPSS ACQ         \",\r\n                \"sf3_2_atm_or_merchant_location_city\": \"EURO CITY    \",\r\n                \"sf5_2_atm_or_merchant_state_province_or_country_code_location\": \"BRA\"\r\n            },\r\n            \"de48_additional_data_private_user\": {\r\n                \"de48_tcc\": \"Z\",\r\n                \"de48_start\": \"242\",\r\n                \"de48_size\": \"006\",\r\n                \"de48SubElements\": [\r\n                    \"14\"\r\n                ],\r\n                \"se06_device_related_data\": {},\r\n                \"se07_transaction_related_data1\": {},\r\n                \"se08_transaction_related_data2\": {},\r\n                \"se09_virtual_card_number_data\": {},\r\n                \"se11_key_exchange_block_data\": {},\r\n                \"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r\n                \"se14_account_type_indicator\": \"D\",\r\n                \"se15_authorization_system_advice_date_and_time\": {},\r\n                \"se18_service_parameters\": {},\r\n                \"se21_acceptance_data\": {},\r\n                \"se22_multi_purpose_merchant_indicator\": {},\r\n                \"se23_payment_initiation_channel\": {},\r\n                \"se24_account_level_management_service_data\": {},\r\n                \"se25_mastercard_cash_program_data\": {},\r\n                \"se26_wallet_program_data\": {},\r\n                \"se27_transaction_analysis\": {},\r\n                \"se33_pan_mapping_file_information\": {},\r\n                \"se34_atc_information\": {},\r\n                \"se36_visa_mmv\": {},\r\n                \"se37_additional_merchant_data\": {},\r\n                \"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r\n                \"se41_eletronic_commercer_certificate_qualifying_information\": {},\r\n                \"se42_eletronic_commerce_indicator\": {},\r\n                \"se43_ucaf\": {},\r\n                \"se48_digital_commerce_solutions_indicators\": {},\r\n                \"se49_time_validation_information\": {},\r\n                \"se51_merchant_on_behalf_services\": {},\r\n                \"se55_merchant_fraud_scoring_data\": {},\r\n                \"se58_atm_additional_data\": {},\r\n                \"se59_original_serial_switch_number\": {},\r\n                \"se61_pos_data_extended_condition_codes\": {},\r\n                \"se64_transit_program\": {},\r\n                \"se65_terminal_compliant_indicator\": {},\r\n                \"se66_authentication_data\": {},\r\n                \"se67_money_send_information\": {},\r\n                \"se74_additional_processing_information\": {},\r\n                \"se75_fraud_scoring_data\": {},\r\n                \"se78_payment_service_indicator\": {},\r\n                \"se87_card_validation_code_result_or_cvv2\": \"M\",\r\n                \"se93_fleet_card_id_request_data\": {}\r\n            },\r\n            \"de49_currency_code_transaction\": \"840\",\r\n            \"de51_currency_code_cardholder_billing\": \"986\",\r\n            \"de55_integrated_circuit_card\": {},\r\n            \"de60_advice_reason_code\": {},\r\n            \"de61_pos_data\": {\r\n                \"sf1_pos_terminal_attendance\": \"1\",\r\n                \"sf2_reserved_for_future_use\": \"0\",\r\n                \"sf3_pos_terminal_location\": \"0\",\r\n                \"sf4_pos_cardholder_presence\": \"0\",\r\n                \"sf5_pos_card_presence\": \"0\",\r\n                \"sf6_pos_card_capture_capabilities\": \"1\",\r\n                \"sf7_pos_transaction_status\": \"0\",\r\n                \"sf8_pos_transaction_security\": \"0\",\r\n                \"sf9_reserved_for_future_use\": \"0\",\r\n                \"sf10_cardholder_activated_terminal_level\": \"1\",\r\n                \"sf11_pos_card_data_terminal_input_capability_indicator\": \"5\",\r\n                \"sf12_pos_authorization_life_cycle\": \"00\",\r\n                \"sf13_pos_country_code_or_submerchant\": \"076\",\r\n                \"sf14_postal_code_or_submerchant\": \"0000000000\"\r\n            },\r\n            \"de63_network_data\": {\r\n                \"sf1_financial_network_code\": \"MBK\",\r\n                \"sf2_banknet_reference_number\": \"PY6JML\"\r\n            },\r\n            \"de90_original_data_elements\": {},\r\n            \"de94_service_indicator\": {},\r\n            \"de95_replacement_amounts\": {},\r\n            \"de97_amount_net_settlement\": {},\r\n            \"de104_transaction_description\": {\r\n                \"se004_digital_service_provider\": {},\r\n                \"se005_digital_authentication_data\": {}\r\n            },\r\n            \"de105_multi_use_transaction_identification_data\": {\r\n                \"sf1_transaction_link_id\": \"f2VNvozKQ12bsgxlqAGu9g\"\r\n            },\r\n            \"de112_additional_data_national_use\": {},\r\n            \"de120_record_data\": {},\r\n            \"de120_standin_account_file_data\": {},\r\n            \"de122_additional_acceptor_data\": {},\r\n            \"de124_member_defined_data\": {},\r\n            \"start\": 1754059746457648532,\r\n            \"de126_switch_private_data\": {},\r\n            \"pin_validated\": true,\r\n            \"pin_validated_by_pismo\": true\r\n        }\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{UrlJudge}}/transactions",
													"host": [
														"{{UrlJudge}}"
													],
													"path": [
														"transactions"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "1 - Autorização - DMC - Visa",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Fixed the error by replacing 'console' with 'pm'\r",
													"var uuid = require('uuid');\r",
													"\r",
													"\r",
													"const requestPayload = JSON.parse(pm.request.body.raw)\r",
													"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
													"//console.log(JSON.stringify(requestPayload))\r",
													"const type = postman.getGlobalVariable('transactionType');\r",
													"const mambuUtils = JSON.parse(pm.collectionVariables.get(\"mambuUtils\"));\r",
													"const validateMambu = new Function('return ' + mambuUtils.ValidateIfTransactionDMCWasHoldOnMambu)();\r",
													"const judgeFunction = JSON.parse(pm.collectionVariables.get('judgeUtils'));\r",
													"const getTransaction = new Function('return ' + judgeFunction.findAuthorizationTransaction)();\r",
													"\r",
													"const correlationId = uuid.v4().toString();\r",
													"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
													"\r",
													"pm.test(\"Request (0200) Nº\", function () {\r",
													"    console.log(\"authorization_id: \" + pm.collectionVariables.get('authorizationId'))\r",
													"    console.log(\"Nsu: \" + pm.collectionVariables.get('nsuGlobal'))\r",
													"    console.log(\"AuthorizationCode: \" + pm.collectionVariables.get('authorizationCode'))\r",
													"    console.log(\"ProcessCardId: \" + pm.globals.get('processorCardId'))\r",
													"});\r",
													"\r",
													"const pan = pm.globals.get('pan');\r",
													"var debitProgramCard = pm.globals.get('debitProgramId');\r",
													"console.log(debitProgramCard)\r",
													"\r",
													"const response = JSON.parse(pm.response.stream.toString())\r",
													"const statusCode = pm.response.status;\r",
													"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
													"\r",
													"if(response.approve === true || statusCode === \"OK\")\r",
													"{\r",
													"    setTimeout(() => {\r",
													"        console.log(\"Executando código após a resposta com atraso...\");\r",
													"\r",
													"        sendNetworkEvent({\r",
													"                pm,\r",
													"                correlationId,\r",
													"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
													"                messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
													"                mti: \"0100\",\r",
													"                conciliationType: \"DUAL_MESSAGE\",\r",
													"                authorizationCategory: authorizationCategory[1].description,\r",
													"                authorizationResponseCode: \"00\",\r",
													"                pan,\r",
													"                requestPayload,\r",
													"                exchangeName: \"pismo.authorization.events.judge.v2\",\r",
													"                caller: \"Visa\"\r",
													"            })\r",
													"        .then(response => {\r",
													"            console.log(\"Resposta recebida:\",  response.stream.toString());\r",
													"        })\r",
													"        .catch(err => {\r",
													"            console.error(\"Erro:\", err);\r",
													"        });\r",
													"\r",
													"        setTimeout(() => {\r",
													"\r",
													"                    getTransaction(pm, correlationId, requestPayload.fields.authorization_code, requestPayload.fields.nsu, requestPayload.fields.nsu);\r",
													"\r",
													"            setTimeout(() => {\r",
													"                console.log(\"init mambu request\");\r",
													"                sendNetworkEvent({\r",
													"                pm,\r",
													"                correlationId,\r",
													"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.authorization.events\",\r",
													"                messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
													"                mti: \"1240\",\r",
													"                conciliationType: \"DUAL_MESSAGE\",\r",
													"                debitProgramCard,\r",
													"                authorizationCategory: authorizationCategory[3].description,\r",
													"                authorizationResponseCode: \"00\",\r",
													"                pan,\r",
													"                requestPayload\r",
													"            })\r",
													"            .then(response => {\r",
													"                console.log(\"Resposta recebida:\",  response.stream.toString());\r",
													"            })\r",
													"            .catch(err => {\r",
													"                console.error(\"Erro:\", err);\r",
													"            });\r",
													"\r",
													"                    const transactionData = JSON.parse(pm.collectionVariables.get('lastProcessedTransactionData'));\r",
													"                    validateMambu(pm, true, transactionData.Card.Proxy, transactionData.Id);\r",
													"\r",
													"                setTimeout(() => {\r",
													"                    const mambuResponse = JSON.parse(pm.collectionVariables.get('lastMambuResponse'));\r",
													"                    console.log(\"mambu response\", mambuResponse);\r",
													"                }, 2000);\r",
													"            }, 50000);\r",
													"        }, 30000);\r",
													"\r",
													"                }, 15000); // Espera de 5 segundos\r",
													"                \r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//console.clear()",
													"",
													"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
													"// Converter strings de funções em funções executáveis",
													"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
													"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
													"const nsu = generateNsu(6);",
													"",
													"const authorizationCode = generateRandomString(5);",
													"pm.collectionVariables.set('authorizationCode', authorizationCode);",
													"pm.collectionVariables.set('nsuGlobal', nsu);",
													"const IntMaxValue = parseInt(\"2147483647\");",
													"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
													"pm.globals.set('authorizationId', authorizationId)",
													"pm.globals.set('timestampUtcIso8601', (new Date()).toISOString());",
													"const amount = _.random(1, 20);",
													"pm.globals.set('randomAmount', amount); // amount da transação",
													"pm.globals.set('replacementAmount', amount); // amount que será usado na reversão parcial",
													"//pm.globals.set('randomAmount', 0);",
													"var uuid = require('uuid');",
													"pm.globals.set('randomId', uuid.v4());",
													"pm.globals.set('currency', '840'); // Real = 986; Dollar = 840",
													"pm.globals.set('contryCode', 'USA'); // Brasil = BRA; Luxemburgo = LUX",
													"pm.globals.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
													"pm.globals.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
													"pm.globals.set('entryMode', '05'); // Consultar Costumer Interface Especification",
													"pm.globals.set('mcc', '5311');",
													"pm.globals.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
													"pm.globals.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
													"pm.globals.set('walletId', '111');",
													"pm.globals.set('responseCode', '00');",
													"pm.globals.set('denialCode', '00');",
													"pm.globals.set('eletronicSecurityLevel', '210');",
													"//pm.globals.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
													"pm.globals.set('acquirerCode',728384008);",
													"pm.globals.set('accountIdDebit',102509621);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-correlation-id",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "x-pismo-sign",
												"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
												"type": "text"
											},
											{
												"key": "x-cid",
												"value": "testandoooo",
												"type": "text"
											},
											{
												"key": "bypass-validation",
												"value": "{{BypassValidationHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{authorizationId}}\",\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 86378109,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": \"{{nsuGlobal}}\",\r\n        \"retrieval_reference_number\": \"{{nsuGlobal}}\",\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {\r\n                    \"f2_primary_account_number\": \"1Tb9/xN9JYXjE9b9a9Gh4aRmbinYSzhoUyBRZwsrGmGGFGy5fcOAyMhBFeD5L6ZhIYLh6UvvsAlMIwWgDTAa/A==\",\r\n                    \"f3_processing_code\": \"000000\",\r\n                    \"f4_amount_transaction\": \"000000001100\",\r\n                    \"f6_amount_cardholder_billing\": \"000000025000\",\r\n                    \"f7_transmission_date_and_time\": \"0612174609\",\r\n                    \"f11_stan\": \"041299\",\r\n                    \"f12_time_local_transaction\": \"174610\",\r\n                    \"f13_date_local_transaction\": \"0612\",\r\n                    \"f14_date_expiration\": \"3006\",\r\n                    \"f18_merchant_type\": \"4111\",\r\n                    \"f19_acquiring_institution_country_code\": \"0076\",\r\n                    \"f22_pos_entry_mode\": \"0510\",\r\n                    \"f23_card_sequence_number\": \"0000\",\r\n                    \"f25_pos_condition_code\": \"00\",\r\n                    \"f28_amount_transaction_fee\": \"D00000000\",\r\n                    \"f32_acquiring_institution_id_code\": \"012345678901\",\r\n                    \"f34_electronic_ecommerce_data\": {\r\n                        \"sf01_authentication_data\": {},\r\n                        \"sf56_supplement_data\": {},\r\n                        \"sf03_additional_service_request_data\": {},\r\n                        \"sf04_additional_service_result_data\": {},\r\n                        \"sf02_acceptance_environment_data\": {},\r\n                        \"sf07_device_common_data\": {},\r\n                        \"sf06_device_platform_data\": {}\r\n                    },\r\n                    \"f37_retrieval_reference_number\": \"516317041299\",\r\n                    \"f41_card_acceptor_terminal_id\": \"TERMID01\",\r\n                    \"f42_card_acceptor_id_code\": \"CARD ACCEPTOR  \",\r\n                    \"f43_card_acceptor_location\": \"ACQUIRER NAME            CITY NAME    BR\",\r\n                    \"f44_additional_response_data\": \"    2   1               \",\r\n                    \"f48_additional_data_private\": {},\r\n                    \"f49_currency_code_transaction\": \"0986\",\r\n                    \"f51_currency_code_cardholder_billing\": \"0986\",\r\n                    \"f53_security_related_control_information\": \"2001010100000000\",\r\n                    \"f55_integrated_circuit_card\": {\r\n                        \"sf1_application_cryptogram\": \"*\",\r\n                        \"sf3_issuer_application_data\": \"06010A03A0B030\",\r\n                        \"sf4_unpredicable_number\": \"*\",\r\n                        \"sf5_terminal_verification_result\": \"8000010000\",\r\n                        \"sf6_transaction_date\": \"010101\",\r\n                        \"sf7_transaction_type\": \"00\",\r\n                        \"sf8_amount_authorized\": \"000000012300\",\r\n                        \"sf9_transaction_currency_code\": \"0840\",\r\n                        \"sf10_application_interchange_profile\": \"0000\",\r\n                        \"sf11_terminal_country_code\": \"0840\",\r\n                        \"sf13_terminal_capabilities\": \"02F800\",\r\n                        \"sf15_amount_other\": \"000000000000\",\r\n                        \"sf23_application_transaction_counter\": \"0002\"\r\n                    },\r\n                    \"f56_payment_account_reference_data\": {\r\n                        \"sf5601_account_data\": {},\r\n                        \"sf5602_contact_information\": {},\r\n                        \"sf5603_customer_identification_data\": {}\r\n                    },\r\n                    \"f60_additional_pos_data\": \"05000010\",\r\n                    \"f62_custom_payment_services\": {\r\n                        \"bitmap_fields\": [\r\n                            2\r\n                        ],\r\n                        \"sf2_transaction_identifier\": \"123456789012345\"\r\n                    },\r\n                    \"f63_private_use\": {\r\n                        \"bitmap_fields\": [\r\n                            1\r\n                        ],\r\n                        \"sf1_network_id\": \"0002\"\r\n                    },\r\n                    \"f104_transaction_description_transaction_specific_data\": {\r\n                        \"sf5d_installments_data\": {},\r\n                        \"sf69_payment_format\": {},\r\n                        \"sf67_national_payment_format\": {},\r\n                        \"sf5c_commercial_card_data\": {},\r\n                        \"sf56_payment_facilitator_data\": {},\r\n                        \"sf57_business_application_data\": {},\r\n                        \"sf5b_visa_assessment_data\": {},\r\n                        \"sf1a_fleet_line_item_detail_data\": {}\r\n                    },\r\n                    \"f117_national_use\": {\r\n                        \"usage_6_argentina_agro\": {}\r\n                    },\r\n                    \"f119_settlement_service_data\": {\r\n                        \"usage_5_argentina_domestic_data\": {}\r\n                    },\r\n                    \"f123_verification_data\": {\r\n                        \"token_data\": {},\r\n                        \"activation_verification_data\": {}\r\n                    },\r\n                    \"f125_supporting_information_data\": {\r\n                        \"token_device\": {},\r\n                        \"wallet_provider\": {},\r\n                        \"additional_original_data\": {},\r\n                        \"expanded_fleet_service\": {}\r\n                    },\r\n                    \"f126_visa_private_use_fields\": {},\r\n                    \"start\": 1749750370580766689,\r\n                    \"pin_validated\": true,\r\n                    \"pin_validated_by_pismo\": true\r\n                },\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{UrlJudge}}/transactions",
											"host": [
												"{{UrlJudge}}"
											],
											"path": [
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "1 - Autorização - DMC - Master",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const uuid = require('uuid');\r",
													"\r",
													"function delay(ms) {\r",
													"  return new Promise(resolve => setTimeout(resolve, ms));\r",
													"}\r",
													"\r",
													"const FLAGS = {\r",
													"  sendFirstNetworkEventEnabled: true,\r",
													"  sendClearingConfirmationEnabled: true,\r",
													"  getTransactionEnabled: true,\r",
													"  validateMambuEnabled: true,\r",
													"};\r",
													"\r",
													"const requestPayload = JSON.parse(pm.request.body.raw);\r",
													"console.log(requestPayload);\r",
													"\r",
													"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
													"const pan = pm.collectionVariables.get('pan');\r",
													"const debitProgramCard = pm.globals.get('debitProgramId');\r",
													"requestPayload.pan = pan;\r",
													"\r",
													"const type = pm.globals.get('transactionType');\r",
													"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
													"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
													"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
													"\r",
													"const getTransaction = new Function('params', judgeFunction);\r",
													"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
													"const validateMambu = new Function('params', validateMambuBody);\r",
													"\r",
													"const correlationId = uuid.v4().toString();\r",
													"\r",
													"const response = JSON.parse(pm.response.stream.toString());\r",
													"const statusCode = pm.response.status;\r",
													"\r",
													"console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
													"console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
													"console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
													"console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
													"console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
													"console.log(\"|=========================================================================================|\\n\");\r",
													"\r",
													"// Status que ignoramos para envio do clearing\r",
													"const IGNORED_STATUSES = [\r",
													"  \"DebitTransactionProcessedByProcessorWasReceived\",\r",
													"  \"TransactionHoldWasApproved\"\r",
													"];\r",
													"\r",
													"// Polling que aguarda status diferente dos ignorados\r",
													"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
													"  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
													"    try {\r",
													"      const transaction = await getTransaction(params);\r",
													"      const currentStatus = transaction?.status;\r",
													"      console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${currentStatus}`);\r",
													"\r",
													"      if (!IGNORED_STATUSES.includes(currentStatus)) {\r",
													"        return transaction;\r",
													"      }\r",
													"    } catch (error) {\r",
													"      console.warn(`Erro na tentativa ${attempt} de getTransaction:`, error);\r",
													"    }\r",
													"    await delay(intervalMs);\r",
													"  }\r",
													"  throw new Error(`Timeout: getTransaction continuou com status ignorados após ${maxAttempts} tentativas.`);\r",
													"}\r",
													"\r",
													"async function main() {\r",
													"  if (!(response.approve === true || statusCode === \"OK\")) {\r",
													"    console.log(\"Resposta não aprovada ou statusCode inesperado, abortando execução.\");\r",
													"    return;\r",
													"  }\r",
													"\r",
													"  try {\r",
													"    if (FLAGS.sendFirstNetworkEventEnabled) {\r",
													"      console.log(\"Executando request do Rabbit: enviando primeiro evento...\");\r",
													"      const firstEventResponse = await sendNetworkEvent({\r",
													"        pm,\r",
													"        correlationId,\r",
													"        destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
													"        messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
													"        mti: \"0100\",\r",
													"        conciliationType: \"DUAL_MESSAGE\",\r",
													"        authorizationCategory: authorizationCategory[1].description,\r",
													"        authorizationResponseCode: \"00\",\r",
													"        pan,\r",
													"        requestPayload,\r",
													"        exchangeName: \"pismo.authorization.events.judge.v2\",\r",
													"        caller: \"Mastercard\",\r",
													"        custom_response_code: \"\"\r",
													"      });\r",
													"      console.log(\"Resposta recebida:\", firstEventResponse);\r",
													"      await delay(15000);\r",
													"    }\r",
													"\r",
													"    let transactionData = null;\r",
													"    if (FLAGS.getTransactionEnabled) {\r",
													"      transactionData = await pollGetTransaction({\r",
													"        pm,\r",
													"        fields: requestPayload.fields,\r",
													"        correlationId\r",
													"      });\r",
													"\r",
													"      console.log(\"Resposta recebida GetTransaction(Judge):\", {\r",
													"        authorizationCode: transactionData.transactionIdentifier.authorizationCode,\r",
													"        nsu: transactionData.transactionIdentifier.nsu,\r",
													"        panHash: transactionData.card.panHashProcessor,\r",
													"        transactionId: transactionData.transactionId,\r",
													"        transactionFunction: transactionData.transactionFunction,\r",
													"        status: transactionData.status,\r",
													"        proxy: transactionData.card.proxy\r",
													"      });\r",
													"      await delay(100000);\r",
													"    }\r",
													"\r",
													"    // Só envia clearing se o status não for ignorado\r",
													"    if (FLAGS.sendClearingConfirmationEnabled && transactionData && !IGNORED_STATUSES.includes(transactionData.status)) {\r",
													"      // limpar campos conforme código original\r",
													"      requestPayload.fields.nsu = null;\r",
													"      requestPayload.fields.retrieval_reference_number = null;\r",
													"\r",
													"      console.log(\"Enviando clearing confirmation...\");\r",
													"      const clearingResponse = await sendNetworkEvent({\r",
													"        pm,\r",
													"        correlationId,\r",
													"        destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
													"        messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
													"        mti: \"1240\",\r",
													"        conciliationType: \"UNDEFINED\",\r",
													"        debitProgramCard,\r",
													"        authorizationCategory: authorizationCategory[3].description,\r",
													"        authorizationResponseCode: \"00\",\r",
													"        pan,\r",
													"        requestPayload,\r",
													"        exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
													"        caller: \"Mastercard\",\r",
													"        custom_response_code: \"\"\r",
													"      });\r",
													"      console.log(\"Resposta recebida clearing confirmation:\", clearingResponse);\r",
													"      \r",
													"      await delay(10000);\r",
													"    } else if (FLAGS.sendClearingConfirmationEnabled) {\r",
													"      console.log(`Pulando clearing confirmation. Status: ${transactionData ? transactionData.status : 'undefined'} está na lista de ignorados.`);\r",
													"    }\r",
													"\r",
													"    if (FLAGS.validateMambuEnabled && transactionData) {\r",
													"      const mambuResponse = await validateMambu({\r",
													"        pm,\r",
													"        proxy: transactionData.card.proxy,\r",
													"        authorizationId: transactionData.transactionId\r",
													"      });\r",
													"\r",
													"      if (mambuResponse) {\r",
													"        console.log(\"Resposta recebida Mambu:\", {\r",
													"          currencyCode: mambuResponse.currencyCode,\r",
													"          amount: mambuResponse.amount,\r",
													"          externalReferenceId: mambuResponse.externalReferenceId,\r",
													"          status: mambuResponse.status,\r",
													"          creditDebitIndicator: mambuResponse.creditDebitIndicator\r",
													"        });\r",
													"      }\r",
													"    }\r",
													"  } catch (error) {\r",
													"    console.error(\"Erro:\", error);\r",
													"  }\r",
													"}\r",
													"\r",
													"main();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//console.clear()",
													"",
													"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
													"// Converter strings de funções em funções executáveis",
													"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
													"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
													"const nsu = generateNsu(6);",
													"",
													"const authorizationCode = generateRandomString(5);",
													"pm.collectionVariables.set('authorizationCode', authorizationCode);",
													"pm.collectionVariables.set('nsuGlobal', nsu);",
													"const IntMaxValue = parseInt(\"2147483647\");",
													"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
													"pm.collectionVariables.set('authorizationId', authorizationId)",
													"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
													"const amount = _.random(1, 20);",
													"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
													"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
													"//pm.collectionVariables.set('randomAmount', 0);",
													"var uuid = require('uuid');",
													"pm.collectionVariables.set('randomId', uuid.v4());",
													"pm.collectionVariables.set('currency', '840'); // Real = 986; Dollar = 840",
													"pm.collectionVariables.set('contryCode', 'USA'); // Brasil = BRA; Luxemburgo = LUX",
													"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
													"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
													"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
													"pm.collectionVariables.set('mcc', '5311');",
													"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
													"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
													"pm.collectionVariables.set('walletId', '111');",
													"pm.collectionVariables.set('responseCode', '00');",
													"pm.collectionVariables.set('denialCode', '00');",
													"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
													"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
													"pm.collectionVariables.set('acquirerCode',728384008);",
													"pm.collectionVariables.set('accountIdDebit',45545454);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-correlation-id",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "x-pismo-sign",
												"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
												"type": "text"
											},
											{
												"key": "x-cid",
												"value": "testandoooo",
												"type": "text"
											},
											{
												"key": "bypass-validation",
												"value": "{{BypassValidationHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Mastercard\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{UrlJudge}}/transactions",
											"host": [
												"{{UrlJudge}}"
											],
											"path": [
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "debug criacao metodos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var uuid = require('uuid');\r",
													"    \r",
													"    console.log(\"1 - Before parsing request payload\");\r",
													"    const requestPayload = JSON.parse(pm.request.body.raw);\r",
													"    console.log(\"1 - Successfully parsed request payload\");\r",
													"    \r",
													"    console.log(\"2 - Before getting authorizationCategory\");\r",
													"    const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
													"    console.log(\"2 - Successfully got authorizationCategory\");\r",
													"    \r",
													"    const type = postman.getGlobalVariable('transactionType');\r",
													"    \r",
													"    console.log(\"3 - Before getting mambuUtils\");\r",
													"    const mambuUtils = JSON.parse(pm.collectionVariables.get(\"mambuUtils\"));\r",
													"    console.log(\"3 - Got mambuUtils\");\r",
													"    \r",
													"    console.log(\"4 - Before creating validateMambu function\");\r",
													"    const validateMambu = new Function('return ' + mambuUtils.ValidateIfTransactionDMCWasHoldOnMambu)();\r",
													"    console.log(\"4 - Successfully created validateMambu function\");\r",
													"    \r",
													"    console.log(\"5 - Getting judgeFunction\");\r",
													"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
													"\r",
													"console.log('--- RAW ---');\r",
													"console.log(judgeFunction);\r",
													"\r",
													"const cleaned = judgeFunction\r",
													"  .replace(/[\\r\\n]+/g, ' ')           // remove todos tipos de quebras de linha\r",
													"  .replace(/\\s+/g, ' ')               // reduz espaços múltiplos para 1\r",
													"  .trim();\r",
													"\r",
													"console.log('--- CLEANED ---');\r",
													"console.log(cleaned);\r",
													"\r",
													"\r",
													"    \r",
													"    const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
													"    const correlationId = uuid.v4().toString();\r",
													"    \r",
													"    // Restante do seu teste\r",
													"    pm.test(\"Request (0200) Nº\", function () {\r",
													"        pm.expect(true).to.be.true; // Teste simples para manter a estrutura\r",
													"    });\r",
													"    \r",
													"    const pan = pm.globals.get('pan');\r",
													"    var debitProgramCard = pm.globals.get('debitProgramId');\r",
													"    \r",
													"    console.log(\"6 - Before parsing response\");\r",
													"    const response = JSON.parse(pm.response.stream.toString());\r",
													"    console.log(\"6 - Successfully parsed response\");\r",
													"    \r",
													"    const statusCode = pm.response.status;\r",
													"    \r",
													"    console.log(\"7 - Creating sendNetworkEvent function\");\r",
													"    const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
													"    console.log(\"7 - Created sendNetworkEvent function\");\r",
													"    \r",
													"    console.log(\"8 - Creating getTransaction function\");\r",
													"const getTransaction = new Function('params', cleaned);\r",
													"\r",
													"getTransaction({ pm })\r",
													"  .then(console.log)\r",
													"  .catch(console.error);\r",
													"    console.log(\"5 - Got judgeFunction\");\r",
													"    console.log(\"8 - Created getTransaction function\");\r",
													"    \r",
													"    if(response.approve === true || statusCode === \"OK\") {\r",
													"        // Seu código existente com timeouts aqui\r",
													"    }\r",
													"} catch (error) {\r",
													"    console.error(\"ERROR DETAILS:\");\r",
													"    console.error(\"Message:\", error.message);\r",
													"    console.error(\"Stack trace:\", error.stack);\r",
													"    console.error(\"Occurred at line:\", error.lineNumber); // Nem sempre disponível\r",
													"    \r",
													"    // Verificar se é um erro de JSON parsing\r",
													"    if (error instanceof SyntaxError && error.message.includes(\"JSON\")) {\r",
													"        console.error(\"JSON Parse Error - Check the data being parsed\");\r",
													"    }\r",
													"    \r",
													"    throw error; // Re-throw para ver o erro no Postman\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//console.clear()",
													"",
													"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
													"// Converter strings de funções em funções executáveis",
													"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
													"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
													"const nsu = generateNsu(6);",
													"",
													"const authorizationCode = generateRandomString(5);",
													"pm.collectionVariables.set('authorizationCode', authorizationCode);",
													"pm.collectionVariables.set('nsuGlobal', nsu);",
													"const IntMaxValue = parseInt(\"2147483647\");",
													"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
													"pm.globals.set('authorizationId', authorizationId)",
													"pm.globals.set('timestampUtcIso8601', (new Date()).toISOString());",
													"const amount = _.random(1, 20);",
													"pm.globals.set('randomAmount', amount); // amount da transação",
													"pm.globals.set('replacementAmount', amount); // amount que será usado na reversão parcial",
													"//pm.globals.set('randomAmount', 0);",
													"var uuid = require('uuid');",
													"pm.globals.set('randomId', uuid.v4());",
													"pm.globals.set('currency', '986'); // Real = 986; Dollar = 840",
													"pm.globals.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
													"pm.globals.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
													"pm.globals.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
													"pm.globals.set('entryMode', '05'); // Consultar Costumer Interface Especification",
													"pm.globals.set('mcc', '5311');",
													"pm.globals.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
													"pm.globals.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
													"pm.globals.set('walletId', '111');",
													"pm.globals.set('responseCode', '00');",
													"pm.globals.set('denialCode', '00');",
													"pm.globals.set('eletronicSecurityLevel', '210');",
													"//pm.globals.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
													"pm.globals.set('acquirerCode',728384008);",
													"pm.globals.set('accountIdDebit',102509621);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-correlation-id",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "x-pismo-sign",
												"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
												"type": "text"
											},
											{
												"key": "x-cid",
												"value": "testandoooo",
												"type": "text"
											},
											{
												"key": "bypass-validation",
												"value": "{{BypassValidationHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{authorizationId}}\",\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": \"{{nsuGlobal}}\",\r\n        \"retrieval_reference_number\": \"{{nsuGlobal}}\",\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{UrlJudge}}/transactions",
											"host": [
												"{{UrlJudge}}"
											],
											"path": [
												"transactions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SingleMessage",
							"item": [
								{
									"name": "1 - Autorização (0200) - SM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"//const moment = require('moment');",
													"//pm.globals.set(\"timestamp\", moment().format(\"YYYY-MM-DDTHH:mm:ss\"));",
													"//console.log(pm.globals.get(\"postmanUtils\"))",
													"const helpers = JSON.parse(pm.globals.get(\"postmanUtils\"));",
													"",
													"// Converter strings de funções em funções executáveis",
													"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
													"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
													"",
													"",
													"// Gerar um número aleatório de 6 dígitos",
													"const nsu = generateNsu(6);",
													"",
													"const authorizationCode = generateRandomString(5);",
													"pm.collectionVariables.set('authorizationCode', authorizationCode);",
													"pm.collectionVariables.set('nsuGlobal', nsu);",
													"",
													"const IntMaxValue = parseInt(\"2147483647\");",
													"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
													"pm.globals.set('authorizationId', authorizationId)",
													"pm.globals.set('timestampUtcIso8601', (new Date()).toISOString());",
													"const amount = _.random(1, 20);",
													"pm.globals.set('randomAmount', amount); // amount da transação",
													"pm.globals.set('replacementAmount', amount); // amount que será usado na reversão parcial",
													"//pm.globals.set('randomAmount', 0);",
													"var uuid = require('uuid');",
													"pm.globals.set('randomId', uuid.v4());",
													"pm.globals.set('currency', '986'); // Real = 986; Dollar = 840",
													"pm.globals.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
													"pm.globals.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
													"pm.globals.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
													"pm.globals.set('entryMode', '05'); // Consultar Costumer Interface Especification",
													"pm.globals.set('mcc', '5311');",
													"pm.globals.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
													"pm.globals.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
													"pm.globals.set('walletId', '111');",
													"pm.globals.set('responseCode', '00');",
													"pm.globals.set('denialCode', '00');",
													"pm.globals.set('eletronicSecurityLevel', '210');",
													"//pm.globals.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
													"pm.globals.set('acquirerCode',728384008);",
													"pm.globals.set('accountIdDebit',102509621);",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Fixed the error by replacing 'console' with 'pm'\r",
													"const requestPayload = JSON.parse(pm.request.body.raw)\r",
													"// Recupera a função como string\r",
													"const mambuUtils = JSON.parse(pm.collectionVariables.get(\"mambuUtils\"));\r",
													"// Converter strings de funções em funções executáveis\r",
													"const validateMambu = new Function('return ' + mambuUtils.ValidateIfTransactionDMCWasHoldOnMambu)();\r",
													"const judgeFunction = JSON.parse(pm.collectionVariables.get('judgeUtils'));\r",
													"const getTransaction = new Function('return ' + judgeFunction.findAuthorizationTransaction)();\r",
													"\r",
													"\r",
													"pm.test(\"Request (0200) Nº\", function () {\r",
													"        console.log(requestPayload)\r",
													"\r",
													"    console.log(requestPayload.fields)\r",
													"    console.log(\"authorization_id: \" + pm.collectionVariables.get('authorizationId'))\r",
													"    console.log(\"Nsu: \" + pm.collectionVariables.get('nsuGlobal'))\r",
													"    console.log(\"AuthorizationCode: \" + pm.collectionVariables.get('authorizationCode'))\r",
													"    console.log(\"ProcessCardId: \" + pm.collectionVariables.get('processorCardId'))\r",
													"});\r",
													"const pan = pm.globals.get('pan');\r",
													"\r",
													"var uuid = require('uuid');\r",
													"const correlationId = uuid.v4().toString();\r",
													"\r",
													"const response = JSON.parse(pm.response.stream.toString())\r",
													"const statusCode = pm.response.status;\r",
													"\r",
													"if(response.approve === true || statusCode === \"OK\")\r",
													"{\r",
													"    setTimeout(() => {\r",
													"                    console.log(\"Executando código após a resposta com atraso...\");\r",
													"                    sendNetworkValidationWasProcessed()\r",
													"                }, 20000); // Espera de 5 segundos\r",
													"}\r",
													"\r",
													"\r",
													"function sendNetworkValidationWasProcessed()\r",
													"{\r",
													"// Atribuição direta dos valores do request para as variáveis\r",
													"\r",
													"    const authorizationId = requestPayload.id;\r",
													"    const randomAmount = requestPayload.fields.amount_transaction;\r",
													"    const cardId = requestPayload.fields.card_id;\r",
													"    const nsuGlobal = requestPayload.fields.nsu;\r",
													"    const authorizationCode = requestPayload.fields.authorization_code;\r",
													"    const merchantName = requestPayload.fields.merchant_name;\r",
													"    const contryCode = requestPayload.fields.merchant_state_or_country_code;\r",
													"    const currency = requestPayload.fields.currency;\r",
													"    const accountId = requestPayload.fields.account_id;\r",
													"    const acquirerCode = requestPayload.fields.acquirer_code;\r",
													"    const timestampUtcIso8601 = new Date().toISOString();\r",
													"\r",
													"// fim atribuição variaveis\r",
													"\r",
													"        const authorizationCategory = \"1\"; // 1 authorized - 4 - declined\r",
													"        const authorizationResponseCode = \"00\" // 00 aprove - 51 - denied\r",
													"        const customResponseCode = \"00\"\r",
													"        const credentials = pm.environment.get('rabbitCredentials');   \r",
													"        const networkAuthorizationEventId = uuid.v4(); // usado como: event_id, org_id, cid, unique_cid, correlationId\r",
													"        const networkAuthorizationEventDate = (new Date()).toISOString();\r",
													"        const customerId = pm.globals.get('customerId', 103194628);\r",
													"        const nsu =  nsuGlobal //989377\r",
													"       \r",
													"/****Modificar payload de acordo o necessario */\r",
													"        const basePayload = pm.collectionVariables.get(\"rabbitPayload\");\r",
													"\r",
													"        let networkEventBody = JSON.parse(basePayload);\r",
													"        networkEventBody.message.event_id = networkAuthorizationEventId.toString();\r",
													"        networkEventBody.message.timestamp = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.org_id = \"TN-\" + networkAuthorizationEventId.toString();\r",
													"        networkEventBody.message.cid = networkAuthorizationEventId.toString();\r",
													"\r",
													"        networkEventBody.message.data.authorization_category = authorizationCategory;\r",
													"        networkEventBody.message.data.org_id = \"TN-\" + networkAuthorizationEventId.toString();\r",
													"        networkEventBody.message.data.cid = networkAuthorizationEventId.toString();\r",
													"        networkEventBody.message.data.unique_cid = networkAuthorizationEventId.toString();\r",
													"\r",
													"        networkEventBody.message.data.event_date_hour = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.data.event_date_hour_utc = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.data.authorization_date_hour = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.data.original_authorization_date_hour = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.data.original_event_date_hour_utc = networkAuthorizationEventDate;\r",
													"\r",
													"        networkEventBody.message.data.account_id = accountId;\r",
													"        networkEventBody.message.data.card_id = cardId;\r",
													"        networkEventBody.message.data.authorization_id = authorizationId;\r",
													"        networkEventBody.message.data.customer_id = customerId;\r",
													"        networkEventBody.message.data.principal_amount = randomAmount;\r",
													"        networkEventBody.message.data.contract_amount = randomAmount;\r",
													"        networkEventBody.message.data.installment_amount = randomAmount;\r",
													"\r",
													"        networkEventBody.message.data.pan = pan;\r",
													"        networkEventBody.message.data.nsu = nsu;\r",
													"        networkEventBody.message.data.retrieval_reference_number = nsu;\r",
													"\r",
													"        networkEventBody.message.data.authorization_code = authorizationCode;\r",
													"        networkEventBody.message.data.authorization_response_code = authorizationResponseCode;\r",
													"\r",
													"        networkEventBody.message.data.local_currency_code = currency;\r",
													"        networkEventBody.message.data.cardholder_currency_code = currency;\r",
													"\r",
													"        networkEventBody.message.data.merchant_name = merchantName;\r",
													"        networkEventBody.message.data.acquirer_bin = acquirerCode;\r",
													"        networkEventBody.message.data.merchant_state_or_country = contryCode;\r",
													"        networkEventBody.message.Id = networkAuthorizationEventId.toString();\r",
													"        networkEventBody.correlationId = networkAuthorizationEventId.toString();\r",
													"        networkEventBody.event_id = networkAuthorizationEventId.toString();\r",
													"\r",
													"        networkEventBody.message.data.custom_response_code = customResponseCode;\r",
													"/*************************************************************** */\r",
													"\r",
													"    var requestBody = {\r",
													"            \"properties\": {\r",
													"                \"content-type\": \"application/vnd.masstransit+json\"\r",
													"            },\r",
													"            \"routing_key\": \"\",\r",
													"            \"payload\": JSON.stringify(networkEventBody),\r",
													"            \"payload_encoding\": \"string\"\r",
													"            }    \r",
													"            \r",
													"    var currentRabbitUrl = pm.environment.get('UrlRabbit');\r",
													"    console.log('currentUrl: ' + currentRabbitUrl)\r",
													"    \r",
													"    /*\r",
													"        console.log('env name: --------------------------')\r",
													"        console.log(pm.environment.name);\r",
													"        console.log('env name: --------------------------')*/\r",
													"\r",
													"    const url = currentRabbitUrl + '/api/exchanges/%2F/pismo.authorization.events.judge.v2/publish';\r",
													"    const envName = pm.environment.name;\r",
													"    const headers = {\r",
													"        'Content-Type': 'application/vnd.masstransit+json',\r",
													"        'Authorization': 'Basic Z3Vlc3Q6Z3Vlc3Q='\r",
													"    };\r",
													"\r",
													"    if (envName !== \"Local\") {\r",
													"        headers['Authorization'] = `Basic ${credentials}`;\r",
													"    }\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'POST',\r",
													"        header: headers,\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(requestBody)\r",
													"        }\r",
													"    }, (err, response) => {\r",
													"        if (err) {\r",
													"            console.log(\"Erro ao enviar a requisição:\", err);\r",
													"        } else {\r",
													"            console.log(\"Resposta recebida:\", response.stream.toString());\r",
													"            setTimeout(()=> {\r",
													"               getTransaction(pm, correlationId, requestPayload.fields.authorization_code, requestPayload.fields.nsu, requestPayload.fields.nsu)\r",
													"               \r",
													"               setTimeout(()=>\r",
													"               {\r",
													"                    console.log(\"init mambu request\")\r",
													"                    const transactionData = JSON.parse(pm.collectionVariables.get('lastProcessedTransactionData'));\r",
													"                    validateMambu(pm, true, transactionData.Card.Proxy, transactionData.Id)\r",
													"                     setTimeout(()=> {\r",
													"                        const mambuResponse = JSON.parse(pm.collectionVariables.get('lastMambuResponse'));\r",
													"                        console.log(\"mambu response\", mambuResponse)\r",
													"                    }, 2000)\r",
													"               }, 50000)\r",
													"            }, 30000)\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"/*function findAuthorizationTransaction(pm, authorizationCode, nsu, retrievalReferenceNumber)\r",
													"{\r",
													"\r",
													"    const envName = pm.environment.name;\r",
													"\r",
													"    const headers = {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-correlation-id': correlationId,\r",
													"        'x-cid': 'testandoooo',\r",
													"        'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA',\r",
													"        'x-pismo-sign': 'eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw',\r",
													"        'bypass-validation': '1099a7908cc3d60dd5de5cc2f5a1de5120d0eb5bace714f1dc7acd83f91d44d860b767b4f34e5aacf87ba44331e8aa377ab0ad9ec3c7ebd2f02e3c5925049ada',\r",
													"    };\r",
													"\r",
													"    if (envName !== \"Local\") {\r",
													"        headers['unlock-get-transaction'] = '1099a7908cc3d60dd5de5cc2f5a1de5120d0eb5bace714f1dc7acd83f91d44d860b767b4f34e5aacf87ba44331e8aa377ab0ad9ec3c7ebd2f02e3c5925049ada';\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        headers['unlock-get-transaction'] = 'eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTY3ODcxNjg0OSwiaWF0IjoxNjc4NzE2ODQ5fQ.YgDVfDTVlEP3VKSCMCsanMRnJupFr9fB_jeNTpnBQ74';\r",
													"    }\r",
													"\r",
													"    var urlJudge = `${pm.environment.get('UrlJudge')}/GetTransaction?authorizationCode=${authorizationCode}&nsu=${nsu}&retrievalReferenceNumber=${retrievalReferenceNumber}`\r",
													"    pm.sendRequest({\r",
													"        url: urlJudge,\r",
													"        method: 'GET',\r",
													"        header: headers,\r",
													"    }, (err, response) => {\r",
													"        if (err) {\r",
													"            console.log(\"Erro ao enviar a requisição:\", err);\r",
													"        } else {\r",
													"            if (response.code === 200) {\r",
													"                const responseData = JSON.parse(response.stream.toString());\r",
													"                return responseData\r",
													"            } else {\r",
													"                return \"erro ao enviar o request: \" + err.toString() \r",
													"            }\r",
													"        }\r",
													"    });\r",
													"\r",
													"}/*\r",
													"\r",
													"/*function ValidateIfTransactionDMCWasHoldOnMambu(aprovedOrReversedm,proxyCardNumber, authorizationId){\r",
													"    const mambuCredentials = btoa('svc_mambu_api_stg:B@ankacess!209JuTMambu016codesec')\r",
													"\r",
													"    const urlMambu = `${pm.environment.get('UrlApiMambu')}/api/cards/${proxyCardNumber}/authorizationholds/${authorizationId}`\r",
													"    const headers = {\r",
													"        'content-type': 'application/json',\r",
													"        'Authorization': `Basic ${mambuCredentials}`,\r",
													"        'accept': 'application/vnd.mambu.v2+json'\r",
													"    };\r",
													"    pm.sendRequest(\r",
													"        {\r",
													"            url: urlMambu,\r",
													"            method: 'GET',\r",
													"            header: headers,\r",
													"    }, (err, response) => {\r",
													"        if (err) {\r",
													"            console.log(\"Erro ao enviar a requisição:\", err);\r",
													"        } else {\r",
													"            console.log(\"Resposta recebida:\", response.stream.toString());\r",
													"        }\r",
													"    });\r",
													"}*/"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-correlation-id",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "x-pismo-sign",
												"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
												"type": "text"
											},
											{
												"key": "x-cid",
												"value": "testandoooo",
												"type": "text"
											},
											{
												"key": "bypass-validation",
												"value": "{{BypassValidationHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{authorizationId}}\",\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0200\",\r\n        \"card_expiration_date\": \"2031-01-31\",\r\n        \"card_id\": {{processorCardId}},\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"{{transactionType}}2000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": \"{{nsuGlobal}}\",\r\n        \"retrieval_reference_number\": \"{{nsuGlobal}}\",\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"{{brandName}}\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n        \"original_network_data\": {\r\n            \"de2_primary_account_number\": \"nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==\",\r\n            \"de3_processing_code\": {\r\n                \"sf1_cardholder_transaction_type_code\": \"00\",\r\n                \"sf2_cardholder_from_account_type_code\": \"20\",\r\n                \"sf3_cardholder_to_account_type_code\": \"00\"\r\n            },\r\n            \"de4_amount_transaction\": \"000000010012\",\r\n            \"de5_amount_settlement\": \"000000010012\",\r\n            \"de6_amount_cardholder_billing\": \"000000010012\",\r\n            \"de7_tranmission_date_and_time\": {\r\n                \"sf1_date\": \"0222\",\r\n                \"sf2_time\": \"160408\"\r\n            },\r\n            \"de9_conversion_rate_settlement\": {\r\n                \"sf1_decimal_indicator\": \"6\",\r\n                \"sf2_conversion_rate\": \"1000000\"\r\n            },\r\n            \"de10_conversion_rate_cardholder_billing\": {\r\n                \"sf1_decimal_indicator\": \"6\",\r\n                \"sf2_cardholderbilling_conversion_rate\": \"1000000\"\r\n            },\r\n            \"de11_stan\": \"000003\",\r\n            \"de12_time_local_transaction\": \"160408\",\r\n            \"de13_date_local_transaction\": \"0222\",\r\n            \"de14_date_expiration\": \"2702\",\r\n            \"de15_date_settlement\": \"0222\",\r\n            \"de16_date_conversion\": \"0222\",\r\n            \"de18_merchant_type\": \"5311\",\r\n            \"de22_pos_entry_mode\": {\r\n                \"sf1_pos_terminal_pan_entry_mode\": \"05\",\r\n                \"sf2_pos_terminal_pin_entry_mode\": \"1\"\r\n            },\r\n            \"de26_pos_pin_capture_code\": \"04\",\r\n            \"de28_amount_transaction_fee\": {},\r\n            \"de29_amount_settlement_fee\": {},\r\n            \"de30_amount_transaction_processing_fee\": {},\r\n            \"de31_amount_settlement_processing_fee\": {},\r\n            \"de32_acquiring_institution_id_code\": \"728384008\",\r\n            \"de33_forwarding_institution_id_code\": \"9000000283\",\r\n            \"de37_retrieval_reference_number\": {\r\n                \"sf1_transaction_date_and_initiator_discretionary_data\": \"3400001\",\r\n                \"sf2_terminal_transaction_number\": \"00005\"\r\n            },\r\n            \"de41_card_acceptor_terminal_id\": \"1234ABCD\",\r\n            \"de42_card_acceptor_id_code\": \"963852CARDACC  \",\r\n            \"de43_card_acceptor_name_location_for_all_transactions\": {\r\n                \"sf1_card_acceptor_name\": \"TESTE\",\r\n                \"sf3_card_acceptor_city\": \"TESTE         \",\r\n                \"sf5_card_acceptor_state_or_country_code\": \"LUX\"\r\n            },\r\n            \"de48_additional_data_private_user\": {\r\n                \"de48_tcc\": \"R\",\r\n                \"de48_start\": \"277\",\r\n                \"de48_size\": \"001\",\r\n                \"se11_key_exchange_block_data\": {},\r\n                \"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r\n                \"se15_authorization_system_advice_date_and_time\": {},\r\n                \"se18_service_parameters\": {},\r\n                \"se23_payment_initiation_channel\": {},\r\n                \"se25_mastercard_cash_program_data\": {},\r\n                \"se26_wallet_program_data\": {},\r\n                \"se33_pan_mapping_file_information\": {},\r\n                \"se34_atc_information\": {},\r\n                \"se36_visa_mmv\": {},\r\n                \"se37_additional_merchant_data\": {},\r\n                \"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r\n                \"se41_eletronic_commercer_certificate_qualifying_information\": {},\r\n                \"se42_eletronic_commerce_indicator\": {\r\n                    \"sf1_eletronic_commerce_security_level_indicator_ucaf_collection_indicator\": 210\r\n                },\r\n                \"se43_ucaf\": {\r\n                    \"sf1_ucaf\": \"Teste\"\r\n                },\r\n                \"se48_mobile_program_indicator\": {},\r\n                \"se49_time_validation_information\": {},\r\n                \"se51_merchant_on_behalf_services\": {},\r\n                \"se55_merchant_fraud_scoring_data\": {},\r\n                \"se57_security_services_additional_data_for_acquirers\": {},\r\n                \"se58_atm_additional_data\": {},\r\n                \"se61_pos_data_extended_condition_codes\": {},\r\n                \"se64_transit_program\": {},\r\n                \"se65_terminal_compliant_indicator\": {},\r\n                \"se66_authentication_data\": {\r\n                    \"sf1_program_protocol\": \"2\",\r\n                    \"sf2_directory_server_transaction_id\": \"{{authorization_id}}\"\r\n                },\r\n                \"se67_money_send_information\": {},\r\n                \"se71_onbehalf_services\": [\r\n                    {\r\n                        \"sf1_ob_service\": \"18\",\r\n                        \"sf2_onbehalf_result1\": \"C\",\r\n                        \"sf3_onbehalf_result2\": \" \"\r\n                    }\r\n                ],\r\n                \"se74_additional_processing_information\": {},\r\n                \"se75_fraud_scoring_data\": {\r\n                    \"sf1_fraud_score\": \"046\",\r\n                    \"sf2_score_reason_code\": \"54\",\r\n                    \"sf3_rules_score\": \"046\",\r\n                    \"sf4_rules_reason_code1\": \"54\",\r\n                    \"sf5_rules_reason_code2\": \"00\"\r\n                },\r\n                \"se78_payment_service_indicator\": {},\r\n                \"se79_chip_cvr_or_tvr_bit_error_results\": {},\r\n                \"se87_card_validation_code_result_or_cvv2\": \"M\",\r\n                \"se93_fleet_card_id_request_data\": {}\r\n            },\r\n            \"de49_currency_code_transaction\": \"840\",\r\n            \"de50_currency_code_settlement\": \"840\",\r\n            \"de51_currency_code_cardholder_billing\": \"840\",\r\n            \"de55_integrated_circuit_card\": {},\r\n            \"de60_advice_reason_code\": {},\r\n            \"de61_pos_data\": {\r\n                \"sf1_pos_terminal_attendance\": \"0\",\r\n                \"sf2_reserved_for_future_use\": \"0\",\r\n                \"sf3_pos_terminal_location\": \"0\",\r\n                \"sf4_pos_cardholder_presence\": \"0\",\r\n                \"sf5_pos_card_presence\": \"0\",\r\n                \"sf6_pos_card_capture_capabilities\": \"0\",\r\n                \"sf7_pos_transaction_status\": \"0\",\r\n                \"sf8_pos_transaction_security\": \"0\",\r\n                \"sf9_reserved_for_future_use\": \"0\",\r\n                \"sf10_cardholder_activated_terminal_level\": \"0\",\r\n                \"sf11_pos_card_data_terminal_input_capability_indicator\": \"0\",\r\n                \"sf12_pos_authorization_life_cycle\": \"00\",\r\n                \"sf13_pos_country_code_or_submerchant\": \"840\",\r\n                \"sf14_postal_code_or_submerchant\": \"6338500000\"\r\n            },\r\n            \"de63_network_data\": {\r\n                \"sf1_financial_network_code\": \"MC0\",\r\n                \"sf2_banknet_reference_number\": \"000030639\"\r\n            },\r\n            \"de90_original_data_elements\": {},\r\n            \"de94_service_indicator\": {},\r\n            \"de95_replacement_amounts\": {},\r\n            \"de97_amount_net_settlement\": {},\r\n            \"de112_additional_data_national_use\": {},\r\n            \"de120_record_data\": {},\r\n            \"de124_member_defined_data\": {},\r\n            \"start\": 1645545850625559600,\r\n            \"anti_fraud_url\": \"https://any-test.com\"\r\n        },\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{UrlJudge}}/transactions",
											"host": [
												"{{UrlJudge}}"
											],
											"path": [
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "1 - Autorização (0200) - SM Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"//const moment = require('moment');",
													"//pm.globals.set(\"timestamp\", moment().format(\"YYYY-MM-DDTHH:mm:ss\"));",
													"//console.log(pm.globals.get(\"postmanUtils\"))",
													"const helpers = JSON.parse(pm.globals.get(\"postmanUtils\"));",
													"",
													"// Converter strings de funções em funções executáveis",
													"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
													"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
													"",
													"",
													"// Gerar um número aleatório de 6 dígitos",
													"const nsu = generateNsu(6);",
													"",
													"const authorizationCode = generateRandomString(5);",
													"pm.globals.set('authorizationCode', authorizationCode);",
													"pm.globals.set('nsuGlobal', nsu);",
													"",
													"const IntMaxValue = parseInt(\"2147483647\");",
													"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
													"pm.globals.set('authorizationId', authorizationId)",
													"pm.globals.set('timestampUtcIso8601', (new Date()).toISOString());",
													"const amount = _.random(1, 20);",
													"pm.globals.set('randomAmount', amount); // amount da transação",
													"pm.globals.set('replacementAmount', amount); // amount que será usado na reversão parcial",
													"//pm.globals.set('randomAmount', 0);",
													"var uuid = require('uuid');",
													"pm.globals.set('randomId', uuid.v4());",
													"pm.globals.set('currency', '840'); // Real = 986; Dollar = 840",
													"pm.globals.set('contryCode', 'USA'); // Brasil = BRA; Luxemburgo = LUX",
													"pm.globals.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
													"pm.globals.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
													"pm.globals.set('entryMode', '05'); // Consultar Costumer Interface Especification",
													"pm.globals.set('mcc', '5311');",
													"pm.globals.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
													"pm.globals.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
													"pm.globals.set('walletId', '111');",
													"pm.globals.set('responseCode', '00');",
													"pm.globals.set('denialCode', '00');",
													"pm.globals.set('eletronicSecurityLevel', '210');",
													"//pm.globals.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
													"pm.globals.set('acquirerCode',728384008);",
													"pm.globals.set('accountIdDebit',102509621);",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Fixed the error by replacing 'console' with 'pm'\r",
													"const requestPayload = JSON.parse(pm.request.body.raw)\r",
													"// Recupera a função como string\r",
													"const mambuUtils = JSON.parse(pm.collectionVariables.get(\"mambuUtils\"));\r",
													"// Converter strings de funções em funções executáveis\r",
													"const validateMambu = new Function('return ' + mambuUtils.ValidateIfTransactionDMCWasHoldOnMambu)();\r",
													"const judgeFunction = JSON.parse(pm.collectionVariables.get('judgeUtils'));\r",
													"const getTransaction = new Function('return ' + judgeFunction.findAuthorizationTransaction)();\r",
													"\r",
													"\r",
													"pm.test(\"Request (0200) Nº\", function () {\r",
													"        console.log(requestPayload)\r",
													"\r",
													"    console.log(requestPayload.fields)\r",
													"    console.log(\"authorization_id: \" + pm.globals.get('authorizationId'))\r",
													"    console.log(\"Nsu: \" + pm.globals.get('nsuGlobal'))\r",
													"    console.log(\"AuthorizationCode: \" + pm.globals.get('authorizationCode'))\r",
													"    console.log(\"ProcessCardId: \" + pm.globals.get('processorCardId'))\r",
													"});\r",
													"const pan = pm.globals.get('pan');\r",
													"\r",
													"var uuid = require('uuid');\r",
													"const correlationId = uuid.v4().toString();\r",
													"\r",
													"const response = JSON.parse(pm.response.stream.toString())\r",
													"const statusCode = pm.response.status;\r",
													"\r",
													"if(response.approve === true || statusCode === \"OK\")\r",
													"{\r",
													"    setTimeout(() => {\r",
													"                    console.log(\"Executando código após a resposta com atraso...\");\r",
													"                    sendNetworkValidationWasProcessed()\r",
													"                }, 5000); // Espera de 5 segundos\r",
													"}\r",
													"\r",
													"\r",
													"function sendNetworkValidationWasProcessed()\r",
													"{\r",
													"// Atribuição direta dos valores do request para as variáveis\r",
													"\r",
													"    const authorizationId = requestPayload.id;\r",
													"    const randomAmount = requestPayload.fields.amount_transaction;\r",
													"    const cardId = requestPayload.fields.card_id;\r",
													"    const nsuGlobal = requestPayload.fields.nsu;\r",
													"    const authorizationCode = requestPayload.fields.authorization_code;\r",
													"    const merchantName = requestPayload.fields.merchant_name;\r",
													"    const contryCode = requestPayload.fields.merchant_state_or_country_code;\r",
													"    const currency = requestPayload.fields.currency;\r",
													"    const accountId = requestPayload.fields.account_id;\r",
													"    const acquirerCode = requestPayload.fields.acquirer_code;\r",
													"    const timestampUtcIso8601 = new Date().toISOString();\r",
													"\r",
													"// fim atribuição variaveis\r",
													"\r",
													"        const authorizationCategory = \"4\"; // 1 authorized - 4 - declined\r",
													"        const authorizationResponseCode = \"51\" // 00 aprove - 51 - denied\r",
													"        const customResponseCode = \"05\"\r",
													"        const credentials = pm.environment.get('rabbitCredentials');   \r",
													"        const networkAuthorizationEventId = uuid.v4(); // usado como: event_id, org_id, cid, unique_cid, correlationId\r",
													"        const networkAuthorizationEventDate = (new Date()).toISOString();\r",
													"        const customerId = pm.globals.get('customerId', 103194628);\r",
													"        const nsu =  nsuGlobal //989377\r",
													"       \r",
													"/****Modificar payload de acordo o necessario */\r",
													"        const basePayload = pm.collectionVariables.get(\"rabbitPayload\");\r",
													"\r",
													"        let networkEventBody = JSON.parse(basePayload);\r",
													"        networkEventBody.message.event_id = networkAuthorizationEventId.toString();\r",
													"        networkEventBody.message.timestamp = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.org_id = \"TN-\" + networkAuthorizationEventId.toString();\r",
													"        networkEventBody.message.cid = networkAuthorizationEventId.toString();\r",
													"\r",
													"        networkEventBody.message.data.authorization_category = authorizationCategory;\r",
													"        networkEventBody.message.data.org_id = \"TN-\" + networkAuthorizationEventId.toString();\r",
													"        networkEventBody.message.data.cid = networkAuthorizationEventId.toString();\r",
													"        networkEventBody.message.data.unique_cid = networkAuthorizationEventId.toString();\r",
													"\r",
													"        networkEventBody.message.data.event_date_hour = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.data.event_date_hour_utc = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.data.authorization_date_hour = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.data.original_authorization_date_hour = networkAuthorizationEventDate;\r",
													"        networkEventBody.message.data.original_event_date_hour_utc = networkAuthorizationEventDate;\r",
													"\r",
													"        networkEventBody.message.data.account_id = accountId;\r",
													"        networkEventBody.message.data.card_id = cardId;\r",
													"        networkEventBody.message.data.authorization_id = authorizationId;\r",
													"        networkEventBody.message.data.customer_id = customerId;\r",
													"        networkEventBody.message.data.principal_amount = randomAmount;\r",
													"        networkEventBody.message.data.contract_amount = randomAmount;\r",
													"        networkEventBody.message.data.installment_amount = randomAmount;\r",
													"\r",
													"        networkEventBody.message.data.pan = pan;\r",
													"        networkEventBody.message.data.nsu = nsu;\r",
													"        networkEventBody.message.data.retrieval_reference_number = nsu;\r",
													"\r",
													"        networkEventBody.message.data.authorization_code = authorizationCode;\r",
													"        networkEventBody.message.data.authorization_response_code = authorizationResponseCode;\r",
													"\r",
													"        networkEventBody.message.data.local_currency_code = currency;\r",
													"        networkEventBody.message.data.cardholder_currency_code = currency;\r",
													"\r",
													"        networkEventBody.message.data.merchant_name = merchantName;\r",
													"        networkEventBody.message.data.acquirer_bin = acquirerCode;\r",
													"        networkEventBody.message.data.merchant_state_or_country = contryCode;\r",
													"        networkEventBody.message.Id = networkAuthorizationEventId.toString();\r",
													"        networkEventBody.correlationId = networkAuthorizationEventId.toString();\r",
													"        networkEventBody.event_id = networkAuthorizationEventId.toString();\r",
													"\r",
													"        networkEventBody.message.data.custom_response_code = customResponseCode;\r",
													"/*************************************************************** */\r",
													"\r",
													"    var requestBody = {\r",
													"            \"properties\": {\r",
													"                \"content-type\": \"application/vnd.masstransit+json\"\r",
													"            },\r",
													"            \"routing_key\": \"\",\r",
													"            \"payload\": JSON.stringify(networkEventBody),\r",
													"            \"payload_encoding\": \"string\"\r",
													"            }    \r",
													"            \r",
													"    var currentRabbitUrl = pm.environment.get('UrlRabbit');\r",
													"    console.log('currentUrl: ' + currentRabbitUrl)\r",
													"    \r",
													"    /*\r",
													"        console.log('env name: --------------------------')\r",
													"        console.log(pm.environment.name);\r",
													"        console.log('env name: --------------------------')*/\r",
													"\r",
													"    const url = currentRabbitUrl + '/api/exchanges/%2F/pismo.authorization.events.judge.v2/publish';\r",
													"    const envName = pm.environment.name;\r",
													"    const headers = {\r",
													"        'Content-Type': 'application/vnd.masstransit+json',\r",
													"        'Authorization': 'Basic Z3Vlc3Q6Z3Vlc3Q='\r",
													"    };\r",
													"\r",
													"    if (envName !== \"Local\") {\r",
													"        headers['Authorization'] = `Basic ${credentials}`;\r",
													"    }\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'POST',\r",
													"        header: headers,\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(requestBody)\r",
													"        }\r",
													"    }, (err, response) => {\r",
													"        if (err) {\r",
													"            console.log(\"Erro ao enviar a requisição:\", err);\r",
													"        } else {\r",
													"            console.log(\"Resposta recebida:\", response.stream.toString());\r",
													"            setTimeout(()=> {\r",
													"               getTransaction(pm, correlationId, requestPayload.fields.authorization_code, requestPayload.fields.nsu, requestPayload.fields.nsu)\r",
													"               \r",
													"               setTimeout(()=>\r",
													"               {\r",
													"                    console.log(\"init mambu request\")\r",
													"                    const transactionData = JSON.parse(pm.collectionVariables.get('lastProcessedTransactionData'));\r",
													"                    validateMambu(pm, true, transactionData.Card.Proxy, transactionData.Id)\r",
													"                     setTimeout(()=> {\r",
													"                        const mambuResponse = JSON.parse(pm.collectionVariables.get('lastMambuResponse'));\r",
													"                        console.log(\"mambu response\", mambuResponse)\r",
													"                    }, 2000)\r",
													"               }, 50000)\r",
													"            }, 30000)\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"/*function findAuthorizationTransaction(pm, authorizationCode, nsu, retrievalReferenceNumber)\r",
													"{\r",
													"\r",
													"    const envName = pm.environment.name;\r",
													"\r",
													"    const headers = {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-correlation-id': correlationId,\r",
													"        'x-cid': 'testandoooo',\r",
													"        'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA',\r",
													"        'x-pismo-sign': 'eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw',\r",
													"        'bypass-validation': '1099a7908cc3d60dd5de5cc2f5a1de5120d0eb5bace714f1dc7acd83f91d44d860b767b4f34e5aacf87ba44331e8aa377ab0ad9ec3c7ebd2f02e3c5925049ada',\r",
													"    };\r",
													"\r",
													"    if (envName !== \"Local\") {\r",
													"        headers['unlock-get-transaction'] = '1099a7908cc3d60dd5de5cc2f5a1de5120d0eb5bace714f1dc7acd83f91d44d860b767b4f34e5aacf87ba44331e8aa377ab0ad9ec3c7ebd2f02e3c5925049ada';\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        headers['unlock-get-transaction'] = 'eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTY3ODcxNjg0OSwiaWF0IjoxNjc4NzE2ODQ5fQ.YgDVfDTVlEP3VKSCMCsanMRnJupFr9fB_jeNTpnBQ74';\r",
													"    }\r",
													"\r",
													"    var urlJudge = `${pm.environment.get('UrlJudge')}/GetTransaction?authorizationCode=${authorizationCode}&nsu=${nsu}&retrievalReferenceNumber=${retrievalReferenceNumber}`\r",
													"    pm.sendRequest({\r",
													"        url: urlJudge,\r",
													"        method: 'GET',\r",
													"        header: headers,\r",
													"    }, (err, response) => {\r",
													"        if (err) {\r",
													"            console.log(\"Erro ao enviar a requisição:\", err);\r",
													"        } else {\r",
													"            if (response.code === 200) {\r",
													"                const responseData = JSON.parse(response.stream.toString());\r",
													"                return responseData\r",
													"            } else {\r",
													"                return \"erro ao enviar o request: \" + err.toString() \r",
													"            }\r",
													"        }\r",
													"    });\r",
													"\r",
													"}/*\r",
													"\r",
													"/*function ValidateIfTransactionDMCWasHoldOnMambu(aprovedOrReversedm,proxyCardNumber, authorizationId){\r",
													"    const mambuCredentials = btoa('svc_mambu_api_stg:B@ankacess!209JuTMambu016codesec')\r",
													"\r",
													"    const urlMambu = `${pm.environment.get('UrlApiMambu')}/api/cards/${proxyCardNumber}/authorizationholds/${authorizationId}`\r",
													"    const headers = {\r",
													"        'content-type': 'application/json',\r",
													"        'Authorization': `Basic ${mambuCredentials}`,\r",
													"        'accept': 'application/vnd.mambu.v2+json'\r",
													"    };\r",
													"    pm.sendRequest(\r",
													"        {\r",
													"            url: urlMambu,\r",
													"            method: 'GET',\r",
													"            header: headers,\r",
													"    }, (err, response) => {\r",
													"        if (err) {\r",
													"            console.log(\"Erro ao enviar a requisição:\", err);\r",
													"        } else {\r",
													"            console.log(\"Resposta recebida:\", response.stream.toString());\r",
													"        }\r",
													"    });\r",
													"}*/"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-correlation-id",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "x-pismo-sign",
												"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
												"type": "text"
											},
											{
												"key": "x-cid",
												"value": "testandoooo",
												"type": "text"
											},
											{
												"key": "bypass-validation",
												"value": "{{BypassValidationHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{authorizationId}}\",\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0200\",\r\n        \"card_expiration_date\": \"2031-01-31\",\r\n        \"card_id\": 86378109,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"{{transactionType}}2000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": \"{{nsuGlobal}}\",\r\n        \"retrieval_reference_number\": \"{{nsuGlobal}}\",\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n       \"original_network_data\": {\r\n                    \"f2_primary_account_number\": \"1Tb9/xN9JYXjE9b9a9Gh4aRmbinYSzhoUyBRZwsrGmGGFGy5fcOAyMhBFeD5L6ZhIYLh6UvvsAlMIwWgDTAa/A==\",\r\n                    \"f3_processing_code\": \"000000\",\r\n                    \"f4_amount_transaction\": \"000000001100\",\r\n                    \"f6_amount_cardholder_billing\": \"000000025000\",\r\n                    \"f7_transmission_date_and_time\": \"0612174609\",\r\n                    \"f11_stan\": \"041299\",\r\n                    \"f12_time_local_transaction\": \"174610\",\r\n                    \"f13_date_local_transaction\": \"0612\",\r\n                    \"f14_date_expiration\": \"3006\",\r\n                    \"f18_merchant_type\": \"4111\",\r\n                    \"f19_acquiring_institution_country_code\": \"0076\",\r\n                    \"f22_pos_entry_mode\": \"0510\",\r\n                    \"f23_card_sequence_number\": \"0000\",\r\n                    \"f25_pos_condition_code\": \"00\",\r\n                    \"f28_amount_transaction_fee\": \"D00000000\",\r\n                    \"f32_acquiring_institution_id_code\": \"012345678901\",\r\n                    \"f34_electronic_ecommerce_data\": {\r\n                        \"sf01_authentication_data\": {},\r\n                        \"sf56_supplement_data\": {},\r\n                        \"sf03_additional_service_request_data\": {},\r\n                        \"sf04_additional_service_result_data\": {},\r\n                        \"sf02_acceptance_environment_data\": {},\r\n                        \"sf07_device_common_data\": {},\r\n                        \"sf06_device_platform_data\": {}\r\n                    },\r\n                    \"f37_retrieval_reference_number\": \"516317041299\",\r\n                    \"f41_card_acceptor_terminal_id\": \"TERMID01\",\r\n                    \"f42_card_acceptor_id_code\": \"CARD ACCEPTOR  \",\r\n                    \"f43_card_acceptor_location\": \"ACQUIRER NAME            CITY NAME    BR\",\r\n                    \"f44_additional_response_data\": \"    2   1               \",\r\n                    \"f48_additional_data_private\": {},\r\n                    \"f49_currency_code_transaction\": \"0986\",\r\n                    \"f51_currency_code_cardholder_billing\": \"0986\",\r\n                    \"f53_security_related_control_information\": \"2001010100000000\",\r\n                    \"f55_integrated_circuit_card\": {\r\n                        \"sf1_application_cryptogram\": \"*\",\r\n                        \"sf3_issuer_application_data\": \"06010A03A0B030\",\r\n                        \"sf4_unpredicable_number\": \"*\",\r\n                        \"sf5_terminal_verification_result\": \"8000010000\",\r\n                        \"sf6_transaction_date\": \"010101\",\r\n                        \"sf7_transaction_type\": \"00\",\r\n                        \"sf8_amount_authorized\": \"000000012300\",\r\n                        \"sf9_transaction_currency_code\": \"0840\",\r\n                        \"sf10_application_interchange_profile\": \"0000\",\r\n                        \"sf11_terminal_country_code\": \"0840\",\r\n                        \"sf13_terminal_capabilities\": \"02F800\",\r\n                        \"sf15_amount_other\": \"000000000000\",\r\n                        \"sf23_application_transaction_counter\": \"0002\"\r\n                    },\r\n                    \"f56_payment_account_reference_data\": {\r\n                        \"sf5601_account_data\": {},\r\n                        \"sf5602_contact_information\": {},\r\n                        \"sf5603_customer_identification_data\": {}\r\n                    },\r\n                    \"f60_additional_pos_data\": \"05000010\",\r\n                    \"f62_custom_payment_services\": {\r\n                        \"bitmap_fields\": [\r\n                            2\r\n                        ],\r\n                        \"sf2_transaction_identifier\": \"123456789012345\"\r\n                    },\r\n                    \"f63_private_use\": {\r\n                        \"bitmap_fields\": [\r\n                            1\r\n                        ],\r\n                        \"sf1_network_id\": \"0002\"\r\n                    },\r\n                    \"f104_transaction_description_transaction_specific_data\": {\r\n                        \"sf5d_installments_data\": {},\r\n                        \"sf69_payment_format\": {},\r\n                        \"sf67_national_payment_format\": {},\r\n                        \"sf5c_commercial_card_data\": {},\r\n                        \"sf56_payment_facilitator_data\": {},\r\n                        \"sf57_business_application_data\": {},\r\n                        \"sf5b_visa_assessment_data\": {},\r\n                        \"sf1a_fleet_line_item_detail_data\": {}\r\n                    },\r\n                    \"f117_national_use\": {\r\n                        \"usage_6_argentina_agro\": {}\r\n                    },\r\n                    \"f119_settlement_service_data\": {\r\n                        \"usage_5_argentina_domestic_data\": {}\r\n                    },\r\n                    \"f123_verification_data\": {\r\n                        \"token_data\": {},\r\n                        \"activation_verification_data\": {}\r\n                    },\r\n                    \"f125_supporting_information_data\": {\r\n                        \"token_device\": {},\r\n                        \"wallet_provider\": {},\r\n                        \"additional_original_data\": {},\r\n                        \"expanded_fleet_service\": {}\r\n                    },\r\n                    \"f126_visa_private_use_fields\": {},\r\n                    \"start\": 1749750370580766689,\r\n                    \"pin_validated\": true,\r\n                    \"pin_validated_by_pismo\": true\r\n                },\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{UrlJudge}}/transactions",
											"host": [
												"{{UrlJudge}}"
											],
											"path": [
												"transactions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Voucher",
							"item": [
								{
									"name": "DMC",
									"item": [
										{
											"name": "Cenarios",
											"item": [
												{
													"name": "Transação aprovada e reversão",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"\r",
																	"function delay(ms) {\r",
																	"  return new Promise(resolve => setTimeout(resolve, ms));\r",
																	"}\r",
																	"\r",
																	"const FLAGS = {\r",
																	"  sendInitialNetworkEventEnabled: true,\r",
																	"  sendJudgeTransactionEnabled: true,\r",
																	"  sendSecondNetworkEventEnabled: true,\r",
																	"  getTransactionEnabled: true,\r",
																	"  validateMambuEnabled: true,\r",
																	"};\r",
																	"\r",
																	"const IGNORED_STATUSES = [\r",
																	"  \"DebitTransactionProcessedByProcessorWasReceived\",\r",
																	"  \"TransactionHoldWasApproved\"\r",
																	"];\r",
																	"\r",
																	"const requestPayload = JSON.parse(pm.request.body.raw);\r",
																	"console.log(requestPayload);\r",
																	"\r",
																	"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
																	"const pan = pm.collectionVariables.get('pan');\r",
																	"const debitProgramCard = pm.globals.get('debitProgramId');\r",
																	"\r",
																	"const type = pm.globals.get('transactionType');\r",
																	"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
																	"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
																	"const judgeSendfunction = pm.collectionVariables.get('sendJudgeTransactionRequest');\r",
																	"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
																	"\r",
																	"const getTransaction = new Function('params', judgeFunction);\r",
																	"const sendJudgeTransactionRequest = new Function('params', judgeSendfunction);\r",
																	"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
																	"const validateMambu = new Function('params', validateMambuBody);\r",
																	"\r",
																	"const correlationId = uuid.v4().toString();\r",
																	"\r",
																	"const response = JSON.parse(pm.response.stream.toString());\r",
																	"const statusCode = pm.response.status;\r",
																	"\r",
																	"console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
																	"console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
																	"console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
																	"console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
																	"console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
																	"console.log(\"|=========================================================================================|\\n\");\r",
																	"\r",
																	"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
																	"  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
																	"    try {\r",
																	"      const transaction = await getTransaction(params);\r",
																	"      const status = transaction?.status;\r",
																	"      console.log(`Polling getTransaction: tentativa ${attempt}, status atual: ${status}`);\r",
																	"      if (!IGNORED_STATUSES.includes(status)) {\r",
																	"        return transaction;\r",
																	"      }\r",
																	"    } catch (error) {\r",
																	"      console.warn(`Erro na tentativa ${attempt} de getTransaction:`, error);\r",
																	"    }\r",
																	"    await delay(intervalMs);\r",
																	"  }\r",
																	"  throw new Error(`Timeout: status permaneceu em ignorados após ${maxAttempts} tentativas`);\r",
																	"}\r",
																	"\r",
																	"async function main() {\r",
																	"  if (!(response.approve === true || statusCode === \"OK\")) {\r",
																	"    console.log(\"Resposta não aprovada ou statusCode inesperado, abortando.\");\r",
																	"    return;\r",
																	"  }\r",
																	"\r",
																	"  try {\r",
																	"    let transactionData = null;\r",
																	"\r",
																	"    if (FLAGS.sendInitialNetworkEventEnabled) {\r",
																	"      console.log(\"Enviando evento inicial...\");\r",
																	"      const initialEventResp = await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        mti: \"0100\",\r",
																	"        conciliationType: \"DUAL_MESSAGE\",\r",
																	"        authorizationCategory: authorizationCategory[1].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\"\r",
																	"      });\r",
																	"      console.log(\"Resposta recebida:\", initialEventResp);\r",
																	"      await delay(15000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.sendJudgeTransactionEnabled) {\r",
																	"      let fields = requestPayload.fields;\r",
																	"      fields.mti = \"0420\";\r",
																	"      fields.original_network_data.de90_original_data_elements = {\r",
																	"        sf1_original_message_type_identifier: \"0200\",\r",
																	"        sf2_original_de11_systems_trace_audit_number: fields.nsu,\r",
																	"        sf3_original_de7_tranmission_date_and_time: \"0401163921\",\r",
																	"        sf4_original_de32_acquiring_institution_id_code: \"00998615073\",\r",
																	"        sf5_original_de33_forwarding_institution_id_code: \"09000001507\"\r",
																	"      };\r",
																	"      fields.original_network_data.de60_advice_reason_code = {\r",
																	"        de112Size: \"007\",\r",
																	"        de112Start: \"216\",\r",
																	"        sf1_advice_reason_code: \"453\",\r",
																	"        sf2_advice_detail_code: \"0041\"\r",
																	"      };\r",
																	"      requestPayload.fields = fields;\r",
																	"\r",
																	"      const judgeTransactionResp = await sendJudgeTransactionRequest({\r",
																	"        pm,\r",
																	"        requestBody: requestPayload,\r",
																	"        correlationId\r",
																	"      });\r",
																	"      console.log(`Resposta SendTransaction(Judge) MTI: ${fields.mti}`, judgeTransactionResp);\r",
																	"      await delay(10000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.sendSecondNetworkEventEnabled) {\r",
																	"      requestPayload.fields.processing_code = \"20010\";\r",
																	"\r",
																	"      const secondEventResp = await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
																	"        messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
																	"        mti: \"1240\",\r",
																	"        conciliationType: \"UNDEFINED\",\r",
																	"        debitProgramCard,\r",
																	"        authorizationCategory: authorizationCategory[3].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\"\r",
																	"      });\r",
																	"      console.log(\"Resposta recebida:\", secondEventResp);\r",
																	"      await delay(10000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.getTransactionEnabled) {\r",
																	"      transactionData = await pollGetTransaction({\r",
																	"        pm,\r",
																	"        fields: requestPayload.fields,\r",
																	"        correlationId\r",
																	"      });\r",
																	"      console.log(\"Resposta recebida GetTransaction(Judge):\", {\r",
																	"        authorizationCode: transactionData.transactionIdentifier.authorizationCode,\r",
																	"        nsu: transactionData.transactionIdentifier.nsu,\r",
																	"        panHash: transactionData.card.panHashProcessor,\r",
																	"        transactionId: transactionData.transactionId,\r",
																	"        transactionFunction: transactionData.transactionFunction,\r",
																	"        status: transactionData.status,\r",
																	"        proxy: transactionData.card.proxy\r",
																	"      });\r",
																	"      await delay(50000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.validateMambuEnabled && transactionData) {\r",
																	"      const mambuResp = await validateMambu({\r",
																	"        pm,\r",
																	"        proxy: transactionData.card.proxy,\r",
																	"        authorizationId: transactionData.transactionId\r",
																	"      });\r",
																	"      const mambuResult = {\r",
																	"        currencyCode: mambuResp.currencyCode,\r",
																	"        amount: mambuResp.amount,\r",
																	"        externalReferenceId: mambuResp.externalReferenceId,\r",
																	"        status: mambuResp.status,\r",
																	"        creditDebitIndicator: mambuResp.creditDebitIndicator\r",
																	"      };\r",
																	"      console.log(\"Resposta recebida Mambu:\", mambuResult);\r",
																	"    }\r",
																	"\r",
																	"  } catch (error) {\r",
																	"    console.error(\"Erro:\", error);\r",
																	"  }\r",
																	"}\r",
																	"\r",
																	"main();\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//console.clear()",
																	"",
																	"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
																	"// Converter strings de funções em funções executáveis",
																	"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
																	"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
																	"const nsu = generateNsu(6);",
																	"",
																	"const authorizationCode = generateRandomString(5);",
																	"pm.collectionVariables.set('authorizationCode', authorizationCode);",
																	"pm.collectionVariables.set('nsuGlobal', nsu);",
																	"const IntMaxValue = parseInt(\"2147483647\");",
																	"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
																	"pm.collectionVariables.set('authorizationId', authorizationId)",
																	"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
																	"const amount = _.random(1, 20);",
																	"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
																	"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
																	"//pm.collectionVariables.set('randomAmount', 0);",
																	"var uuid = require('uuid');",
																	"pm.collectionVariables.set('randomId', uuid.v4());",
																	"pm.collectionVariables.set('currency', '986'); // Real = 986; Dollar = 840",
																	"pm.collectionVariables.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
																	"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
																	"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
																	"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
																	"pm.collectionVariables.set('mcc', '5311');",
																	"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
																	"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
																	"pm.collectionVariables.set('walletId', '111');",
																	"pm.collectionVariables.set('responseCode', '00');",
																	"pm.collectionVariables.set('denialCode', '00');",
																	"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
																	"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
																	"pm.collectionVariables.set('acquirerCode',728384008);",
																	"pm.collectionVariables.set('accountIdDebit',45545454);",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-correlation-id",
																"value": "{{$guid}}",
																"type": "text"
															},
															{
																"key": "x-pismo-sign",
																"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
																"type": "text"
															},
															{
																"key": "x-cid",
																"value": "testandoooo",
																"type": "text"
															},
															{
																"key": "bypass-validation",
																"value": "{{BypassValidationHeader}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{UrlJudge}}/transactions",
															"host": [
																"{{UrlJudge}}"
															],
															"path": [
																"transactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Transação aprovada / Network Denied",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"\r",
																	"function delay(ms) {\r",
																	"  return new Promise(resolve => setTimeout(resolve, ms));\r",
																	"}\r",
																	"\r",
																	"const FLAGS = {\r",
																	"  sendInitialNetworkEventEnabled: true,\r",
																	"  sendJudgeTransactionEnabled: false,\r",
																	"  sendSecondNetworkEventEnabled: true,\r",
																	"  getTransactionEnabled: true,\r",
																	"  validateMambuEnabled: true,\r",
																	"};\r",
																	"\r",
																	"const IGNORED_STATUSES = [\r",
																	"  \"DebitTransactionProcessedByProcessorWasReceived\",\r",
																	"  \"TransactionHoldWasApproved\",\r",
																	"];\r",
																	"\r",
																	"const requestPayload = JSON.parse(pm.request.body.raw);\r",
																	"console.log(requestPayload);\r",
																	"\r",
																	"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
																	"const pan = pm.collectionVariables.get('pan');\r",
																	"const debitProgramCard = pm.globals.get('debitProgramId');\r",
																	"\r",
																	"const type = pm.globals.get('transactionType');\r",
																	"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
																	"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
																	"const judgeSendfunction = pm.collectionVariables.get('sendJudgeTransactionRequest');\r",
																	"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
																	"\r",
																	"const getTransaction = new Function('params', judgeFunction);\r",
																	"const sendJudgeTransactionRequest = new Function('params', judgeSendfunction);\r",
																	"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
																	"const validateMambu = new Function('params', validateMambuBody);\r",
																	"\r",
																	"const correlationId = uuid.v4().toString();\r",
																	"\r",
																	"const response = JSON.parse(pm.response.stream.toString());\r",
																	"const statusCode = pm.response.status;\r",
																	"\r",
																	"console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
																	"console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
																	"console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
																	"console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
																	"console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
																	"console.log(\"|=========================================================================================|\\n\");\r",
																	"\r",
																	"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
																	"  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
																	"    try {\r",
																	"      const transaction = await getTransaction(params);\r",
																	"      const status = transaction?.status;\r",
																	"      console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${status}`);\r",
																	"\r",
																	"      if (!IGNORED_STATUSES.includes(status)) {\r",
																	"        return transaction;\r",
																	"      }\r",
																	"    } catch (err) {\r",
																	"      console.warn(`Erro na tentativa ${attempt} de getTransaction:`, err);\r",
																	"    }\r",
																	"    await delay(intervalMs);\r",
																	"  }\r",
																	"  throw new Error(`Timeout: status da transação permaneceu em ignorados após ${maxAttempts} tentativas.`);\r",
																	"}\r",
																	"\r",
																	"async function main() {\r",
																	"  if (!(response.approve === true || statusCode === \"OK\")) {\r",
																	"    console.log(\"Resposta não aprovada ou statusCode inesperado, abortando execução.\");\r",
																	"    return;\r",
																	"  }\r",
																	"\r",
																	"  try {\r",
																	"    if (FLAGS.sendInitialNetworkEventEnabled) {\r",
																	"      console.log(\"Executando request do Rabbit: enviando evento inicial...\");\r",
																	"      const initialEventResponse = await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        mti: \"0100\",\r",
																	"        conciliationType: \"DUAL_MESSAGE\",\r",
																	"        authorizationCategory: authorizationCategory[1].description,\r",
																	"        authorizationResponseCode: \"12\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"ANF\"\r",
																	"      });\r",
																	"      console.log(\"Resposta recebida:\", initialEventResponse);\r",
																	"      await delay(15000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.sendJudgeTransactionEnabled) {\r",
																	"      let fields = requestPayload.fields;\r",
																	"      fields.mti = \"0420\";\r",
																	"      fields.original_network_data.de90_original_data_elements = {\r",
																	"        sf1_original_message_type_identifier: \"0200\",\r",
																	"        sf2_original_de11_systems_trace_audit_number: fields.nsu,\r",
																	"        sf3_original_de7_tranmission_date_and_time: \"0401163921\",\r",
																	"        sf4_original_de32_acquiring_institution_id_code: \"00998615073\",\r",
																	"        sf5_original_de33_forwarding_institution_id_code: \"09000001507\"\r",
																	"      };\r",
																	"      fields.original_network_data.de60_advice_reason_code = {\r",
																	"        de112Size: \"007\",\r",
																	"        de112Start: \"216\",\r",
																	"        sf1_advice_reason_code: \"453\",\r",
																	"        sf2_advice_detail_code: \"0041\"\r",
																	"      };\r",
																	"      requestPayload.fields = fields;\r",
																	"\r",
																	"      const judgeTransactionResp = await sendJudgeTransactionRequest({\r",
																	"        pm,\r",
																	"        requestBody: requestPayload,\r",
																	"        correlationId\r",
																	"      });\r",
																	"      console.log(`Resposta SendTransaction(Judge) MTI: ${fields.mti}`, judgeTransactionResp);\r",
																	"      await delay(15000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.sendSecondNetworkEventEnabled) {\r",
																	"      requestPayload.fields.processing_code = \"200101\";\r",
																	"\r",
																	"      const secondEventResp = await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
																	"        messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
																	"        mti: \"1240\",\r",
																	"        conciliationType: \"UNDEFINED\",\r",
																	"        debitProgramCard,\r",
																	"        authorizationCategory: authorizationCategory[3].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\"\r",
																	"      });\r",
																	"      console.log(\"Resposta recebida:\", secondEventResp);\r",
																	"      await delay(10000);\r",
																	"    }\r",
																	"\r",
																	"    let transactionData = null;\r",
																	"    if (FLAGS.getTransactionEnabled) {\r",
																	"      transactionData = await pollGetTransaction({\r",
																	"        pm,\r",
																	"        fields: requestPayload.fields,\r",
																	"        correlationId\r",
																	"      });\r",
																	"\r",
																	"      console.log(\"Resposta recebida GetTransaction(Judge):\", {\r",
																	"        authorizationCode: transactionData.transactionIdentifier.authorizationCode,\r",
																	"        nsu: transactionData.transactionIdentifier.nsu,\r",
																	"        panHash: transactionData.card.panHashProcessor,\r",
																	"        transactionId: transactionData.transactionId,\r",
																	"        transactionFunction: transactionData.transactionFunction,\r",
																	"        status: transactionData.status,\r",
																	"        proxy: transactionData.card.proxy\r",
																	"      });\r",
																	"      await delay(50000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.validateMambuEnabled && transactionData) {\r",
																	"      const mambuResponse = await validateMambu({\r",
																	"        pm,\r",
																	"        proxy: transactionData.card.proxy,\r",
																	"        authorizationId: transactionData.transactionId\r",
																	"      });\r",
																	"      const result = {\r",
																	"        currencyCode: mambuResponse.currencyCode,\r",
																	"        amount: mambuResponse.amount,\r",
																	"        externalReferenceId: mambuResponse.externalReferenceId,\r",
																	"        status: mambuResponse.status,\r",
																	"        creditDebitIndicator: mambuResponse.creditDebitIndicator\r",
																	"      };\r",
																	"      console.log(\"Resposta recebida Mambu:\", result);\r",
																	"    }\r",
																	"  } catch (error) {\r",
																	"    console.error(\"Erro:\", error);\r",
																	"  }\r",
																	"}\r",
																	"\r",
																	"main();\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//console.clear()",
																	"",
																	"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
																	"// Converter strings de funções em funções executáveis",
																	"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
																	"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
																	"const nsu = generateNsu(6);",
																	"",
																	"const authorizationCode = generateRandomString(5);",
																	"pm.collectionVariables.set('authorizationCode', authorizationCode);",
																	"pm.collectionVariables.set('nsuGlobal', nsu);",
																	"const IntMaxValue = parseInt(\"2147483647\");",
																	"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
																	"pm.collectionVariables.set('authorizationId', authorizationId)",
																	"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
																	"const amount = _.random(1, 20);",
																	"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
																	"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
																	"//pm.collectionVariables.set('randomAmount', 0);",
																	"var uuid = require('uuid');",
																	"pm.collectionVariables.set('randomId', uuid.v4());",
																	"pm.collectionVariables.set('currency', '986'); // Real = 986; Dollar = 840",
																	"pm.collectionVariables.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
																	"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
																	"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
																	"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
																	"pm.collectionVariables.set('mcc', '5311');",
																	"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
																	"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
																	"pm.collectionVariables.set('walletId', '111');",
																	"pm.collectionVariables.set('responseCode', '00');",
																	"pm.collectionVariables.set('denialCode', '00');",
																	"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
																	"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
																	"pm.collectionVariables.set('acquirerCode',728384008);",
																	"pm.collectionVariables.set('accountIdDebit',45545454);",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-correlation-id",
																"value": "{{$guid}}",
																"type": "text"
															},
															{
																"key": "x-pismo-sign",
																"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
																"type": "text"
															},
															{
																"key": "x-cid",
																"value": "testandoooo",
																"type": "text"
															},
															{
																"key": "bypass-validation",
																"value": "{{BypassValidationHeader}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{UrlJudge}}/transactions",
															"host": [
																"{{UrlJudge}}"
															],
															"path": [
																"transactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Transação aprovada / Network Aprovado / Voucher Sucesso",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"\r",
																	"function delay(ms) {\r",
																	"    return new Promise(resolve => setTimeout(resolve, ms));\r",
																	"}\r",
																	"\r",
																	"const FLAGS = {\r",
																	"    sendInitialNetworkEventEnabled: true,\r",
																	"    sendJudgeTransactionEnabled: true, // está comentado no original, mas incluído para ativação\r",
																	"    sendSecondNetworkEventEnabled: true,\r",
																	"    getTransactionEnabled: true,\r",
																	"    validateMambuEnabled: true,\r",
																	"};\r",
																	"\r",
																	"// Status ignorados durante o polling para continuar tentando\r",
																	"const IGNORED_STATUSES = [\r",
																	"    \"DebitTransactionProcessedByProcessorWasReceived\",\r",
																	"    \"TransactionHoldWasApproved\"\r",
																	"];\r",
																	"\r",
																	"const requestPayload = JSON.parse(pm.request.body.raw);\r",
																	"console.log(requestPayload);\r",
																	"\r",
																	"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
																	"const pan = pm.collectionVariables.get('pan');\r",
																	"const debitProgramCard = pm.globals.get('debitProgramId');\r",
																	"\r",
																	"const type = pm.globals.get('transactionType');\r",
																	"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
																	"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
																	"const judgeSendfunction = pm.collectionVariables.get('sendJudgeTransactionRequest');\r",
																	"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
																	"\r",
																	"const getTransaction = new Function('params', judgeFunction);\r",
																	"const sendJudgeTransactionRequest = new Function('params', judgeSendfunction);\r",
																	"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
																	"const validateMambu = new Function('params', validateMambuBody);\r",
																	"\r",
																	"const correlationId = uuid.v4().toString();\r",
																	"\r",
																	"const response = JSON.parse(pm.response.stream.toString());\r",
																	"const statusCode = pm.response.status;\r",
																	"\r",
																	"console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
																	"console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
																	"console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
																	"console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
																	"console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
																	"console.log(\"|=========================================================================================|\\n\");\r",
																	"\r",
																	"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
																	"    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
																	"        try {\r",
																	"            const transaction = await getTransaction(params);\r",
																	"            const status = transaction?.status;\r",
																	"            console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${status}`);\r",
																	"\r",
																	"            if (!IGNORED_STATUSES.includes(status)) {\r",
																	"                return transaction;\r",
																	"            }\r",
																	"        } catch (err) {\r",
																	"            console.warn(`Erro na tentativa ${attempt} de getTransaction:`, err);\r",
																	"        }\r",
																	"        await delay(intervalMs);\r",
																	"    }\r",
																	"    throw new Error(`Timeout: status da transação permaneceu em ignorados após ${maxAttempts} tentativas.`);\r",
																	"}\r",
																	"\r",
																	"async function main() {\r",
																	"    if (!(response.approve === true || statusCode === \"OK\")) {\r",
																	"        console.log(\"Resposta não aprovada ou statusCode inesperado, abortando execução.\");\r",
																	"        return;\r",
																	"    }\r",
																	"\r",
																	"    try {\r",
																	"        if (FLAGS.sendInitialNetworkEventEnabled) {\r",
																	"            console.log(\"Executando request do Rabbit: enviando evento inicial...\");\r",
																	"            const initialEventResponse = await sendNetworkEvent({\r",
																	"                pm,\r",
																	"                correlationId,\r",
																	"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"                messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"                mti: \"0100\",\r",
																	"                conciliationType: \"DUAL_MESSAGE\",\r",
																	"                authorizationCategory: authorizationCategory[1].description,\r",
																	"                authorizationResponseCode: \"00\",\r",
																	"                pan,\r",
																	"                requestPayload,\r",
																	"                exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"                caller: \"Mastercard\",\r",
																	"                custom_response_code: \"\"\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida:\", initialEventResponse);\r",
																	"            await delay(15000);\r",
																	"        }\r",
																	"\r",
																	"        if (FLAGS.sendJudgeTransactionEnabled) {\r",
																	"            let fields = requestPayload.fields;\r",
																	"            fields.mti = \"0420\";\r",
																	"            fields.original_network_data.de90_original_data_elements = {\r",
																	"                sf1_original_message_type_identifier: \"0200\",\r",
																	"                sf2_original_de11_systems_trace_audit_number: fields.nsu,\r",
																	"                sf3_original_de7_tranmission_date_and_time: \"0401163921\",\r",
																	"                sf4_original_de32_acquiring_institution_id_code: \"00998615073\",\r",
																	"                sf5_original_de33_forwarding_institution_id_code: \"09000001507\"\r",
																	"            };\r",
																	"            fields.original_network_data.de60_advice_reason_code = {\r",
																	"                de112Size: \"007\",\r",
																	"                de112Start: \"216\",\r",
																	"                sf1_advice_reason_code: \"453\",\r",
																	"                sf2_advice_detail_code: \"0041\"\r",
																	"            };\r",
																	"            requestPayload.fields = fields;\r",
																	"\r",
																	"            const judgeTransactionResp = await sendJudgeTransactionRequest({\r",
																	"                pm,\r",
																	"                requestBody: requestPayload,\r",
																	"                correlationId\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida SendTransaction(Judge) MTI :\" + fields.mti, judgeTransactionResp);\r",
																	"            await delay(20000);\r",
																	"        }\r",
																	"\r",
																	"        if (FLAGS.sendSecondNetworkEventEnabled) {\r",
																	"            requestPayload.fields.processing_code = \"200101\";\r",
																	"\r",
																	"            const secondEventResponse = await sendNetworkEvent({\r",
																	"                pm,\r",
																	"                correlationId,\r",
																	"                destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
																	"                messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
																	"                mti: \"1240\",\r",
																	"                conciliationType: \"UNDEFINED\",\r",
																	"                debitProgramCard,\r",
																	"                authorizationCategory: authorizationCategory[3].description,\r",
																	"                authorizationResponseCode: \"00\",\r",
																	"                pan,\r",
																	"                requestPayload,\r",
																	"                exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
																	"                caller: \"Mastercard\",\r",
																	"                custom_response_code: \"\"\r",
																	"            });\r",
																	"            console.log(\"Resposta recebida:\", secondEventResponse);\r",
																	"            await delay(15000);\r",
																	"        }\r",
																	"\r",
																	"        let transactionData = null;\r",
																	"        if (FLAGS.getTransactionEnabled) {\r",
																	"            transactionData = await pollGetTransaction({\r",
																	"                pm,\r",
																	"                fields: requestPayload.fields,\r",
																	"                correlationId\r",
																	"            });\r",
																	"\r",
																	"            console.log(\"Resposta recebida GetTransaction(Judge):\", {\r",
																	"                authorizationCode: transactionData.transactionIdentifier.authorizationCode,\r",
																	"                nsu: transactionData.transactionIdentifier.nsu,\r",
																	"                panHash: transactionData.card.panHashProcessor,\r",
																	"                transactionId: transactionData.transactionId,\r",
																	"                transactionFunction: transactionData.transactionFunction,\r",
																	"                status: transactionData.status,\r",
																	"                proxy: transactionData.card.proxy\r",
																	"            });\r",
																	"            await delay(50000);\r",
																	"        }\r",
																	"\r",
																	"        if (FLAGS.validateMambuEnabled && transactionData) {\r",
																	"            const mambuResponse = await validateMambu({\r",
																	"                pm,\r",
																	"                proxy: transactionData.card.proxy,\r",
																	"                authorizationId: transactionData.transactionId\r",
																	"            });\r",
																	"            const result = {\r",
																	"                currencyCode: mambuResponse.currencyCode,\r",
																	"                amount: mambuResponse.amount,\r",
																	"                externalReferenceId: mambuResponse.externalReferenceId,\r",
																	"                status: mambuResponse.status,\r",
																	"                creditDebitIndicator: mambuResponse.creditDebitIndicator,\r",
																	"            };\r",
																	"            console.log(\"Resposta recebida Mambu:\", result);\r",
																	"        }\r",
																	"        \r",
																	"    } catch (error) {\r",
																	"        console.error(\"Erro:\", error);\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"main();\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//console.clear()",
																	"",
																	"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
																	"// Converter strings de funções em funções executáveis",
																	"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
																	"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
																	"const nsu = generateNsu(6);",
																	"",
																	"const authorizationCode = generateRandomString(5);",
																	"pm.collectionVariables.set('authorizationCode', authorizationCode);",
																	"pm.collectionVariables.set('nsuGlobal', nsu);",
																	"const IntMaxValue = parseInt(\"2147483647\");",
																	"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
																	"pm.collectionVariables.set('authorizationId', authorizationId)",
																	"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
																	"const amount = _.random(1, 20);",
																	"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
																	"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
																	"//pm.collectionVariables.set('randomAmount', 0);",
																	"var uuid = require('uuid');",
																	"pm.collectionVariables.set('randomId', uuid.v4());",
																	"pm.collectionVariables.set('currency', '986'); // Real = 986; Dollar = 840",
																	"pm.collectionVariables.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
																	"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
																	"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
																	"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
																	"pm.collectionVariables.set('mcc', '5311');",
																	"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
																	"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
																	"pm.collectionVariables.set('walletId', '111');",
																	"pm.collectionVariables.set('responseCode', '00');",
																	"pm.collectionVariables.set('denialCode', '00');",
																	"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
																	"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
																	"pm.collectionVariables.set('acquirerCode',728384008);",
																	"pm.collectionVariables.set('accountIdDebit',45545454);",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-correlation-id",
																"value": "{{$guid}}",
																"type": "text"
															},
															{
																"key": "x-pismo-sign",
																"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
																"type": "text"
															},
															{
																"key": "x-cid",
																"value": "testandoooo",
																"type": "text"
															},
															{
																"key": "bypass-validation",
																"value": "{{BypassValidationHeader}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{UrlJudge}}/transactions",
															"host": [
																"{{UrlJudge}}"
															],
															"path": [
																"transactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Transação aprovada / Network Aprovado / Confirmation / Voucher",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"\r",
																	"function delay(ms) {\r",
																	"  return new Promise(resolve => setTimeout(resolve, ms));\r",
																	"}\r",
																	"\r",
																	"const FLAGS = {\r",
																	"  sendInitialNetworkEventEnabled: true,\r",
																	"  sendJudgeTransactionRequestEnabled: false,\r",
																	"  sendConfirmationNetworkEventEnabled: true,\r",
																	"  sendConfirmationNetworkEventWithVoucherEnabled: true,\r",
																	"  getTransactionEnabled: true,\r",
																	"  validateMambuEnabled: true,\r",
																	"};\r",
																	"\r",
																	"const IGNORED_STATUSES = [\r",
																	"  \"DebitTransactionProcessedByProcessorWasReceived\",\r",
																	"  \"TransactionHoldWasApproved\"\r",
																	"];\r",
																	"\r",
																	"const requestPayload = JSON.parse(pm.request.body.raw);\r",
																	"console.log(requestPayload);\r",
																	"\r",
																	"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
																	"const pan = pm.collectionVariables.get('pan');\r",
																	"const debitProgramCard = pm.globals.get('debitProgramId');\r",
																	"\r",
																	"const type = pm.globals.get('transactionType');\r",
																	"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
																	"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
																	"const judgeSendfunction = pm.collectionVariables.get('sendJudgeTransactionRequest');\r",
																	"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
																	"\r",
																	"const getTransaction = new Function('params', judgeFunction);\r",
																	"const sendJudgeTransactionRequest = new Function('params', judgeSendfunction);\r",
																	"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
																	"const validateMambu = new Function('params', validateMambuBody);\r",
																	"\r",
																	"const correlationId = uuid.v4().toString();\r",
																	"\r",
																	"const response = JSON.parse(pm.response.stream.toString());\r",
																	"const statusCode = pm.response.status;\r",
																	"\r",
																	"console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
																	"console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
																	"console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
																	"console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
																	"console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
																	"console.log(\"|=========================================================================================|\\n\");\r",
																	"\r",
																	"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
																	"  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
																	"    try {\r",
																	"      const transaction = await getTransaction(params);\r",
																	"      const status = transaction?.status;\r",
																	"      console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${status}`);\r",
																	"      if (!IGNORED_STATUSES.includes(status)) return transaction;\r",
																	"    } catch (err) {\r",
																	"      console.warn(`Erro na tentativa ${attempt} de getTransaction:`, err);\r",
																	"    }\r",
																	"    await delay(intervalMs);\r",
																	"  }\r",
																	"  throw new Error(`Timeout: status permaneceu em ignorados após ${maxAttempts} tentativas.`);\r",
																	"}\r",
																	"\r",
																	"async function main() {\r",
																	"  if (!(response.approve === true || statusCode === \"OK\")) {\r",
																	"    console.log(\"Resposta não aprovada ou statusCode inesperado, abortando execução.\");\r",
																	"    return;\r",
																	"  }\r",
																	"\r",
																	"  try {\r",
																	"    if (FLAGS.sendInitialNetworkEventEnabled) {\r",
																	"      console.log(\"Executando request do Rabbit: enviando evento inicial...\");\r",
																	"      const initialEventResp = await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
																	"        mti: \"0100\",\r",
																	"        conciliationType: \"DUAL_MESSAGE\",\r",
																	"        authorizationCategory: authorizationCategory[1].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"pismo.authorization.events.judge.v2\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\"\r",
																	"      });\r",
																	"      console.log(\"Resposta recebida:\", initialEventResp);\r",
																	"      await delay(15000);\r",
																	"    }\r",
																	"\r",
																	"    // O envio do sendJudgeTransactionRequest não estava sendo chamado no original, sinalizo flag para futura ativação.\r",
																	"\r",
																	"    if (FLAGS.sendConfirmationNetworkEventEnabled) {\r",
																	"      const confirmationEventResp = await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
																	"        messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
																	"        mti: \"1240\",\r",
																	"        conciliationType: \"UNDEFINED\",\r",
																	"        debitProgramCard,\r",
																	"        authorizationCategory: authorizationCategory[3].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\"\r",
																	"      });\r",
																	"      console.log(\"Resposta recebida:\", confirmationEventResp);\r",
																	"      await delay(15000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.sendConfirmationNetworkEventWithVoucherEnabled) {\r",
																	"      requestPayload.fields.processing_code = \"20\";\r",
																	"\r",
																	"      const voucherEventResp = await sendNetworkEvent({\r",
																	"        pm,\r",
																	"        correlationId,\r",
																	"        destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
																	"        messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
																	"        mti: \"1240\",\r",
																	"        conciliationType: \"UNDEFINED\",\r",
																	"        debitProgramCard,\r",
																	"        authorizationCategory: authorizationCategory[3].description,\r",
																	"        authorizationResponseCode: \"00\",\r",
																	"        pan,\r",
																	"        requestPayload,\r",
																	"        exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
																	"        caller: \"Mastercard\",\r",
																	"        custom_response_code: \"\"\r",
																	"      });\r",
																	"      console.log(\"Resposta recebida: Voucher\", voucherEventResp);\r",
																	"      await delay(10000);\r",
																	"    }\r",
																	"\r",
																	"    let transactionData = null;\r",
																	"    if (FLAGS.getTransactionEnabled) {\r",
																	"      transactionData = await pollGetTransaction({\r",
																	"        pm,\r",
																	"        fields: requestPayload.fields,\r",
																	"        correlationId\r",
																	"      });\r",
																	"\r",
																	"      console.log(\"Resposta recebida GetTransaction(Judge):\", {\r",
																	"        authorizationCode: transactionData.transactionIdentifier.authorizationCode,\r",
																	"        nsu: transactionData.transactionIdentifier.nsu,\r",
																	"        panHash: transactionData.card.panHashProcessor,\r",
																	"        transactionId: transactionData.transactionId,\r",
																	"        transactionFunction: transactionData.transactionFunction,\r",
																	"        status: transactionData.status,\r",
																	"        proxy: transactionData.card.proxy\r",
																	"      });\r",
																	"      await delay(100000);\r",
																	"    }\r",
																	"\r",
																	"    if (FLAGS.validateMambuEnabled && transactionData) {\r",
																	"      const mambuResp = await validateMambu({\r",
																	"        pm,\r",
																	"        proxy: transactionData.card.proxy,\r",
																	"        authorizationId: transactionData.transactionId\r",
																	"      });\r",
																	"      const mambuResult = {\r",
																	"        currencyCode: mambuResp.currencyCode,\r",
																	"        amount: mambuResp.amount,\r",
																	"        externalReferenceId: mambuResp.externalReferenceId,\r",
																	"        status: mambuResp.status,\r",
																	"        creditDebitIndicator: mambuResp.creditDebitIndicator\r",
																	"      };\r",
																	"      console.log(\"Resposta recebida Mambu:\", mambuResult);\r",
																	"    }\r",
																	"\r",
																	"  } catch (error) {\r",
																	"    console.error(\"Erro:\", error);\r",
																	"  }\r",
																	"}\r",
																	"\r",
																	"main();\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//console.clear()",
																	"",
																	"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
																	"// Converter strings de funções em funções executáveis",
																	"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
																	"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
																	"const nsu = generateNsu(6);",
																	"",
																	"const authorizationCode = generateRandomString(5);",
																	"pm.collectionVariables.set('authorizationCode', authorizationCode);",
																	"pm.collectionVariables.set('nsuGlobal', nsu);",
																	"const IntMaxValue = parseInt(\"2147483647\");",
																	"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
																	"pm.collectionVariables.set('authorizationId', authorizationId)",
																	"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
																	"const amount = _.random(1, 20);",
																	"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
																	"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
																	"//pm.collectionVariables.set('randomAmount', 0);",
																	"var uuid = require('uuid');",
																	"pm.collectionVariables.set('randomId', uuid.v4());",
																	"pm.collectionVariables.set('currency', '840'); // Real = 986; Dollar = 840",
																	"pm.collectionVariables.set('contryCode', 'USA'); // Brasil = BRA; Luxemburgo = LUX",
																	"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
																	"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
																	"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
																	"pm.collectionVariables.set('mcc', '5311');",
																	"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
																	"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
																	"pm.collectionVariables.set('walletId', '111');",
																	"pm.collectionVariables.set('responseCode', '00');",
																	"pm.collectionVariables.set('denialCode', '00');",
																	"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
																	"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
																	"pm.collectionVariables.set('acquirerCode',728384008);",
																	"pm.collectionVariables.set('accountIdDebit',45545454);",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-correlation-id",
																"value": "{{$guid}}",
																"type": "text"
															},
															{
																"key": "x-pismo-sign",
																"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
																"type": "text"
															},
															{
																"key": "x-cid",
																"value": "testandoooo",
																"type": "text"
															},
															{
																"key": "bypass-validation",
																"value": "{{BypassValidationHeader}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{UrlJudge}}/transactions",
															"host": [
																"{{UrlJudge}}"
															],
															"path": [
																"transactions"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1 - Voucher - DMC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const uuid = require('uuid');\r",
															"\r",
															"function delay(ms) {\r",
															"  return new Promise(resolve => setTimeout(resolve, ms));\r",
															"}\r",
															"\r",
															"const FLAGS = {\r",
															"  sendFirstNetworkEventEnabled: true,\r",
															"  sendClearingConfirmationEnabled: true,\r",
															"  getTransactionEnabled: true,\r",
															"  validateMambuEnabled: true,\r",
															"};\r",
															"\r",
															"// Status que fazem o clearing ser ignorado (polling para pegar status diferente disso)\r",
															"const IGNORED_STATUSES = [\r",
															"  'DebitTransactionProcessedByProcessorWasReceived',\r",
															"  'TransactionHoldWasApproved'\r",
															"];\r",
															"\r",
															"const requestPayload = JSON.parse(pm.request.body.raw);\r",
															"console.log(requestPayload);\r",
															"\r",
															"const authorizationCategory = JSON.parse(pm.collectionVariables.get('authorizationCategory'));\r",
															"const pan = pm.collectionVariables.get('pan');\r",
															"const debitProgramCard = pm.globals.get('debitProgramId');\r",
															"\r",
															"const type = pm.globals.get('transactionType');\r",
															"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
															"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
															"const sendNetworkEventBody = pm.collectionVariables.get('sendNetworkEvent');\r",
															"\r",
															"const getTransaction = new Function('params', judgeFunction);\r",
															"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
															"const validateMambu = new Function('params', validateMambuBody);\r",
															"\r",
															"const correlationId = uuid.v4().toString();\r",
															"\r",
															"const response = JSON.parse(pm.response.stream.toString());\r",
															"const statusCode = pm.response.status;\r",
															"\r",
															"console.log('\\n|==================== DADOS REQUEST =====================================================|');\r",
															"console.log('| authorization_id:     ', pm.collectionVariables.get('authorizationId'));\r",
															"console.log('| Nsu:                  ', requestPayload.fields.nsu);\r",
															"console.log('| AuthorizationCode:    ', requestPayload.fields.authorization_code);\r",
															"console.log('| ProcessCardId:        ', requestPayload.fields.card_id);\r",
															"console.log('|=========================================================================================|\\n');\r",
															"\r",
															"// Polling que espera status diferente do ignorado para continuar\r",
															"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
															"  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
															"    try {\r",
															"      const transaction = await getTransaction(params);\r",
															"      const currentStatus = transaction?.status;\r",
															"      console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${currentStatus}`);\r",
															"\r",
															"      if (!IGNORED_STATUSES.includes(currentStatus)) {\r",
															"        return transaction;\r",
															"      }\r",
															"    } catch (error) {\r",
															"      console.warn(`Erro na tentativa ${attempt} de getTransaction:`, error);\r",
															"    }\r",
															"    await delay(intervalMs);\r",
															"  }\r",
															"  throw new Error(`Timeout: status da transação permaneceu nos ignorados após ${maxAttempts} tentativas.`);\r",
															"}\r",
															"\r",
															"async function main() {\r",
															"  if (!(response.approve === true || statusCode === 'OK')) {\r",
															"    console.log('Resposta não aprovada ou statusCode inesperado, abortando execução.');\r",
															"    return;\r",
															"  }\r",
															"\r",
															"  try {\r",
															"    if (FLAGS.sendFirstNetworkEventEnabled) {\r",
															"      console.log('Executando request do Rabbit: enviando primeiro evento...');\r",
															"      const firstEventResponse = await sendNetworkEvent({\r",
															"        pm,\r",
															"        correlationId,\r",
															"        destinationAddress:\r",
															"          'rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent',\r",
															"        messageNamespace:\r",
															"          'Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent',\r",
															"        mti: '0100',\r",
															"        conciliationType: 'DUAL_MESSAGE',\r",
															"        authorizationCategory: authorizationCategory[1].description,\r",
															"        authorizationResponseCode: '00',\r",
															"        pan,\r",
															"        requestPayload,\r",
															"        exchangeName: 'pismo.authorization.events.judge.v2',\r",
															"        caller: 'Mastercard',\r",
															"        custom_response_code: ''\r",
															"      });\r",
															"      console.log('Resposta recebida:', firstEventResponse);\r",
															"\r",
															"      await delay(15000);\r",
															"    }\r",
															"\r",
															"    if (FLAGS.sendClearingConfirmationEnabled) {\r",
															"      // Polling para aguardar status não ignorado antes de clearing\r",
															"      const transactionData = await pollGetTransaction({\r",
															"        pm,\r",
															"        fields: requestPayload.fields,\r",
															"        correlationId\r",
															"      });\r",
															"\r",
															"      // Se status válido envia clearing\r",
															"      if (transactionData && !IGNORED_STATUSES.includes(transactionData.status)) {\r",
															"        // limpando campos conforme original\r",
															"        requestPayload.fields.nsu = null;\r",
															"        requestPayload.fields.retrieval_reference_number = null;\r",
															"        requestPayload.fields.processing_code = \"20\"\r",
															"\r",
															"        console.log('Enviando clearing confirmation...');\r",
															"        const clearingResponse = await sendNetworkEvent({\r",
															"          pm,\r",
															"          correlationId,\r",
															"          destinationAddress:\r",
															"            'rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events',\r",
															"          messageNamespace:\r",
															"            'Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent',\r",
															"          mti: '1240',\r",
															"          conciliationType: 'UNDEFINED',\r",
															"          debitProgramCard,\r",
															"          authorizationCategory: authorizationCategory[3].description,\r",
															"          authorizationResponseCode: '00',\r",
															"          pan,\r",
															"          requestPayload,\r",
															"          exchangeName: 'authorizer.clearing.operational.confirmation.network.authorization.events',\r",
															"          caller: 'Mastercard',\r",
															"          custom_response_code: ''\r",
															"        });\r",
															"        console.log('Resposta recebida clearing confirmation:', clearingResponse);\r",
															"\r",
															"        await delay(10000);\r",
															"      } else {\r",
															"        console.log(\r",
															"          `Pulando clearing confirmation: status \"${\r",
															"            transactionData ? transactionData.status : 'indefinido'\r",
															"          }\" está na lista de ignorados.`\r",
															"        );\r",
															"      }\r",
															"\r",
															"      // Continuar com getTransaction para dados finais e validar Mambu\r",
															"      if (FLAGS.getTransactionEnabled) {\r",
															"        const transactionFinal = await getTransaction({\r",
															"          pm,\r",
															"          fields: requestPayload.fields,\r",
															"          correlationId\r",
															"        });\r",
															"\r",
															"        console.log('Resposta recebida GetTransaction(Judge):', {\r",
															"          authorizationCode: transactionFinal.transactionIdentifier.authorizationCode,\r",
															"          nsu: transactionFinal.transactionIdentifier.nsu,\r",
															"          panHash: transactionFinal.card.panHashProcessor,\r",
															"          transactionId: transactionFinal.transactionId,\r",
															"          transactionFunction: transactionFinal.transactionFunction,\r",
															"          status: transactionFinal.status,\r",
															"          proxy: transactionFinal.card.proxy\r",
															"        });\r",
															"\r",
															"        await delay(100000);\r",
															"\r",
															"        if (FLAGS.validateMambuEnabled) {\r",
															"          try {\r",
															"            const mambuResponse = await validateMambu({\r",
															"              pm,\r",
															"              proxy: transactionFinal.card.proxy,\r",
															"              authorizationId: transactionFinal.transactionId\r",
															"            });\r",
															"            if (mambuResponse) {\r",
															"              console.log('Resposta recebida Mambu:', {\r",
															"                currencyCode: mambuResponse.currencyCode,\r",
															"                amount: mambuResponse.amount,\r",
															"                externalReferenceId: mambuResponse.externalReferenceId,\r",
															"                status: mambuResponse.status,\r",
															"                creditDebitIndicator: mambuResponse.creditDebitIndicator\r",
															"              });\r",
															"            }\r",
															"          } catch (err) {\r",
															"            console.error('Erro na validação Mambu:', err);\r",
															"          }\r",
															"        }\r",
															"      }\r",
															"    }\r",
															"  } catch (error) {\r",
															"    console.error('Erro no fluxo principal:', error);\r",
															"  }\r",
															"}\r",
															"\r",
															"main();\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//console.clear()",
															"",
															"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
															"// Converter strings de funções em funções executáveis",
															"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
															"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
															"const nsu = generateNsu(6);",
															"",
															"const authorizationCode = generateRandomString(5);",
															"pm.collectionVariables.set('authorizationCode', authorizationCode);",
															"pm.collectionVariables.set('nsuGlobal', nsu);",
															"const IntMaxValue = parseInt(\"2147483647\");",
															"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
															"pm.collectionVariables.set('authorizationId', authorizationId)",
															"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
															"const amount = _.random(1, 20);",
															"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
															"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
															"//pm.collectionVariables.set('randomAmount', 0);",
															"var uuid = require('uuid');",
															"pm.collectionVariables.set('randomId', uuid.v4());",
															"pm.collectionVariables.set('currency', '986'); // Real = 986; Dollar = 840",
															"pm.collectionVariables.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
															"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
															"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
															"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
															"pm.collectionVariables.set('mcc', '5311');",
															"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
															"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
															"pm.collectionVariables.set('walletId', '111');",
															"pm.collectionVariables.set('responseCode', '00');",
															"pm.collectionVariables.set('denialCode', '00');",
															"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
															"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
															"pm.collectionVariables.set('acquirerCode',728384008);",
															"pm.collectionVariables.set('accountIdDebit',45545454);",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-correlation-id",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "x-pismo-sign",
														"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
														"type": "text"
													},
													{
														"key": "x-cid",
														"value": "testandoooo",
														"type": "text"
													},
													{
														"key": "bypass-validation",
														"value": "{{BypassValidationHeader}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{UrlJudge}}/transactions",
													"host": [
														"{{UrlJudge}}"
													],
													"path": [
														"transactions"
													]
												}
											},
											"response": []
										},
										{
											"name": "1 - Reversão - DMC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const uuid = require('uuid');\r",
															"\r",
															"function delay(ms) {\r",
															"    return new Promise(resolve => setTimeout(resolve, ms));\r",
															"}\r",
															"\r",
															"const FLAGS = {\r",
															"    sendInitialNetworkEventEnabled: true,\r",
															"    sendJudgeTransactionEnabled: true,\r",
															"    sendSecondNetworkEventEnabled: true,\r",
															"    getTransactionEnabled: true,\r",
															"    validateMambuEnabled: true,\r",
															"};\r",
															"\r",
															"// Status que devem ser ignorados no polling\r",
															"const IGNORED_STATUSES = [\r",
															"    \"DebitTransactionProcessedByProcessorWasReceived\",\r",
															"    \"TransactionHoldWasApproved\"\r",
															"];\r",
															"\r",
															"const requestPayload = JSON.parse(pm.request.body.raw);\r",
															"console.log(requestPayload);\r",
															"\r",
															"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
															"const pan = pm.collectionVariables.get('pan');\r",
															"const debitProgramCard = pm.globals.get('debitProgramId');\r",
															"\r",
															"const type = pm.globals.get('transactionType');\r",
															"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
															"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
															"const judgeSendfunction = pm.collectionVariables.get('sendJudgeTransactionRequest');\r",
															"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
															"\r",
															"const getTransaction = new Function('params', judgeFunction);\r",
															"const sendJudgeTransactionRequest = new Function('params', judgeSendfunction);\r",
															"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
															"const validateMambu = new Function('params', validateMambuBody);\r",
															"\r",
															"const correlationId = uuid.v4().toString();\r",
															"\r",
															"const response = JSON.parse(pm.response.stream.toString());\r",
															"const statusCode = pm.response.status;\r",
															"\r",
															"console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
															"console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
															"console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
															"console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
															"console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
															"console.log(\"|=========================================================================================|\\n\");\r",
															"\r",
															"// Função polling para aguardar getTransaction status não estar nos ignorados\r",
															"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
															"    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
															"        try {\r",
															"            const transaction = await getTransaction(params);\r",
															"            const status = transaction?.status;\r",
															"            console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${status}`);\r",
															"\r",
															"            if (!IGNORED_STATUSES.includes(status)) {\r",
															"                return transaction;\r",
															"            }\r",
															"        } catch (err) {\r",
															"            console.warn(`Erro na tentativa ${attempt} de getTransaction:`, err);\r",
															"        }\r",
															"        await delay(intervalMs);\r",
															"    }\r",
															"    throw new Error(`Timeout: Status da transação permaneceu em valores ignorados após ${maxAttempts} tentativas.`);\r",
															"}\r",
															"\r",
															"async function main() {\r",
															"    if (!(response.approve === true || statusCode === \"OK\")) {\r",
															"        console.log(\"Resposta não aprovada ou statusCode inesperado, abortando execução.\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    try {\r",
															"        if (FLAGS.sendInitialNetworkEventEnabled) {\r",
															"            console.log(\"Executando request do Rabbit: enviando evento inicial...\");\r",
															"            const initialEventResponse = await sendNetworkEvent({\r",
															"                pm,\r",
															"                correlationId,\r",
															"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
															"                messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
															"                mti: \"0100\",\r",
															"                conciliationType: \"DUAL_MESSAGE\",\r",
															"                authorizationCategory: authorizationCategory[1].description,\r",
															"                authorizationResponseCode: \"00\",\r",
															"                pan,\r",
															"                requestPayload,\r",
															"                exchangeName: \"pismo.authorization.events.judge.v2\",\r",
															"                caller: \"Mastercard\",\r",
															"                custom_response_code: \"\"\r",
															"            });\r",
															"            console.log(\"Resposta recebida:\", initialEventResponse);\r",
															"            await delay(15000);\r",
															"        }\r",
															"\r",
															"        if (FLAGS.sendJudgeTransactionEnabled) {\r",
															"            // Ajusta o payload conforme o código original\r",
															"            const fields = requestPayload.fields;\r",
															"            fields.mti = \"0420\";\r",
															"            fields.original_network_data.de90_original_data_elements = {\r",
															"                sf1_original_message_type_identifier: \"0200\",\r",
															"                sf2_original_de11_systems_trace_audit_number: fields.nsu,\r",
															"                sf3_original_de7_tranmission_date_and_time: \"0401163921\",\r",
															"                sf4_original_de32_acquiring_institution_id_code: \"00998615073\",\r",
															"                sf5_original_de33_forwarding_institution_id_code: \"09000001507\"\r",
															"            };\r",
															"            fields.original_network_data.de60_advice_reason_code = {\r",
															"                de112Size: \"007\",\r",
															"                de112Start: \"216\",\r",
															"                sf1_advice_reason_code: \"453\",\r",
															"                sf2_advice_detail_code: \"0041\"\r",
															"            };\r",
															"            requestPayload.fields = fields;\r",
															"\r",
															"            const judgeTransactionResponse = await sendJudgeTransactionRequest({\r",
															"                pm,\r",
															"                requestBody: requestPayload,\r",
															"                correlationId\r",
															"            });\r",
															"            console.log(\"Resposta recebida SendTransaction(Judge) MTI :\" + fields.mti, judgeTransactionResponse);\r",
															"            await delay(10000);\r",
															"        }\r",
															"\r",
															"        if (FLAGS.sendSecondNetworkEventEnabled) {\r",
															"            // Ajusta processamento_code conforme original\r",
															"            requestPayload.fields.processing_code = \"20010\";\r",
															"\r",
															"            const secondEventResponse = await sendNetworkEvent({\r",
															"                pm,\r",
															"                correlationId,\r",
															"                destinationAddress: \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events\",\r",
															"                messageNamespace: \"Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\",\r",
															"                mti: \"1240\",\r",
															"                conciliationType: \"UNDEFINED\",\r",
															"                debitProgramCard,\r",
															"                authorizationCategory: authorizationCategory[3].description,\r",
															"                authorizationResponseCode: \"00\",\r",
															"                pan,\r",
															"                requestPayload,\r",
															"                exchangeName: \"authorizer.clearing.operational.confirmation.network.authorization.events\",\r",
															"                caller: \"Mastercard\",\r",
															"                custom_response_code: \"\"\r",
															"            });\r",
															"            console.log(\"Resposta recebida:\", secondEventResponse);\r",
															"            await delay(10000);\r",
															"        }\r",
															"\r",
															"        let transactionData = null;\r",
															"\r",
															"        if (FLAGS.getTransactionEnabled) {\r",
															"            transactionData = await pollGetTransaction({\r",
															"                pm,\r",
															"                fields: requestPayload.fields,\r",
															"                correlationId\r",
															"            });\r",
															"\r",
															"            console.log(\"Resposta recebida GetTransaction(Judge):\", {\r",
															"                authorizationCode: transactionData.transactionIdentifier.authorizationCode,\r",
															"                nsu: transactionData.transactionIdentifier.nsu,\r",
															"                panHash: transactionData.card.panHashProcessor,\r",
															"                transactionId: transactionData.transactionId,\r",
															"                transactionFunction: transactionData.transactionFunction,\r",
															"                status: transactionData.status,\r",
															"                proxy: transactionData.card.proxy\r",
															"            });\r",
															"\r",
															"            await delay(50000);\r",
															"        }\r",
															"\r",
															"        if (FLAGS.validateMambuEnabled && transactionData) {\r",
															"            try {\r",
															"                const mambuResponse = await validateMambu({\r",
															"                    pm,\r",
															"                    proxy: transactionData.card.proxy,\r",
															"                    authorizationId: transactionData.transactionId\r",
															"                });\r",
															"                const result = {\r",
															"                    currencyCode: mambuResponse.currencyCode,\r",
															"                    amount: mambuResponse.amount,\r",
															"                    externalReferenceId: mambuResponse.externalReferenceId,\r",
															"                    status: mambuResponse.status,\r",
															"                    creditDebitIndicator: mambuResponse.creditDebitIndicator,\r",
															"                };\r",
															"                console.log(\"Resposta recebida Mambu:\", result);\r",
															"            } catch (error) {\r",
															"                console.error('Erro na validação Mambu:', error);\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.error(\"Erro no fluxo principal:\", error);\r",
															"    }\r",
															"}\r",
															"\r",
															"main();\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//console.clear()",
															"",
															"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
															"// Converter strings de funções em funções executáveis",
															"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
															"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
															"const nsu = generateNsu(6);",
															"",
															"const authorizationCode = generateRandomString(5);",
															"pm.collectionVariables.set('authorizationCode', authorizationCode);",
															"pm.collectionVariables.set('nsuGlobal', nsu);",
															"const IntMaxValue = parseInt(\"2147483647\");",
															"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
															"pm.collectionVariables.set('authorizationId', authorizationId)",
															"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
															"const amount = _.random(1, 20);",
															"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
															"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
															"//pm.collectionVariables.set('randomAmount', 0);",
															"var uuid = require('uuid');",
															"pm.collectionVariables.set('randomId', uuid.v4());",
															"pm.collectionVariables.set('currency', '986'); // Real = 986; Dollar = 840",
															"pm.collectionVariables.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
															"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
															"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
															"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
															"pm.collectionVariables.set('mcc', '5311');",
															"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
															"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
															"pm.collectionVariables.set('walletId', '111');",
															"pm.collectionVariables.set('responseCode', '00');",
															"pm.collectionVariables.set('denialCode', '00');",
															"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
															"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
															"pm.collectionVariables.set('acquirerCode',728384008);",
															"pm.collectionVariables.set('accountIdDebit',45545454);",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-correlation-id",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "x-pismo-sign",
														"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
														"type": "text"
													},
													{
														"key": "x-cid",
														"value": "testandoooo",
														"type": "text"
													},
													{
														"key": "bypass-validation",
														"value": "{{BypassValidationHeader}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{UrlJudge}}/transactions",
													"host": [
														"{{UrlJudge}}"
													],
													"path": [
														"transactions"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Reversao",
					"item": [
						{
							"name": "V - Advice de Reversão (0420/400) Teste",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var authorization_id = \"8594993047347298\"\r",
											"postman.setGlobalVariable('authorization_id', authorization_id);\r",
											"\r",
											"\r",
											"let mti = \"0420\";\r",
											"var pismoSalvaassim = \"5594928989\" //MTI 0200 salva a transação com esse dado;\r",
											"let traceNumber = \"982040\";\r",
											"let transmissionDateTime = \"1208135000\";\r",
											"let acquirerID = \"00000000001\";\r",
											"let forwardingInstitutionID = \"23456\";\r",
											"\r",
											"let concatenatedValue = `${mti}${traceNumber}${transmissionDateTime}${acquirerID}${forwardingInstitutionID}`;\r",
											"postman.setGlobalVariable('concatenatedValue', concatenatedValue);\r",
											"postman.setGlobalVariable('traceNumber', traceNumber);\r",
											"\r",
											"console.log(concatenatedValue);\r",
											"\r",
											"/*\r",
											"var pismoSalvaassim = \"5594928989\" //MTI 0200 salva a transação com esse dado;\r",
											"let traceNumberVisa = \"559492\";\r",
											"\r",
											"      trace\r",
											"0420 559492 12081350000000000000123456*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-correlation-id",
										"value": "12a371f7-da40-4447-b29b-74097978a147",
										"type": "text"
									},
									{
										"key": "x-pismo-sign",
										"value": "eyJraWQiOiI3MjYyYTYwMjhlNTFkYmJkMTJkMWY0OGFmNGJkNmM0NDAwNDIzYWQzIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJ4bU94V1J2RUNSUStydVdZR1lcL1wvamxpZ2lUSVUzQjBMaGE5cldtNmNwaXc9Iiwic3ViIjoiYXV0aG9yaXphdGlvbiIsImFjY291bnQtaWQiOjMwNTQwLCJpc3MiOiJhcGkucGlzbW8uaW8iLCJleHAiOjE1NzM2OTY4MDAsImlhdCI6MTU3MjgzMjgwMCwicGFuLWhhc2giOiJURVNURS1qY01rNzNnRjlnbE1vdWtTOWRaVHBudko3clN5SkUwcTRIR3NGSEdSMkVZQzBSTWlBRFRwbGVrbkhEdEhSbWdXV3djTFlaZVpVNmRtakN4VmVHT0VpZz09In0.QOiulHmVaxUzmyK9hWTKelXQ63PCtZG4hzwG1-pIOIOmPUWPvO9WRxGWui2Z2hIDeOD3nK4feKHqHiFRVBjUDh7MIpUkOOxowDieYC9niZ3RFVK9okoXi0DWXDiaZEXd4fGbGFE6CQrAET1kDU3j__QDR1pkIjOv7hQJbT8n2JhSlVKhPi2KST_cIMcwZMzzf8xjbVqFVbje17t0GwrDKotTIAo-Ta8_wr_CLtnTQ3RCaqEy5Z6J6kF3xv4-ENsD83qAOzgaiZ8q1iY7rSHIWdxXTFhgC760GTgi9asmDFc2Ky8FNxFW5qpNFefO14nEaKdXzd_JHYu21YebFWro7A",
										"type": "text"
									},
									{
										"key": "x-cid",
										"value": "12a371f7-da40-4447-b29b-74097978a147",
										"type": "text"
									},
									{
										"key": "bypass-validation",
										"value": "{{BypassValidationHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{randomId}}\",\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0420\",\r\n        \"card_id\": {{processorCardId}},\r\n        \"account_id\": 19427249,\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"{{transactionType}}3100\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": \"{{$guid}}\",\r\n        \"retrieval_reference_number\": {{traceNumber}},\r\n        \"authorization_code\": \"{{randomId}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"\",\r\n        \"merchant_name\": \"\",\r\n        \"merchant_city\": \"\",\r\n        \"merchant_state_or_country_code\": \"\",\r\n        \"merchant_terminal_id\": \"7X8S5B0Q\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"[20,19,18,17,16,15,13,10,9,8,7]\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": null,\r\n        \"mcc\": \"\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"response_code\": \"00\",\r\n        \"terminal_capability\": null,\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MS2\",\r\n        \"banknet_reference_number\": \"888993758\",\r\n               \"original_network_data\": {\r\n    \"f2_primary_account_number\": \"[card-hash]\",\r\n    \"f3_processing_code\": \"010577\",\r\n    \"f4_amount_transaction\": \"000000001000\",\r\n    \"f6_amount_cardholder_billing\": \"000000000793\",\r\n    \"f7_transmission_date_and_time\": \"0516210120\",\r\n    \"f10_conversion_rate_cardholder_billing\": \"71982500\",\r\n    \"f11_stan\": \"009836\",\r\n    \"f12_time_local_transaction\": \"140120\",\r\n    \"f13_date_local_transaction\": \"0516\",\r\n    \"f14_date_expiration\": \"2609\",\r\n    \"f15_date_liquidation\": \"0517\",\r\n    \"f18_merchant_type\": \"5999\",\r\n    \"f19_acquiring_institution_country_code\": \"0076\",\r\n    \"f22_pos_entry_mode\": \"0100\",\r\n    \"f25_pos_condition_code\": \"59\",\r\n    \"f32_acquiring_institution_id_code\": \"476113\",\r\n    \"f34_electronic_ecommerce_data\": {\r\n      \"sf01_authentication_data\": {}\r\n    },\r\n    \"f37_retrieval_reference_number\": \"213621009836\",\r\n    \"f41_card_acceptor_terminal_id\": \"TERMID01\",\r\n    \"f42_card_acceptor_id_code\": \"CARD ACCEPTOR  \",\r\n    \"f43_card_acceptor_location\": \"ACQUIRER NAME            CITY NAME    BR\",\r\n    \"f48_additional_data_private\": {},\r\n    \"f49_currency_code_transaction\": \"0986\",\r\n    \"f51_currency_code_cardholder_billing\": \"0840\",\r\n    \"f55_integrated_circuit_card\": {\r\n    \t\"sf2_cryptogram_information_data\": \"80\",\r\n    \t\"sf3_issuer_application_data\": \"09010A09B02003\",\r\n    \t\"sf5_terminal_verification_result\": \"0080099000\",\r\n    \t\"sf6_transaction_date\": \"221205\",\r\n    \t\"sf7_transaction_type\": \"00\",\r\n    \t\"sf8_amount_authorized\": \"000000099900\",\r\n    \t\"sf9_transaction_currency_code\": \"0986\",\r\n    \t\"sf10_application_interchange_profile\": \"3B00\",\r\n    \t\"sf11_terminal_country_code\": \"0076\",\r\n    \t\"sf12_cardholder_verification_method\": \"020300\",\r\n    \t\"sf13_terminal_capabilities\": \"E0F0C7\",\r\n    \t\"sf15_amount_other\": \"000000000000\",\r\n    \t\"sf23_application_transaction_counter\": \"002A\"\r\n    },\r\n    \"f56_payment_account_reference_data\": {},\r\n    \"f60_additional_pos_data\": \"0000000005\",\r\n    \"f62_custom_payment_services\": {\r\n      \"sf2_transaction_identifier\": \"0302136641547109\",\r\n      \"sf21_online_risk_assessment_risk_score_reason_codes\": \"095A\",\r\n      \"sf22_online_risk_assessment_condition_codes\": \"02C200\"\r\n    },\r\n    \"f63_private_use\": {\r\n      \"sf1_network_id\": \"0002\"\r\n    },\r\n    \"f90_original_data_elements\": \"{{concatenatedValue}}\",\r\n    \"f104_transaction_description_transaction_specific_data\": {\r\n      \"sf5d_installments_data\": {},\r\n      \"sf69_payment_format\": {},\r\n      \"sf67_national_payment_format\": {}\r\n    },\r\n    \"f117_national_use\": {\r\n      \"usage_6_argentina_agro\": {}\r\n    },\r\n    \"f123_verification_data\": {\r\n      \"token_data\": {},\r\n      \"address_verification_data\": {},\r\n      \"activation_verification_data\": {}\r\n    },\r\n    \"f125_supporting_information_data\": {\r\n      \"token_device\": {},\r\n      \"wallet_provider\": {}\r\n    },\r\n    \"f126_visa_private_use_fields\": {\r\n      \"sf20_dsecure_indicator\": \"1\"\r\n    }\r\n  },\r\n        \"cvv_presence\": false,\r\n        \"password_present\": false,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"PROGRAM_CONFIG\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PROGRAM_CONFIG_FOUND\",\r\n                \"description\": \"Program found.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"PROGRAM_CONFIG\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PROGRAM_CONFIG_FOUND\",\r\n                \"description\": \"Program found.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: MULTIPLE.\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlJudge}}/transactions",
									"host": [
										"{{UrlJudge}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "1 - Reversão - DMC - Master",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed the error by replacing 'console' with 'pm'\r",
											"var uuid = require('uuid');\r",
											"\r",
											"const requestPayload = JSON.parse(pm.request.body.raw)\r",
											"console.log(requestPayload)\r",
											"const authorizationCategory = JSON.parse(pm.collectionVariables.get(\"authorizationCategory\"));\r",
											"const pan = pm.collectionVariables.get('pan');\r",
											"var debitProgramCard = pm.globals.get('debitProgramId');\r",
											"\r",
											"//let transactionData = {};\r",
											"//console.log(JSON.stringify(requestPayload))\r",
											"const type = pm.globals.get('transactionType');\r",
											"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
											"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
											"const judgeSendfunction = pm.collectionVariables.get('sendJudgeTransactionRequest');\r",
											"\r",
											"const sendNetworkEventBody = pm.collectionVariables.get(\"sendNetworkEvent\");\r",
											"\r",
											"const getTransaction = new Function('params', judgeFunction);\r",
											"const sendJudgeTransactionRequest = new Function('params', judgeSendfunction);\r",
											"\r",
											"const correlationId = uuid.v4().toString();\r",
											"\r",
											"// logs request\r",
											"    console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
											"    console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
											"    console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
											"    console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
											"    console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
											"    console.log(\"|=========================================================================================|\\n\");\r",
											"\r",
											"\r",
											"const response = JSON.parse(pm.response.stream.toString())\r",
											"\r",
											"const statusCode = pm.response.status;\r",
											"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
											"const validateMambu = new Function('params', validateMambuBody);\r",
											"if(response.approve === true || statusCode === \"OK\")\r",
											"{\r",
											"    setTimeout(() => {\r",
											"            console.log(\"Executando request do Rabbit: enviando evento...\");\r",
											"\r",
											"            sendNetworkEvent({\r",
											"                pm,\r",
											"                correlationId,\r",
											"                destinationAddress: \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
											"                messageNamespace: \"Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
											"                mti: \"0100\",\r",
											"                conciliationType: \"DUAL_MESSAGE\",\r",
											"                authorizationCategory: authorizationCategory[1].description,\r",
											"                authorizationResponseCode: \"00\",\r",
											"                pan,\r",
											"                requestPayload,\r",
											"                exchangeName: \"pismo.authorization.events.judge.v2\",\r",
											"                caller: \"Mastercard\",\r",
											"                custom_response_code: \"\"\r",
											"            })\r",
											"            .then(response => {\r",
											"                console.log(\"Resposta recebida:\",  response);\r",
											"                setTimeout(() => {\r",
											"                    let fields = requestPayload.fields;\r",
											"                    fields.mti = \"0420\";\r",
											"                    fields.original_network_data.de90_original_data_elements = {\r",
											"                        sf1_original_message_type_identifier: \"0200\",\r",
											"                        sf2_original_de11_systems_trace_audit_number: fields.nsu,\r",
											"                        sf3_original_de7_tranmission_date_and_time: \"0401163921\",\r",
											"                        sf4_original_de32_acquiring_institution_id_code: \"00998615073\",\r",
											"                        sf5_original_de33_forwarding_institution_id_code: \"09000001507\"\r",
											"                    };\r",
											"                    requestPayload.fields = fields;\r",
											"\r",
											"                    sendJudgeTransactionRequest({\r",
											"                            pm,\r",
											"                            requestBody: requestPayload,\r",
											"                            correlationId\r",
											"                            })\r",
											"                            .then(response => {\r",
											"                                    console.log(\"Resposta recebida SendTransaction(Judge):\", response);\r",
											"                                    setTimeout(() =>\r",
											"                                    {\r",
											"                                        getTransaction({\r",
											"                                            pm,\r",
											"                                            fields: requestPayload.fields,\r",
											"                                            correlationId\r",
											"                                            })\r",
											"                                            .then(response => {\r",
											"                                                const result = {\r",
											"                                                        authorizationCode: response.transactionIdentifier.authorizationCode,\r",
											"                                                        nsu: response.transactionIdentifier.nsu,\r",
											"                                                        panHash: response.card.panHashProcessor,\r",
											"                                                        transactionId: response.transactionId,\r",
											"                                                        transactionFunction: response.transactionFunction,\r",
											"                                                        status: response.status,\r",
											"                                                        proxy: response.card.proxy\r",
											"                                                    };\r",
											"\r",
											"                                                    console.log(\"Resposta recebida GetTransaction(Judge):\", result);\r",
											"\r",
											"                                                setTimeout(() => {\r",
											"                                                    transactionData = response;\r",
											"                                                    validateMambu({ pm, proxy: transactionData.card.proxy, authorizationId: transactionData.transactionId})\r",
											"                                                    .then(responseData => {\r",
											"                                                    const result = {\r",
											"                                                                currencyCode: responseData.currencyCode,\r",
											"                                                                amount: responseData.amount,\r",
											"                                                                externalReferenceId: responseData.externalReferenceId,\r",
											"                                                                status: responseData.status,\r",
											"                                                                creditDebitIndicator: responseData.creditDebitIndicator,\r",
											"                                                                };\r",
											"                                                                console.log(\"Resposta recebida Mambu:\", result);\r",
											"                                                        })\r",
											"                                                    .catch(error => {\r",
											"                                                        console.error('Erro:', error);\r",
											"                                                    });\r",
											"                                                }, 100000)\r",
											"                                            })\r",
											"                                            .catch(error => {\r",
											"                                                console.error(\"Erro:\", error);\r",
											"                                            });\r",
											"                                    }, 10000)\r",
											"                                })\r",
											"                                .catch(error => {\r",
											"                                    console.error(\"Erro:\", error);\r",
											"                                })\r",
											"                    }, 10000)\r",
											"            })\r",
											"            .catch(err => {\r",
											"                console.error(\"Erro:\", err);\r",
											"            });\r",
											"        }, 15000);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.clear()",
											"",
											"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
											"// Converter strings de funções em funções executáveis",
											"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
											"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
											"const nsu = generateNsu(6);",
											"",
											"const authorizationCode = generateRandomString(5);",
											"pm.collectionVariables.set('authorizationCode', authorizationCode);",
											"pm.collectionVariables.set('nsuGlobal', nsu);",
											"const IntMaxValue = parseInt(\"2147483647\");",
											"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
											"pm.collectionVariables.set('authorizationId', authorizationId)",
											"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
											"const amount = _.random(1, 20);",
											"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
											"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
											"//pm.collectionVariables.set('randomAmount', 0);",
											"var uuid = require('uuid');",
											"pm.collectionVariables.set('randomId', uuid.v4());",
											"pm.collectionVariables.set('currency', '986'); // Real = 986; Dollar = 840",
											"pm.collectionVariables.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
											"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
											"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
											"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
											"pm.collectionVariables.set('mcc', '5311');",
											"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
											"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
											"pm.collectionVariables.set('walletId', '111');",
											"pm.collectionVariables.set('responseCode', '00');",
											"pm.collectionVariables.set('denialCode', '00');",
											"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
											"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
											"pm.collectionVariables.set('acquirerCode',728384008);",
											"pm.collectionVariables.set('accountIdDebit',45545454);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-correlation-id",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-pismo-sign",
										"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
										"type": "text"
									},
									{
										"key": "x-cid",
										"value": "testandoooo",
										"type": "text"
									},
									{
										"key": "bypass-validation",
										"value": "{{BypassValidationHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlJudge}}/transactions",
									"host": [
										"{{UrlJudge}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Confirmacao",
					"item": [
						{
							"name": "2- AUTHORIZATION (approved) Debito Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// o que precisa ser gerado nesse pre-request script\r",
											"var uuid = require('uuid');\r",
											"const networkAuthorizationEventId = uuid.v4(); // usado como: event_id, org_id, cid, unique_cid, correlationId\r",
											"const networkAuthorizationEventDate = (new Date()).toISOString();\r",
											"const IntMaxValue = parseInt(\"2147483647\");\r",
											"const authorizationId = pm.globals.get('authorizationId'); // usado como authorization_id, nsu, retrieval_reference_number e authorization_code\r",
											"postman.setGlobalVariable('authorizationId', authorizationId); // criado para ser usado nesse e em outros requests\r",
											"postman.setGlobalVariable('networkAuthorizationEventId', networkAuthorizationEventId);\r",
											"// o que é obtido da chamada do Antifraude\r",
											"const merchantName = postman.getGlobalVariable('merchantName');\r",
											"const contryCode = postman.getGlobalVariable('contryCode');\r",
											"const currency = postman.getGlobalVariable('currency');\r",
											"const randomAmount = postman.getGlobalVariable('randomAmount')\r",
											"const cardId = postman.getGlobalVariable('processorCardId');\r",
											"const accountId = postman.getGlobalVariable('accountId');\r",
											"const customerId = postman.getGlobalVariable('customerId', 103194628);\r",
											"const numOfInstallments = postman.getGlobalVariable('numberOfInstallments');\r",
											"const type = postman.getGlobalVariable('transactionType');\r",
											"const em = postman.getGlobalVariable('entryMode');\r",
											"const pan = pm.globals.get('pan');\r",
											"const processorCardId = 7133380;\r",
											"const proxyAuthorizer = 4960491000130294985\r",
											"var messageTypeIndicator = \"NREC\" //FREC => Confirmation : NREC => Cancelation\r",
											"var brand = \"Mastercard\"\r",
											"var nsuTraceNumber = 13911\r",
											"var authorizationCode = \"KMRBA\"\r",
											"//geração do payload\r",
											"const networkAuthorizationEvent = {\r",
											"  \"destinationAddress\": \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/operational.judge.v1.pismo.clearing.debit\",\r",
											"  \"headers\": {},\r",
											"  \"message\": {\r",
											"    \"event_id\": \"8ab7c4ca-3aee-43d7-8f6f-c35d89d5d14d\",\r",
											"    \"timestamp\": \"2024-05-14T08:41:16.637Z\",\r",
											"    \"domain\": \"networktransactions\",\r",
											"    \"event_type\": \"network-authorization\",\r",
											"    \"schema_version\": 1,\r",
											"    \"org_id\": \"TN-8ab7c4ca-3aee-43d7-8f6f-c35d89d5d14d\",\r",
											"    \"cid\": \"aaa91e5d-6f41-4429-a637-762a0752d44a\",\r",
											"    \"Id\": \"0db8da9e-cdf6-42a5-8305-862eafae1594\",\r",
											"      \"Data\": {\r",
											"        \"file_type\": \"T464\",\r",
											"        \"network\": brand,\r",
											"        \"card_id\": processorCardId,\r",
											"        \"account_id\": 2003,\r",
											"        \"program_id\": 2003,\r",
											"        \"raw_message\": {\r",
											"          \"caller\": brand,\r",
											"          \"transactionTime\": \"203154\",\r",
											"          \"crossBorderCurrencyIndicator\": \"Y\",\r",
											"          \"correlationId\": \"afca1f59-968c-4675-aefa-f2830564ce09\",\r",
											"          \"currencyCodeSettlement\": \"986\",\r",
											"          \"authorizationId\": authorizationId,\r",
											"          \"interchangeFeeIndicator\": \"C\",\r",
											"          \"clearingType\": \"DEBIT\",\r",
											"          \"isaFeeIndicator\": \" \",\r",
											"          \"traceNumberAdjustmentTrans\": \"000000\",\r",
											"          \"intracurrencyAgreementCode\": \"    \",\r",
											"          \"posEntry\": \"051\",\r",
											"          \"processingCode\": \"000000\",\r",
											"          \"messageTypeIndicator\": messageTypeIndicator,\r",
											"          \"completedAmountTransactionIndicator\": \"D\",\r",
											"          \"requestedAmountTransaction\": \"000000110228\",\r",
											"          \"processorId\": \"0219\",\r",
											"          \"s3Path\": \"TN-c36a8d2d-d99a-4b82-b62a-faacdf3650e8/fromMaster/T464/2024/099/T4640990102060230036671.txt\",\r",
											"          \"impliedDecimalTransaction\": \"0\",\r",
											"          \"reconActivity\": \" \",\r",
											"          \"completedAmountTransaction\": \"000000110228\",\r",
											"          \"zeroBalanceUrl\": null,\r",
											"          \"traceNumber\": nsuTraceNumber,\r",
											"          \"positiveIdIndicator\": \"4\",\r",
											"          \"serviceLevelIndicator\": \"   \",\r",
											"          \"accessFee\": \"00000000\",\r",
											"          \"messageNumber\": \"587137968\",\r",
											"          \"cashBackAmountIndicator\": \"D\",\r",
											"          \"recordType\": messageTypeIndicator,\r",
											"          \"transactionDate\": \"040624\",\r",
											"          \"accessFeeIndicator\": \"D\",\r",
											"          \"conversionRateSettlement\": \"47238951\",\r",
											"          \"atmSurcharge\": \"N\",\r",
											"          \"responseCodeDE39\": \"00\",\r",
											"          \"brand\": \"MS1\",\r",
											"          \"orgId\": \"TN-c36a8d2d-d99a-4b82-b62a-faacdf3650e8\",\r",
											"          \"transactionDestinationInstitutionIdCode\": \"rwZC2ag/m6+pWirb6mAkk6qDdU1vZant3L9puAJvM5Cp2cSE/F3onC4yzpD0mgE8NgQUFC/HLoCuUF5r54GuUg==\",\r",
											"          \"crossBorderIndicator\": \"Y\",\r",
											"          \"authorizationCode\": authorizationCode,\r",
											"          \"responseCode\": \"  \",\r",
											"          \"cashBackAmount\": \"000000000000\",\r",
											"          \"network\": brand,\r",
											"          \"referenceNumber\": nsuTraceNumber,\r",
											"          \"merchantType\": \"5411\",\r",
											"          \"acquirerInstitutionId\": \"1960021912\",\r",
											"          \"pan\": pan,\r",
											"          \"impliedDecimalSettlement\": \"2\",\r",
											"          \"endpoint\": \"0036671\",\r",
											"          \"currencyCodeTransaction\": \"986\",\r",
											"          \"completedAmountSettlementIndicator\": \"D\",\r",
											"          \"institutionId\": null,\r",
											"          \"terminalId\": \"POS62627  \",\r",
											"          \"processorType\": \"I\",\r",
											"          \"adviceReasonCode\": \"       \",\r",
											"          \"completedAmountSettlement\": \"000000001523\",\r",
											"          \"addendums\": [\r",
											"            {\r",
											"              \"caller\": null,\r",
											"              \"cardIssuerInstitution\": \"1400004651\",\r",
											"              \"correlationId\": \"afca1f59-968c-4675-aefa-f2830564ce09\",\r",
											"              \"merchantId\": \"000062627      \",\r",
											"              \"orgId\": null,\r",
											"              \"account2Length\": \"19\",\r",
											"              \"account2To\": \"0000000000000000000\",\r",
											"              \"cardAcceptorCity\": \"E.A.GARAY Y C   \",\r",
											"              \"clearingType\": \"DEBIT\",\r",
											"              \"standinTransaction\": \"N\",\r",
											"              \"paymentTypeIndicator\": \"   \",\r",
											"              \"impliedDecimalCardholderBilling\": \"2\",\r",
											"              \"transactionDestinationInstitutionIdCode\": null,\r",
											"              \"authorizationCode\": authorizationCode,\r",
											"              \"amountIndicator\": \"D\",\r",
											"              \"debitMastercardOffline\": \"N\",\r",
											"              \"network\": null,\r",
											"              \"messageTypeIndicator\": \"FPST\",\r",
											"              \"processorId\": \"000219\",\r",
											"              \"s3Path\": null,\r",
											"              \"currencyCodeCardholderBilling\": \"840\",\r",
											"              \"endpoint\": null,\r",
											"              \"filler3\": \"                                   \",\r",
											"              \"account1From\": \"0000000000000000000\",\r",
											"              \"cardAcceptorNameAddress\": \"SUP.S6-3 DE FEBRERO   \",\r",
											"              \"account1Length\": \"19\",\r",
											"              \"zeroBalanceUrl\": null,\r",
											"              \"paymentFacilitatorId\": \"           \",\r",
											"              \"amountCardholderBilling\": \"000000007594\",\r",
											"              \"submerchantId\": \"               \",\r",
											"              \"cardAcceptorStateOrCountryCode\": \"USA\",\r",
											"              \"institutionId\": null,\r",
											"              \"posData\": \"00000002003\",\r",
											"              \"switchSerialNumber\": \"587137968\",\r",
											"              \"filler1\": \"         \",\r",
											"              \"independentSalesOrganizationId\": \"           \",\r",
											"              \"filler2\": \"         \",\r",
											"              \"recordType\": \"FPST\"\r",
											"            }\r",
											"          ],\r",
											"          \"interchangeFee\": \"0000000007\",\r",
											"          \"switchSerialNumber\": \"587137968\",\r",
											"          \"filler1\": \"          \",\r",
											"          \"panLength\": \"16\",\r",
											"          \"filler2\": \"            \"\r",
											"      }\r",
											"    }\r",
											"  },\r",
											"  \"messageType\": [\r",
											"    \"urn:message:Operational.Judge.NetworkAuthorizationEvents.Strategies.Pismo.PayLoads:NetworkAuthorizationClearingDebitEvent\"\r",
											"  ],\r",
											"  \"correlationId\": \"8ab7c4ca-3aee-43d7-8f6f-c35d89d5d14d\"\r",
											"};\r",
											"postman.setGlobalVariable('networkAuthorizationEvent', JSON.stringify(JSON.stringify(networkAuthorizationEvent)));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code precisa ser ok (200)\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Precisa receber resposta de sucesso do rabbit\", function() {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.routed).to.equal(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "R_u!7cy*2-BLpVQLkV!9",
											"type": "string"
										},
										{
											"key": "username",
											"value": "dev",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{BasicAuthRabbit}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.masstransit+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"properties\": {\r\n    \"content-type\": \"application/vnd.masstransit+json\"\r\n  },\r\n  \"routing_key\": \"\",\r\n  \"payload\": {{networkAuthorizationEvent}},\r\n  \"payload_encoding\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlRabbit}}api/exchanges/%2F/operational.judge.v1.pismo.clearing.debit/publish",
									"host": [
										"{{UrlRabbit}}api"
									],
									"path": [
										"exchanges",
										"%2F",
										"operational.judge.v1.pismo.clearing.debit",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.0 - AUTHORIZATION (approved) Debito Copy 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**** 1º request */\r",
											"\r",
											"// Gerar UUID para cabeçalho de correlação\r",
											"var uuid = require('uuid');\r",
											"const pan = pm.globals.get('pan');\r",
											"console.log(pan)\r",
											"const correlationId = uuid.v4().toString();\r",
											"\r",
											"if (typeof generateRandomString === 'undefined') {\r",
											"    eval(pm.globals.get(\"generateRandomString\"));\r",
											"}\r",
											"\r",
											"// Definir valores para o corpo da requisição\r",
											"    const authorizationId = Math.floor(Math.random() * 10000000000000000).toString();\r",
											"    const randomAmount = _.random(1, 9);\r",
											"    const cardId = 7133380 //postman.getGlobalVariable('processorCardId');\r",
											"    const nsuGlobal = Math.floor(Math.random() * 1000000).toString();\r",
											"    const authorizationCode = generateRandomString(5);\r",
											"    const timestampUtcIso8601 = new Date().toISOString();\r",
											"    const merchantName = postman.getGlobalVariable('merchantName');\r",
											"    const contryCode = \"USA\";\r",
											"    const currency = \"840\";\r",
											"    const accountId = postman.getGlobalVariable('accountId');\r",
											"    const acquirerCode = pm.globals.get('acquirerCode')\r",
											"\r",
											"\r",
											"    let request = {\r",
											"                \"id\": authorizationId,\r",
											"                \"entity\": \"transaction\",\r",
											"                \"fields\": {\r",
											"                    \"mti\": \"0200\",\r",
											"                    \"card_expiration_date\": \"2031-01-31\",\r",
											"                    \"card_id\": cardId,\r",
											"                    \"account_id\": accountId,\r",
											"                    \"amount_transaction\": randomAmount,\r",
											"                    \"amount_local\": randomAmount,\r",
											"                    \"amount_settlement\": randomAmount,\r",
											"                    \"transaction_timestamp\": timestampUtcIso8601,\r",
											"                    \"processing_code\": \"002000\",\r",
											"                    \"transaction_type\": \"00\",\r",
											"                    \"nsu\": nsuGlobal,\r",
											"                    \"retrieval_reference_number\": nsuGlobal,\r",
											"                    \"authorization_code\": authorizationCode,\r",
											"                    \"response_code\": \"00\",\r",
											"                    \"denial_code\": \"00\",\r",
											"                    \"payment_card_brand\": \"Mastercard\",\r",
											"                    \"currency\": currency,\r",
											"                    \"merchant_id_code\": \"963852CARDACC  \",\r",
											"                    \"merchant_name\": merchantName,\r",
											"                    \"merchant_city\": \"TESTE         \",\r",
											"                    \"merchant_state_or_country_code\": contryCode,\r",
											"                    \"merchant_terminal_id\": \"1234ABCD\",\r",
											"                    \"atc_chip\": \"\",\r",
											"                    \"atc_database\": \"\",\r",
											"                    \"cvv_data\": \"\",\r",
											"                    \"entry_mode\": \"05\",\r",
											"                    \"mcc\": \"5311\",\r",
											"                    \"card_type\": \"PLASTIC\",\r",
											"                    \"country_code\": contryCode,\r",
											"                    \"chip_validation\": true,\r",
											"                    \"postal_code\": \"6338500000\",\r",
											"                    \"chip_cryptogram_information_data\": \"\",\r",
											"                    \"chip_transaction_date\": \"\",\r",
											"                    \"chip_transaction_type\": \"\",\r",
											"                    \"chip_amount_authorized\": \"\",\r",
											"                    \"chip_transaction_currency_code\": \"\",\r",
											"                    \"chip_application_interchange_profile\": \"\",\r",
											"                    \"chip_terminal_country_code\": \"\",\r",
											"                    \"chip_cardholder_verification_method\": \"\",\r",
											"                    \"chip_terminal_capabilities\": \"\",\r",
											"                    \"chip_amount_other\": \"\",\r",
											"                    \"chip_application_transaction_counter\": \"\",\r",
											"                    \"cardholder_postal_code\": \"\",\r",
											"                    \"terminal_capability\": \"1\",\r",
											"                    \"tvr\": \"\",\r",
											"                    \"cvr\": \"\",\r",
											"                    \"number_of_installments\": 1,\r",
											"                    \"network_score\": 0,\r",
											"                    \"pos_postal_code\": \"6338500000\",\r",
											"                    \"acquirer_code\": acquirerCode,\r",
											"                    \"financial_network_code\": \"MC0\",\r",
											"                    \"banknet_reference_number\": \"000030639\",\r",
											"                    \"original_network_data\": {\r",
											"                        \"de2_primary_account_number\": \"nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==\",\r",
											"                        \"de3_processing_code\": {\r",
											"                            \"sf1_cardholder_transaction_type_code\": \"00\",\r",
											"                            \"sf2_cardholder_from_account_type_code\": \"20\",\r",
											"                            \"sf3_cardholder_to_account_type_code\": \"00\"\r",
											"                        },\r",
											"                        \"de4_amount_transaction\": \"000000010012\",\r",
											"                        \"de5_amount_settlement\": \"000000010012\",\r",
											"                        \"de6_amount_cardholder_billing\": \"000000010012\",\r",
											"                        \"de7_tranmission_date_and_time\": {\r",
											"                            \"sf1_date\": \"0222\",\r",
											"                            \"sf2_time\": \"160408\"\r",
											"                        },\r",
											"                        \"de9_conversion_rate_settlement\": {\r",
											"                            \"sf1_decimal_indicator\": \"6\",\r",
											"                            \"sf2_conversion_rate\": \"1000000\"\r",
											"                        },\r",
											"                        \"de10_conversion_rate_cardholder_billing\": {\r",
											"                            \"sf1_decimal_indicator\": \"6\",\r",
											"                            \"sf2_cardholderbilling_conversion_rate\": \"1000000\"\r",
											"                        },\r",
											"                        \"de11_stan\": \"000003\",\r",
											"                        \"de12_time_local_transaction\": \"160408\",\r",
											"                        \"de13_date_local_transaction\": \"0222\",\r",
											"                        \"de14_date_expiration\": \"2702\",\r",
											"                        \"de15_date_settlement\": \"0222\",\r",
											"                        \"de16_date_conversion\": \"0222\",\r",
											"                        \"de18_merchant_type\": \"5311\",\r",
											"                        \"de22_pos_entry_mode\": {\r",
											"                            \"sf1_pos_terminal_pan_entry_mode\": \"05\",\r",
											"                            \"sf2_pos_terminal_pin_entry_mode\": \"1\"\r",
											"                        },\r",
											"                        \"de26_pos_pin_capture_code\": \"04\",\r",
											"                        \"de28_amount_transaction_fee\": {},\r",
											"                        \"de29_amount_settlement_fee\": {},\r",
											"                        \"de30_amount_transaction_processing_fee\": {},\r",
											"                        \"de31_amount_settlement_processing_fee\": {},\r",
											"                        \"de32_acquiring_institution_id_code\": \"728384008\",\r",
											"                        \"de33_forwarding_institution_id_code\": \"9000000283\",\r",
											"                        \"de37_retrieval_reference_number\": {\r",
											"                            \"sf1_transaction_date_and_initiator_discretionary_data\": \"3400001\",\r",
											"                            \"sf2_terminal_transaction_number\": \"00005\"\r",
											"                        },\r",
											"                        \"de41_card_acceptor_terminal_id\": \"1234ABCD\",\r",
											"                        \"de42_card_acceptor_id_code\": \"963852CARDACC  \",\r",
											"                        \"de43_card_acceptor_name_location_for_all_transactions\": {\r",
											"                            \"sf1_card_acceptor_name\": \"TESTE\",\r",
											"                            \"sf3_card_acceptor_city\": \"TESTE         \",\r",
											"                            \"sf5_card_acceptor_state_or_country_code\": contryCode\r",
											"                        },\r",
											"                        \"de48_additional_data_private_user\": {\r",
											"                            \"de48_tcc\": \"R\",\r",
											"                            \"de48_start\": \"277\",\r",
											"                            \"de48_size\": \"001\",\r",
											"                            \"se11_key_exchange_block_data\": {},\r",
											"                            \"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r",
											"                            \"se15_authorization_system_advice_date_and_time\": {},\r",
											"                            \"se18_service_parameters\": {},\r",
											"                            \"se23_payment_initiation_channel\": {},\r",
											"                            \"se25_mastercard_cash_program_data\": {},\r",
											"                            \"se26_wallet_program_data\": {},\r",
											"                            \"se33_pan_mapping_file_information\": {},\r",
											"                            \"se34_atc_information\": {},\r",
											"                            \"se36_visa_mmv\": {},\r",
											"                            \"se37_additional_merchant_data\": {},\r",
											"                            \"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r",
											"                            \"se41_eletronic_commercer_certificate_qualifying_information\": {},\r",
											"                            \"se42_eletronic_commerce_indicator\": {\r",
											"                                \"sf1_eletronic_commerce_security_level_indicator_ucaf_collection_indicator\": 210\r",
											"                            },\r",
											"                            \"se43_ucaf\": {\r",
											"                                \"sf1_ucaf\": \"Teste\"\r",
											"                            },\r",
											"                            \"se48_mobile_program_indicator\": {},\r",
											"                            \"se49_time_validation_information\": {},\r",
											"                            \"se51_merchant_on_behalf_services\": {},\r",
											"                            \"se55_merchant_fraud_scoring_data\": {},\r",
											"                            \"se57_security_services_additional_data_for_acquirers\": {},\r",
											"                            \"se58_atm_additional_data\": {},\r",
											"                            \"se61_pos_data_extended_condition_codes\": {},\r",
											"                            \"se64_transit_program\": {},\r",
											"                            \"se65_terminal_compliant_indicator\": {},\r",
											"                            \"se66_authentication_data\": {\r",
											"                                \"sf1_program_protocol\": \"2\",\r",
											"                                \"sf2_directory_server_transaction_id\": \"7886694073753361\"\r",
											"                            },\r",
											"                            \"se67_money_send_information\": {},\r",
											"                            \"se71_onbehalf_services\": [\r",
											"                                {\r",
											"                                    \"sf1_ob_service\": \"18\",\r",
											"                                    \"sf2_onbehalf_result1\": \"C\",\r",
											"                                    \"sf3_onbehalf_result2\": \" \"\r",
											"                                }\r",
											"                            ],\r",
											"                            \"se74_additional_processing_information\": {},\r",
											"                            \"se75_fraud_scoring_data\": {\r",
											"                                \"sf1_fraud_score\": \"046\",\r",
											"                                \"sf2_score_reason_code\": \"54\",\r",
											"                                \"sf3_rules_score\": \"046\",\r",
											"                                \"sf4_rules_reason_code1\": \"54\",\r",
											"                                \"sf5_rules_reason_code2\": \"00\"\r",
											"                            },\r",
											"                            \"se78_payment_service_indicator\": {},\r",
											"                            \"se79_chip_cvr_or_tvr_bit_error_results\": {},\r",
											"                            \"se87_card_validation_code_result_or_cvv2\": \"M\",\r",
											"                            \"se93_fleet_card_id_request_data\": {}\r",
											"                        },\r",
											"                        \"de49_currency_code_transaction\": \"840\",\r",
											"                        \"de50_currency_code_settlement\": \"840\",\r",
											"                        \"de51_currency_code_cardholder_billing\": \"840\",\r",
											"                        \"de55_integrated_circuit_card\": {},\r",
											"                        \"de60_advice_reason_code\": {},\r",
											"                        \"de61_pos_data\": {\r",
											"                            \"sf1_pos_terminal_attendance\": \"0\",\r",
											"                            \"sf2_reserved_for_future_use\": \"0\",\r",
											"                            \"sf3_pos_terminal_location\": \"0\",\r",
											"                            \"sf4_pos_cardholder_presence\": \"0\",\r",
											"                            \"sf5_pos_card_presence\": \"0\",\r",
											"                            \"sf6_pos_card_capture_capabilities\": \"0\",\r",
											"                            \"sf7_pos_transaction_status\": \"0\",\r",
											"                            \"sf8_pos_transaction_security\": \"0\",\r",
											"                            \"sf9_reserved_for_future_use\": \"0\",\r",
											"                            \"sf10_cardholder_activated_terminal_level\": \"0\",\r",
											"                            \"sf11_pos_card_data_terminal_input_capability_indicator\": \"0\",\r",
											"                            \"sf12_pos_authorization_life_cycle\": \"00\",\r",
											"                            \"sf13_pos_country_code_or_submerchant\": \"840\",\r",
											"                            \"sf14_postal_code_or_submerchant\": \"6338500000\"\r",
											"                        },\r",
											"                        \"de63_network_data\": {\r",
											"                            \"sf1_financial_network_code\": \"MC0\",\r",
											"                            \"sf2_banknet_reference_number\": \"000030639\"\r",
											"                        },\r",
											"                        \"de90_original_data_elements\": {},\r",
											"                        \"de94_service_indicator\": {},\r",
											"                        \"de95_replacement_amounts\": {},\r",
											"                        \"de97_amount_net_settlement\": {},\r",
											"                        \"de112_additional_data_national_use\": {},\r",
											"                        \"de120_record_data\": {},\r",
											"                        \"de124_member_defined_data\": {},\r",
											"                        \"start\": 1645545850625559600,\r",
											"                        \"anti_fraud_url\": \"https://any-test.com\"\r",
											"                    },\r",
											"                    \"cvv_presence\": false,\r",
											"                    \"password_present\": true,\r",
											"                    \"account_type\": \"20\",\r",
											"                    \"validation_results\": [\r",
											"                {\r",
											"                    \"name\": \"CURRENCY\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CURRENCY_ALLOWED\",\r",
											"                    \"description\": \"Currency allowed\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"ARQC\",\r",
											"                    \"status\": \"SKIPPED\",\r",
											"                    \"reason\": \"NO_CRYPTOGRAM\",\r",
											"                    \"description\": \"No cryptogram present\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CVM\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"PIN_AND_CVV_VALID\",\r",
											"                    \"description\": \"Pin and CVV are valid\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"ENTRY_MODE\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"ENTRY_MODE_VALID\",\r",
											"                    \"description\": \"Entry mode valid\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CHIP_SIGNATURE\",\r",
											"                    \"status\": \"SKIPPED\",\r",
											"                    \"reason\": \"NO_CHIP_SIGNATURE\",\r",
											"                    \"description\": \"No chip signature present\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CARD_EXISTS\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CARD_FOUND\",\r",
											"                    \"description\": \"Card exists.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CARD_TOKEN_STATUS\",\r",
											"                    \"status\": \"SKIPPED\",\r",
											"                    \"reason\": \"SKIPPED\",\r",
											"                    \"description\": \"Validation not executed\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CARD_EXISTS\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CARD_FOUND\",\r",
											"                    \"description\": \"Card exists.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CARD_ATC\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CARD_ATC_VALID\",\r",
											"                    \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CONTACTLESS\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CONTACTLESS_ENABLED\",\r",
											"                    \"description\": \"Contactless enabled.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"ACCOUNT_TYPE\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"ACCOUNT_TYPE_VALID\",\r",
											"                    \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CARD_EXPIRATION_DATE\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CARD_NOT_EXPIRED\",\r",
											"                    \"description\": \"Card not expired.\",\r",
											"                    \"additional_data\": {\r",
											"                        /*\"expiration_date\": \"2031-01-31\"*/\r",
											"                    }\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r",
											"                    \"description\": \"Card inputted expiration date is valid.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CARD_VALID_UNTIL\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CARD_VALID_UNTIL_VALID\",\r",
											"                    \"description\": \"Card is valid.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"CARD_STATUS\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CARD_STATUS_VALID\",\r",
											"                    \"description\": \"Card status: NORMAL.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"PASSWORD_ATTEMPTS\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r",
											"                    \"description\": \"Password tries is valid.\"\r",
											"                },\r",
											"                {\r",
											"                    \"name\": \"LEDGER\",\r",
											"                    \"status\": \"APPROVED\",\r",
											"                    \"reason\": \"LEDGER_APPROVED\",\r",
											"                    \"description\": \"Ledger validations approved.\",\r",
											"                    \"additional_data\": {\r",
											"                        /*\"available_credit_limit\": 2637.17,\r",
											"                        \"total_credit_limit\": 4000,\r",
											"                        \"max_credit_limit\": 4000*/\r",
											"                    }\r",
											"                }\r",
											"            ]\r",
											"                }\r",
											"            }\r",
											"\r",
											"        console.log(authorizationCode)\r",
											"\r",
											"// Enviar a requisição para a API de transações\r",
											"    pm.sendRequest({\r",
											"        url: 'https://operational-judge-transaction.authorizer.bankly-staging-us-east-1-aws.internal/transactions',\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-correlation-id': correlationId,\r",
											"            'x-pismo-sign': 'eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw',\r",
											"            'x-cid': 'testandoooo',\r",
											"            'bypass-validation': '1099a7908cc3d60dd5de5cc2f5a1de5120d0eb5bace714f1dc7acd83f91d44d860b767b4f34e5aacf87ba44331e8aa377ab0ad9ec3c7ebd2f02e3c5925049ada',\r",
											"            'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(request)\r",
											"        }\r",
											"    }, (err, response) => {\r",
											"        if (err) {\r",
											"            console.log(\"Erro ao enviar a requisição:\", err);\r",
											"        } else {\r",
											"            if (response.code === 200) {\r",
											"                const responseData = JSON.parse(response.stream.toString());\r",
											"                if(responseData.is_approved === true && responseData.response_code === \"00\" && responseData.approve === true)\r",
											"                {\r",
											"                    console.log(\"funcionou\")\r",
											"                    \r",
											"                    setTimeout(() => {\r",
											"                    console.log(\"Executando código após a resposta com atraso...\");\r",
											"                    sendNetworkValidationWasProcessed()\r",
											"                }, 10000); // Espera de 5 segundos\r",
											"                }\r",
											"\r",
											"            } else {\r",
											"                console.log(\"Erro na resposta:\", response);\r",
											"                doRequest = false;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"\r",
											"// funcao sendConfirmation\r",
											"    function sendConfirmation()\r",
											"    {\r",
											"        const networkAuthorizationEventDate = (new Date()).toISOString();\r",
											"        const IntMaxValue = parseInt(\"2147483647\");\r",
											"\r",
											"        // o que é obtido da chamada do Antifraude\r",
											"        const numOfInstallments = postman.getGlobalVariable('numberOfInstallments');\r",
											"        const type = postman.getGlobalVariable('transactionType');\r",
											"        const em = postman.getGlobalVariable('entryMode');\r",
											"        const processorCardId = 7133380;\r",
											"        var messageTypeIndicator = \"FREC\" //FREC => Confirmation : NREC => Cancelation\r",
											"        var brand = \"Mastercard\"\r",
											"\r",
											"        console.log(\"chegou aqui\")\r",
											"        //geração do payload\r",
											"        const networkAuthorizationEvent = {\r",
											"        \"destinationAddress\": \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/operational.judge.v1.pismo.clearing.debit\",\r",
											"        \"headers\": {},\r",
											"        \"message\": {\r",
											"            \"event_id\": authorizationId,\r",
											"            \"timestamp\": \"2024-05-14T08:41:16.637Z\",\r",
											"            \"domain\": \"networktransactions\",\r",
											"            \"event_type\": \"network-authorization\",\r",
											"            \"schema_version\": 1,\r",
											"            \"org_id\": \"TN-8ab7c4ca-3aee-43d7-8f6f-c35d89d5d14d\",\r",
											"            \"cid\": \"aaa91e5d-6f41-4429-a637-762a0752d44a\",\r",
											"            \"Id\": \"0db8da9e-cdf6-42a5-8305-862eafae1594\",\r",
											"            \"Data\": {\r",
											"                \"file_type\": \"T464\",\r",
											"                \"network\": brand,\r",
											"                \"card_id\": processorCardId,\r",
											"                \"account_id\": 2003,\r",
											"                \"program_id\": 2003,\r",
											"                \"raw_message\": {\r",
											"                \"caller\": brand,\r",
											"                \"transactionTime\": \"203154\",\r",
											"                \"crossBorderCurrencyIndicator\": \"Y\",\r",
											"                \"correlationId\": \"afca1f59-968c-4675-aefa-f2830564ce09\",\r",
											"                \"currencyCodeSettlement\": \"986\",\r",
											"                \"authorizationId\": authorizationId,\r",
											"                \"interchangeFeeIndicator\": \"C\",\r",
											"                \"clearingType\": \"DEBIT\",\r",
											"                \"isaFeeIndicator\": \" \",\r",
											"                \"traceNumberAdjustmentTrans\": \"000000\",\r",
											"                \"intracurrencyAgreementCode\": \"    \",\r",
											"                \"posEntry\": \"051\",\r",
											"                \"processingCode\": \"000000\",\r",
											"                \"messageTypeIndicator\": messageTypeIndicator,\r",
											"                \"completedAmountTransactionIndicator\": \"D\",\r",
											"                \"requestedAmountTransaction\": \"000000110228\",\r",
											"                \"processorId\": \"0219\",\r",
											"                \"s3Path\": \"TN-c36a8d2d-d99a-4b82-b62a-faacdf3650e8/fromMaster/T464/2024/099/T4640990102060230036671.txt\",\r",
											"                \"impliedDecimalTransaction\": \"0\",\r",
											"                \"reconActivity\": \" \",\r",
											"                \"completedAmountTransaction\": \"000000110228\",\r",
											"                \"zeroBalanceUrl\": null,\r",
											"                \"traceNumber\": nsuGlobal,\r",
											"                \"positiveIdIndicator\": \"4\",\r",
											"                \"serviceLevelIndicator\": \"   \",\r",
											"                \"accessFee\": \"00000000\",\r",
											"                \"messageNumber\": \"587137968\",\r",
											"                \"cashBackAmountIndicator\": \"D\",\r",
											"                \"recordType\": messageTypeIndicator,\r",
											"                \"transactionDate\": \"040624\",\r",
											"                \"accessFeeIndicator\": \"D\",\r",
											"                \"conversionRateSettlement\": \"47238951\",\r",
											"                \"atmSurcharge\": \"N\",\r",
											"                \"responseCodeDE39\": \"00\",\r",
											"                \"brand\": \"MS1\",\r",
											"                \"orgId\": \"TN-c36a8d2d-d99a-4b82-b62a-faacdf3650e8\",\r",
											"                \"transactionDestinationInstitutionIdCode\": \"rwZC2ag/m6+pWirb6mAkk6qDdU1vZant3L9puAJvM5Cp2cSE/F3onC4yzpD0mgE8NgQUFC/HLoCuUF5r54GuUg==\",\r",
											"                \"crossBorderIndicator\": \"Y\",\r",
											"                \"authorizationCode\": authorizationCode,\r",
											"                \"responseCode\": \"  \",\r",
											"                \"cashBackAmount\": \"000000000000\",\r",
											"                \"network\": brand,\r",
											"                \"referenceNumber\": nsuGlobal,\r",
											"                \"merchantType\": \"5411\",\r",
											"                \"acquirerInstitutionId\": \"1960021912\",\r",
											"                \"pan\": pan,\r",
											"                \"impliedDecimalSettlement\": \"2\",\r",
											"                \"endpoint\": \"0036671\",\r",
											"                \"currencyCodeTransaction\": currency,\r",
											"                \"completedAmountSettlementIndicator\": \"D\",\r",
											"                \"institutionId\": null,\r",
											"                \"terminalId\": \"POS62627  \",\r",
											"                \"processorType\": \"I\",\r",
											"                \"adviceReasonCode\": \"       \",\r",
											"                \"completedAmountSettlement\": \"000000001523\",\r",
											"                \"addendums\": [\r",
											"                    {\r",
											"                    \"caller\": null,\r",
											"                    \"cardIssuerInstitution\": \"1400004651\",\r",
											"                    \"correlationId\": \"afca1f59-968c-4675-aefa-f2830564ce09\",\r",
											"                    \"merchantId\": \"000062627      \",\r",
											"                    \"orgId\": null,\r",
											"                    \"account2Length\": \"19\",\r",
											"                    \"account2To\": \"0000000000000000000\",\r",
											"                    \"cardAcceptorCity\": \"E.A.GARAY Y C   \",\r",
											"                    \"clearingType\": \"DEBIT\",\r",
											"                    \"standinTransaction\": \"N\",\r",
											"                    \"paymentTypeIndicator\": \"   \",\r",
											"                    \"impliedDecimalCardholderBilling\": \"2\",\r",
											"                    \"transactionDestinationInstitutionIdCode\": null,\r",
											"                    \"authorizationCode\": authorizationCode,\r",
											"                    \"amountIndicator\": \"D\",\r",
											"                    \"debitMastercardOffline\": \"N\",\r",
											"                    \"network\": null,\r",
											"                    \"messageTypeIndicator\": \"FPST\",\r",
											"                    \"processorId\": \"000219\",\r",
											"                    \"s3Path\": null,\r",
											"                    \"currencyCodeCardholderBilling\": \"840\",\r",
											"                    \"endpoint\": null,\r",
											"                    \"filler3\": \"                                   \",\r",
											"                    \"account1From\": \"0000000000000000000\",\r",
											"                    \"cardAcceptorNameAddress\": \"SUP.S6-3 DE FEBRERO   \",\r",
											"                    \"account1Length\": \"19\",\r",
											"                    \"zeroBalanceUrl\": null,\r",
											"                    \"paymentFacilitatorId\": \"           \",\r",
											"                    \"amountCardholderBilling\": \"000000007594\",\r",
											"                    \"submerchantId\": \"               \",\r",
											"                    \"cardAcceptorStateOrCountryCode\": \"USA\",\r",
											"                    \"institutionId\": null,\r",
											"                    \"posData\": \"00000002003\",\r",
											"                    \"switchSerialNumber\": \"587137968\",\r",
											"                    \"filler1\": \"         \",\r",
											"                    \"independentSalesOrganizationId\": \"           \",\r",
											"                    \"filler2\": \"         \",\r",
											"                    \"recordType\": \"FPST\"\r",
											"                    }\r",
											"                ],\r",
											"                \"interchangeFee\": \"0000000007\",\r",
											"                \"switchSerialNumber\": \"587137968\",\r",
											"                \"filler1\": \"          \",\r",
											"                \"panLength\": \"16\",\r",
											"                \"filler2\": \"            \"\r",
											"            }\r",
											"            }\r",
											"        },\r",
											"        \"messageType\": [\r",
											"            \"urn:message:Operational.Judge.NetworkAuthorizationEvents.Strategies.Pismo.PayLoads:NetworkAuthorizationClearingDebitEvent\"\r",
											"        ],\r",
											"        \"correlationId\": \"8ab7c4ca-3aee-43d7-8f6f-c35d89d5d14d\"\r",
											"        };\r",
											"        postman.setGlobalVariable('networkAuthorizationEvent', JSON.stringify(JSON.stringify(networkAuthorizationEvent)));\r",
											"    }\r",
											"// funcao sendNetworkValidationWasProcessed\r",
											"    function sendNetworkValidationWasProcessed()\r",
											"    {\r",
											"            const login = 'dev';\r",
											"            const senha = 'R_u!7cy*2-BLpVQLkV!9';\r",
											"            const credentials = btoa(`${login}:${senha}`);   \r",
											"    /****** */\r",
											"        const networkAuthorizationEventId = uuid.v4(); // usado como: event_id, org_id, cid, unique_cid, correlationId\r",
											"        const networkAuthorizationEventDate = (new Date()).toISOString();\r",
											"        const customerId = pm.globals.get('customerId', 103194628);\r",
											"        const nsu =  nsuGlobal //989377\r",
											"        const networkEventBody = {\r",
											"            \"destinationAddress\": \"rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\",\r",
											"            \"headers\": {},\r",
											"            \"message\": {\r",
											"                \"event_id\": networkAuthorizationEventId.toString(),\r",
											"                \"timestamp\": networkAuthorizationEventDate,\r",
											"                \"domain\": \"networktransactions\",\r",
											"                \"event_type\": \"network-authorization\",\r",
											"                \"schema_version\": 1,\r",
											"                \"org_id\": \"TN-\" + networkAuthorizationEventId.toString(),\r",
											"                \"cid\": networkAuthorizationEventId.toString(),\r",
											"                \"data\": {\r",
											"                    \"authorization_category\": \"AUTHORIZATION\",\r",
											"                    \"conciliation_type\": \"UNDEFINED\",\r",
											"                    \"authorization_status\": 1,\r",
											"                    \"authorization_type\": \"NETWORK\",\r",
											"                    \"org_id\": \"TN-\" + networkAuthorizationEventId.toString(),\r",
											"                    \"cid\": networkAuthorizationEventId.toString(),\r",
											"                    \"unique_cid\": networkAuthorizationEventId.toString(),\r",
											"                    \"soft_descriptor\": \"TESTE\",\r",
											"                    \"event_date_hour\": networkAuthorizationEventDate,\r",
											"                    \"event_date_hour_utc\": networkAuthorizationEventDate,\r",
											"                    \"authorization_date_hour\": networkAuthorizationEventDate,\r",
											"                    \"original_authorization_date_hour\": networkAuthorizationEventDate,\r",
											"                    \"original_event_date_hour_utc\": networkAuthorizationEventDate,\r",
											"                    \"account_id\": accountId,\r",
											"                    \"card_id\": cardId,\r",
											"                    \"program_id\": 1080,\r",
											"                    \"org_operation_id\": 13852,\r",
											"                    \"authorization_id\": authorizationId,\r",
											"                    \"customer_id\": customerId,\r",
											"                    \"number_of_installments\": \"3\",\r",
											"                    \"principal_amount\": randomAmount,\r",
											"                    \"contract_amount\": randomAmount,\r",
											"                    \"installment_amount\": randomAmount,\r",
											"                    \"airport_tax\": null,\r",
											"                    \"type\": \"AUTH_EVENT\",\r",
											"                    \"caller\": \"Mastercard\",\r",
											"                    \"mti\": \"0200\",\r",
											"                    \"pan\": pan,\r",
											"                    \"nsu\": nsu,\r",
											"                    \"retrieval_reference_number\": nsu,\r",
											"                    \"authorization_code\": authorizationCode,\r",
											"                    \"authorization_response_code\": \"00\",\r",
											"                    \"processing_code\": \"00\",\r",
											"                    \"settlement_amount\": \"13\",\r",
											"                    \"settlement_currency_code\": \"840\",\r",
											"                    \"local_amount\": \"13\",\r",
											"                    \"local_currency_code\": currency,\r",
											"                    \"cardholder_currency_code\": currency,\r",
											"                    \"merchant_category_id\": \"5199\",\r",
											"                    \"merchant_name\": merchantName,\r",
											"                    \"merchant_city\": \"São Paulo\",\r",
											"                    \"merchant_state_or_country\": contryCode,\r",
											"                    \"card_acceptor_id\": \"\",\r",
											"                    \"acquirer_bin\": null,\r",
											"                    \"password_present\": false,\r",
											"                    \"cvv_present\": false,\r",
											"                    \"track1_present\": false,\r",
											"                    \"track2_present\": false,\r",
											"                    \"arqc_present\": false,\r",
											"                    \"advice_reason_code\": \"\",\r",
											"                    \"advice_detail_code\": \"\",\r",
											"                    \"incoming_response_code\": \"00\",\r",
											"                    \"incoming_authorization_code\": \"\",\r",
											"                    \"point_of_sale\": {\r",
											"                        \"entry_mode\": \"811\"\r",
											"                    },\r",
											"                    \"transaction_status\": \"PRE_AUTHORIZED_REQUEST\",\r",
											"                    \"postings\": {\r",
											"                        \"iof_amount\": 3,\r",
											"                        \"fee_amount\": 3,\r",
											"                        \"cash_back_amount\": 0\r",
											"                    },\r",
											"                    \"tid\": \"\",\r",
											"                    \"custom_response_code\": \"\",\r",
											"                    \"ledger_update_id\": \"e6b21dbc-1c21-457a-a5a5-0e7e6815f73e\",\r",
											"                    \"token_information\": null,\r",
											"                    \"metadata\": null,\r",
											"                    \"validation_results\": [\r",
											"                        {\r",
											"                            \"name\": \"CARD_EXISTS\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"CARD_FOUND\",\r",
											"                            \"description\": \"Card exists.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"CARD_TOKEN_STATUS\",\r",
											"                            \"status\": \"SKIPPED\",\r",
											"                            \"reason\": \"SKIPPED\",\r",
											"                            \"description\": \"Validation not executed\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"CARD_ATC\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"CARD_ATC_VALID\",\r",
											"                            \"description\": \"Received null but the last is null. Used these params: MinOffset: 0, MaxOffset: 0, IsAdvice: false.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"CONTACTLESS\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"CONTACTLESS_ENABLED\",\r",
											"                            \"description\": \"Contactless enabled.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"ACCOUNT_TYPE\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"ACCOUNT_TYPE_VALID\",\r",
											"                            \"description\": \"Account Type: NON_SPECIFIED_ACCOUNT. Card Mode: CREDIT.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"OPERATION\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"VALID_OPERATION\",\r",
											"                            \"description\": \"Valid operation (003100) for OrgId (TN-ef23ffe3-c69b-4e9c-ab22-d865fe0a25ee) and ProgramId (1080).\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"PASSWORD_ATTEMPTS\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r",
											"                            \"description\": \"Password tries is valid.\"\r",
											"                        },\r",
											"                        {\r",
											"                                    \"name\": \"CARD_EXPIRATION_DATE\",\r",
											"                                    \"status\": \"APPROVED\",\r",
											"                                    \"reason\": \"CARD_NOT_EXPIRED\",\r",
											"                                    \"description\": \"Card not expired.\",\r",
											"                                    \"additional_data\": {\r",
											"                                        \"expiration_date\": \"2031-01-31\"\r",
											"                                    }\r",
											"                                },\r",
											"                        {\r",
											"                            \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r",
											"                            \"description\": \"Card inputted expiration date is valid.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"CARD_VALID_UNTIL\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"CARD_VALID_UNTIL_VALID\",\r",
											"                            \"description\": \"Card is valid.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"CARD_STATUS\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"CARD_STATUS_VALID\",\r",
											"                            \"description\": \"Card status: NORMAL.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"ACCOUNT_LIMITS\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"ACCOUNT_LIMITS_FOUND\",\r",
											"                            \"description\": \"Account limits exists.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"ACCOUNT_STATUS\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"ACCOUNT_STATUS_VALID\",\r",
											"                            \"description\": \"Account has a valid status: 1.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"CREDIT_LIMIT\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"CREDIT_LIMIT_IMPACT_FOUND\",\r",
											"                            \"description\": \"Acceptances found.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"MAX_TRANSACTIONS_FOR_TEMPORARY_CARD\",\r",
											"                            \"status\": \"SKIPPED\",\r",
											"                            \"reason\": \"MAX_TRANSACTIONS_IF_TEMPORARY_CARD_SKIPPED\",\r",
											"                            \"description\": \"Card is not temporary.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"CARD_TRANSACTION_LIMIT\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"LIMIT_APPROVED\",\r",
											"                            \"description\": \"Card transaction sufficient limit.\"\r",
											"                        },\r",
											"                        {\r",
											"                                    \"name\": \"LEDGER\",\r",
											"                                    \"status\": \"APPROVED\",\r",
											"                                    \"reason\": \"LEDGER_APPROVED\",\r",
											"                                    \"description\": \"Ledger validations approved.\",\r",
											"                                    /*\"additional_data\": {\r",
											"                                        \"available_credit_limit\": 2637.17,\r",
											"                                        \"total_credit_limit\": 4000,\r",
											"                                        \"max_credit_limit\": 4000\r",
											"                                    }*/\r",
											"                                },\r",
											"                        {\r",
											"                            \"name\": \"RULES\",\r",
											"                            \"status\": \"SKIPPED\",\r",
											"                            \"reason\": \"RULES_NOT_ENABLED\",\r",
											"                            \"description\": \"Rules Evaluation not enabled.\"\r",
											"                        },\r",
											"                        {\r",
											"                            \"name\": \"ANTI_FRAUD\",\r",
											"                            \"status\": \"APPROVED\",\r",
											"                            \"reason\": \"ANTI_FRAUD_APPROVE\",\r",
											"                            \"description\": \"AntiFraud approve this authorization\"\r",
											"                        }\r",
											"                    ],\r",
											"                    \"conciliation_information\": null,\r",
											"                    \"origin\": \"\",\r",
											"                    \"file_date\": \"\",\r",
											"                    \"atc\": null,\r",
											"                    \"anti_fraud_execution_time\": 861,\r",
											"                    \"labels\": [\r",
											"                        \"INCREMENT_NUMBER_OF_TRANSACTIONS\"\r",
											"                    ],\r",
											"                    \"rates\": {\r",
											"                        \"cardholder_conversion_rate\": 11.8312,\r",
											"                        \"international_iof_rate\": 5\r",
											"                    }\r",
											"                },\r",
											"                \"Id\": networkAuthorizationEventId.toString()\r",
											"            },\r",
											"            \"messageType\": [\r",
											"                \"urn:message:Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\"\r",
											"            ],\r",
											"            \"correlationId\": networkAuthorizationEventId.toString(),\r",
											"            };\r",
											"\r",
											"        var requestBody = {\r",
											"                \"properties\": {\r",
											"                    \"content-type\": \"application/vnd.masstransit+json\"\r",
											"                },\r",
											"                \"routing_key\": \"\",\r",
											"                \"payload\": JSON.stringify(networkEventBody),\r",
											"                \"payload_encoding\": \"string\"\r",
											"                }    \r",
											"            \r",
											"        const url = 'https://b-19ea6c87-f107-437d-80a8-943cd8e03483.mq.us-east-1.amazonaws.com/api/exchanges/%2F/pismo.authorization.events.judge.v2/publish';\r",
											"        const headers = {\r",
											"            'Authorization': `Basic ${credentials}`,\r",
											"            'Content-Type': 'application/vnd.masstransit+json'\r",
											"        };\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: url,\r",
											"            method: 'POST',\r",
											"            header: headers,\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(requestBody)\r",
											"            }\r",
											"        }, (err, response) => {\r",
											"            if (err) {\r",
											"                console.log(\"Erro ao enviar a requisição:\", err);\r",
											"            } else {\r",
											"                setTimeout(() => {\r",
											"                    console.log(\"Executando código após a resposta com atraso...\");\r",
											"                    sendConfirmation()\r",
											"                }, 10000);\r",
											"                console.log(\"Resposta recebida:\", response.stream.toString());\r",
											"            }\r",
											"        });\r",
											"    }\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code precisa ser ok (200)\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Precisa receber resposta de sucesso do rabbit\", function() {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.routed).to.equal(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "R_u!7cy*2-BLpVQLkV!9",
											"type": "string"
										},
										{
											"key": "username",
											"value": "dev",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{BasicAuthRabbit}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.masstransit+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"properties\": {\r\n    \"content-type\": \"application/vnd.masstransit+json\"\r\n  },\r\n  \"routing_key\": \"\",\r\n  \"payload\": {{networkAuthorizationEvent}},\r\n  \"payload_encoding\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlRabbit}}api/exchanges/%2F/operational.judge.v1.pismo.clearing.debit/publish",
									"host": [
										"{{UrlRabbit}}api"
									],
									"path": [
										"exchanges",
										"%2F",
										"operational.judge.v1.pismo.clearing.debit",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "1 - Voucher - DMC Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"function delay(ms) {\r",
											"  return new Promise(resolve => setTimeout(resolve, ms));\r",
											"}\r",
											"\r",
											"const FLAGS = {\r",
											"  sendFirstNetworkEventEnabled: true,\r",
											"  sendClearingConfirmationEnabled: true,\r",
											"  getTransactionEnabled: true,\r",
											"  validateMambuEnabled: true,\r",
											"};\r",
											"\r",
											"// Status que fazem o clearing ser ignorado (polling para pegar status diferente disso)\r",
											"const IGNORED_STATUSES = [\r",
											"  'DebitTransactionProcessedByProcessorWasReceived',\r",
											"  'TransactionHoldWasApproved'\r",
											"];\r",
											"\r",
											"const requestPayload = JSON.parse(pm.request.body.raw);\r",
											"console.log(requestPayload);\r",
											"\r",
											"const authorizationCategory = JSON.parse(pm.collectionVariables.get('authorizationCategory'));\r",
											"const pan = pm.collectionVariables.get('pan');\r",
											"const debitProgramCard = pm.globals.get('debitProgramId');\r",
											"\r",
											"const type = pm.globals.get('transactionType');\r",
											"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
											"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
											"const sendNetworkEventBody = pm.collectionVariables.get('sendNetworkEvent');\r",
											"\r",
											"const getTransaction = new Function('params', judgeFunction);\r",
											"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
											"const validateMambu = new Function('params', validateMambuBody);\r",
											"\r",
											"const correlationId = uuid.v4().toString();\r",
											"\r",
											"const response = JSON.parse(pm.response.stream.toString());\r",
											"const statusCode = pm.response.status;\r",
											"\r",
											"console.log('\\n|==================== DADOS REQUEST =====================================================|');\r",
											"console.log('| authorization_id:     ', pm.collectionVariables.get('authorizationId'));\r",
											"console.log('| Nsu:                  ', requestPayload.fields.nsu);\r",
											"console.log('| AuthorizationCode:    ', requestPayload.fields.authorization_code);\r",
											"console.log('| ProcessCardId:        ', requestPayload.fields.card_id);\r",
											"console.log('|=========================================================================================|\\n');\r",
											"\r",
											"// Polling que espera status diferente do ignorado para continuar\r",
											"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
											"  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
											"    try {\r",
											"      const transaction = await getTransaction(params);\r",
											"      const currentStatus = transaction?.status;\r",
											"      console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${currentStatus}`);\r",
											"\r",
											"      if (!IGNORED_STATUSES.includes(currentStatus)) {\r",
											"        return transaction;\r",
											"      }\r",
											"    } catch (error) {\r",
											"      console.warn(`Erro na tentativa ${attempt} de getTransaction:`, error);\r",
											"    }\r",
											"    await delay(intervalMs);\r",
											"  }\r",
											"  throw new Error(`Timeout: status da transação permaneceu nos ignorados após ${maxAttempts} tentativas.`);\r",
											"}\r",
											"\r",
											"async function main() {\r",
											"  if (!(response.approve === true || statusCode === 'OK')) {\r",
											"    console.log('Resposta não aprovada ou statusCode inesperado, abortando execução.');\r",
											"    return;\r",
											"  }\r",
											"\r",
											"  try {\r",
											"    if (FLAGS.sendFirstNetworkEventEnabled) {\r",
											"      console.log('Executando request do Rabbit: enviando primeiro evento...');\r",
											"      const firstEventResponse = await sendNetworkEvent({\r",
											"        pm,\r",
											"        correlationId,\r",
											"        destinationAddress:\r",
											"          'rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent',\r",
											"        messageNamespace:\r",
											"          'Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent',\r",
											"        mti: '0100',\r",
											"        conciliationType: 'DUAL_MESSAGE',\r",
											"        authorizationCategory: authorizationCategory[1].description,\r",
											"        authorizationResponseCode: '00',\r",
											"        pan,\r",
											"        requestPayload,\r",
											"        exchangeName: 'pismo.authorization.events.judge.v2',\r",
											"        caller: 'Mastercard',\r",
											"        custom_response_code: ''\r",
											"      });\r",
											"      console.log('Resposta recebida:', firstEventResponse);\r",
											"\r",
											"      await delay(15000);\r",
											"    }\r",
											"\r",
											"    if (FLAGS.sendClearingConfirmationEnabled) {\r",
											"      // Polling para aguardar status não ignorado antes de clearing\r",
											"      const transactionData = await pollGetTransaction({\r",
											"        pm,\r",
											"        fields: requestPayload.fields,\r",
											"        correlationId\r",
											"      });\r",
											"\r",
											"      // Se status válido envia clearing\r",
											"      if (transactionData && !IGNORED_STATUSES.includes(transactionData.status)) {\r",
											"        // limpando campos conforme original\r",
											"        requestPayload.fields.nsu = null;\r",
											"        requestPayload.fields.retrieval_reference_number = null;\r",
											"        requestPayload.fields.processing_code = \"20\"\r",
											"\r",
											"        console.log('Enviando clearing confirmation...');\r",
											"        const clearingResponse = await sendNetworkEvent({\r",
											"          pm,\r",
											"          correlationId,\r",
											"          destinationAddress:\r",
											"            'rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events',\r",
											"          messageNamespace:\r",
											"            'Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent',\r",
											"          mti: '1240',\r",
											"          conciliationType: 'UNDEFINED',\r",
											"          debitProgramCard,\r",
											"          authorizationCategory: authorizationCategory[3].description,\r",
											"          authorizationResponseCode: '00',\r",
											"          pan,\r",
											"          requestPayload,\r",
											"          exchangeName: 'authorizer.clearing.operational.confirmation.network.authorization.events',\r",
											"          caller: 'Mastercard',\r",
											"          custom_response_code: ''\r",
											"        });\r",
											"        console.log('Resposta recebida clearing confirmation:', clearingResponse);\r",
											"\r",
											"        await delay(10000);\r",
											"      } else {\r",
											"        console.log(\r",
											"          `Pulando clearing confirmation: status \"${\r",
											"            transactionData ? transactionData.status : 'indefinido'\r",
											"          }\" está na lista de ignorados.`\r",
											"        );\r",
											"      }\r",
											"\r",
											"      // Continuar com getTransaction para dados finais e validar Mambu\r",
											"      if (FLAGS.getTransactionEnabled) {\r",
											"        const transactionFinal = await getTransaction({\r",
											"          pm,\r",
											"          fields: requestPayload.fields,\r",
											"          correlationId\r",
											"        });\r",
											"\r",
											"        console.log('Resposta recebida GetTransaction(Judge):', {\r",
											"          authorizationCode: transactionFinal.transactionIdentifier.authorizationCode,\r",
											"          nsu: transactionFinal.transactionIdentifier.nsu,\r",
											"          panHash: transactionFinal.card.panHashProcessor,\r",
											"          transactionId: transactionFinal.transactionId,\r",
											"          transactionFunction: transactionFinal.transactionFunction,\r",
											"          status: transactionFinal.status,\r",
											"          proxy: transactionFinal.card.proxy\r",
											"        });\r",
											"\r",
											"        await delay(100000);\r",
											"\r",
											"        if (FLAGS.validateMambuEnabled) {\r",
											"          try {\r",
											"            const mambuResponse = await validateMambu({\r",
											"              pm,\r",
											"              proxy: transactionFinal.card.proxy,\r",
											"              authorizationId: transactionFinal.transactionId\r",
											"            });\r",
											"            if (mambuResponse) {\r",
											"              console.log('Resposta recebida Mambu:', {\r",
											"                currencyCode: mambuResponse.currencyCode,\r",
											"                amount: mambuResponse.amount,\r",
											"                externalReferenceId: mambuResponse.externalReferenceId,\r",
											"                status: mambuResponse.status,\r",
											"                creditDebitIndicator: mambuResponse.creditDebitIndicator\r",
											"              });\r",
											"            }\r",
											"          } catch (err) {\r",
											"            console.error('Erro na validação Mambu:', err);\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  } catch (error) {\r",
											"    console.error('Erro no fluxo principal:', error);\r",
											"  }\r",
											"}\r",
											"\r",
											"main();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.clear()",
											"",
											"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
											"// Converter strings de funções em funções executáveis",
											"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
											"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
											"const nsu = generateNsu(6);",
											"",
											"const authorizationCode = generateRandomString(5);",
											"pm.collectionVariables.set('authorizationCode', authorizationCode);",
											"pm.collectionVariables.set('nsuGlobal', nsu);",
											"const IntMaxValue = parseInt(\"2147483647\");",
											"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
											"pm.collectionVariables.set('authorizationId', authorizationId)",
											"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
											"const amount = _.random(1, 20);",
											"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
											"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
											"//pm.collectionVariables.set('randomAmount', 0);",
											"var uuid = require('uuid');",
											"pm.collectionVariables.set('randomId', uuid.v4());",
											"pm.collectionVariables.set('currency', '986'); // Real = 986; Dollar = 840",
											"pm.collectionVariables.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
											"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
											"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
											"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
											"pm.collectionVariables.set('mcc', '5311');",
											"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
											"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
											"pm.collectionVariables.set('walletId', '111');",
											"pm.collectionVariables.set('responseCode', '00');",
											"pm.collectionVariables.set('denialCode', '00');",
											"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
											"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
											"pm.collectionVariables.set('acquirerCode',728384008);",
											"pm.collectionVariables.set('accountIdDebit',45545454);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-correlation-id",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-pismo-sign",
										"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
										"type": "text"
									},
									{
										"key": "x-cid",
										"value": "testandoooo",
										"type": "text"
									},
									{
										"key": "bypass-validation",
										"value": "{{BypassValidationHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlJudge}}/transactions",
									"host": [
										"{{UrlJudge}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cancelation",
					"item": [
						{
							"name": "Cancelation DMC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"function delay(ms) {\r",
											"  return new Promise(resolve => setTimeout(resolve, ms));\r",
											"}\r",
											"\r",
											"const FLAGS = {\r",
											"  sendFirstNetworkEventEnabled: true,\r",
											"  sendClearingCancelationEnabled: true,\r",
											"  getTransactionEnabled: true,\r",
											"  validateMambuEnabled: true,\r",
											"};\r",
											"\r",
											"// Status que fazem o clearing ser ignorado (polling para pegar status diferente disso)\r",
											"const IGNORED_STATUSES = [\r",
											"  'DebitTransactionProcessedByProcessorWasReceived',\r",
											"  'TransactionHoldWasApproved'\r",
											"];\r",
											"\r",
											"const requestPayload = JSON.parse(pm.request.body.raw);\r",
											"console.log(requestPayload);\r",
											"\r",
											"const authorizationCategory = JSON.parse(pm.collectionVariables.get('authorizationCategory'));\r",
											"const pan = pm.collectionVariables.get('pan');\r",
											"const debitProgramCard = pm.globals.get('debitProgramId');\r",
											"\r",
											"const type = pm.globals.get('transactionType');\r",
											"const validateMambuBody = pm.collectionVariables.get('validateMambuFunction');\r",
											"const judgeFunction = pm.collectionVariables.get('findAuthorizationTransaction');\r",
											"const sendNetworkEventBody = pm.collectionVariables.get('sendNetworkEvent');\r",
											"\r",
											"const getTransaction = new Function('params', judgeFunction);\r",
											"const sendNetworkEvent = new Function('params', sendNetworkEventBody);\r",
											"const validateMambu = new Function('params', validateMambuBody);\r",
											"\r",
											"const correlationId = uuid.v4().toString();\r",
											"\r",
											"const response = JSON.parse(pm.response.stream.toString());\r",
											"const statusCode = pm.response.status;\r",
											"\r",
											"console.log('\\n|==================== DADOS REQUEST =====================================================|');\r",
											"console.log('| authorization_id:     ', pm.collectionVariables.get('authorizationId'));\r",
											"console.log('| Nsu:                  ', requestPayload.fields.nsu);\r",
											"console.log('| AuthorizationCode:    ', requestPayload.fields.authorization_code);\r",
											"console.log('| ProcessCardId:        ', requestPayload.fields.card_id);\r",
											"console.log('|=========================================================================================|\\n');\r",
											"\r",
											"// Polling que espera status diferente do ignorado para continuar\r",
											"async function pollGetTransaction(params, maxAttempts = 30, intervalMs = 2000) {\r",
											"  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r",
											"    try {\r",
											"      const transaction = await getTransaction(params);\r",
											"      const currentStatus = transaction?.status;\r",
											"      console.log(`Polling getTransaction, tentativa ${attempt}, status atual: ${currentStatus}`);\r",
											"\r",
											"      if (!IGNORED_STATUSES.includes(currentStatus)) {\r",
											"        return transaction;\r",
											"      }\r",
											"    } catch (error) {\r",
											"      console.warn(`Erro na tentativa ${attempt} de getTransaction:`, error);\r",
											"    }\r",
											"    await delay(intervalMs);\r",
											"  }\r",
											"  throw new Error(`Timeout: status da transação permaneceu nos ignorados após ${maxAttempts} tentativas.`);\r",
											"}\r",
											"\r",
											"async function main() {\r",
											"  if (!(response.approve === true || statusCode === 'OK')) {\r",
											"    console.log('Resposta não aprovada ou statusCode inesperado, abortando execução.');\r",
											"    return;\r",
											"  }\r",
											"\r",
											"  try {\r",
											"    if (FLAGS.sendFirstNetworkEventEnabled) {\r",
											"      console.log('Executando request do Rabbit: enviando primeiro evento...');\r",
											"      const firstEventResponse = await sendNetworkEvent({\r",
											"        pm,\r",
											"        correlationId,\r",
											"        destinationAddress:\r",
											"          'rabbitmq://localhost:0/Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent',\r",
											"        messageNamespace:\r",
											"          'Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent',\r",
											"        mti: '0100',\r",
											"        conciliationType: 'DUAL_MESSAGE',\r",
											"        authorizationCategory: authorizationCategory[1].description,\r",
											"        authorizationResponseCode: '00',\r",
											"        pan,\r",
											"        requestPayload,\r",
											"        exchangeName: 'pismo.authorization.events.judge.v2',\r",
											"        caller: 'Mastercard',\r",
											"        custom_response_code: ''\r",
											"      });\r",
											"      console.log('Resposta recebida:', firstEventResponse);\r",
											"\r",
											"      await delay(15000);\r",
											"    }\r",
											"\r",
											"    if (FLAGS.sendClearingCancelationEnabled) {\r",
											"      // Polling para aguardar status não ignorado antes de clearing\r",
											"      const transactionData = await pollGetTransaction({\r",
											"        pm,\r",
											"        fields: requestPayload.fields,\r",
											"        correlationId\r",
											"      });\r",
											"\r",
											"      // Se status válido envia clearing\r",
											"      if (transactionData && !IGNORED_STATUSES.includes(transactionData.status)) {\r",
											"        // limpando campos conforme original\r",
											"\r",
											"\r",
											"        console.log('Enviando clearing cancelation...');\r",
											"        const clearingResponse = await sendNetworkEvent({\r",
											"          pm,\r",
											"          correlationId,\r",
											"          destinationAddress:\r",
											"            'rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/authorizer.clearing.operational.confirmation.events',\r",
											"          messageNamespace:\r",
											"            'Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent',\r",
											"          mti: '1240',\r",
											"          conciliationType: 'UNDEFINED',\r",
											"          debitProgramCard,\r",
											"          authorizationCategory: authorizationCategory[2].description,\r",
											"          authorizationResponseCode: '00',\r",
											"          pan,\r",
											"          requestPayload,\r",
											"          exchangeName: 'authorizer.clearing.operational.confirmation.network.authorization.events',\r",
											"          caller: 'Mastercard',\r",
											"          custom_response_code: ''\r",
											"        });\r",
											"        console.log('Resposta recebida clearing confirmation:', clearingResponse);\r",
											"\r",
											"        await delay(10000);\r",
											"      } else {\r",
											"        console.log(\r",
											"          `Pulando clearing confirmation: status \"${\r",
											"            transactionData ? transactionData.status : 'indefinido'\r",
											"          }\" está na lista de ignorados.`\r",
											"        );\r",
											"      }\r",
											"\r",
											"      // Continuar com getTransaction para dados finais e validar Mambu\r",
											"      if (FLAGS.getTransactionEnabled) {\r",
											"        const transactionFinal = await getTransaction({\r",
											"          pm,\r",
											"          fields: requestPayload.fields,\r",
											"          correlationId\r",
											"        });\r",
											"\r",
											"        console.log('Resposta recebida GetTransaction(Judge):', {\r",
											"          authorizationCode: transactionFinal.transactionIdentifier.authorizationCode,\r",
											"          nsu: transactionFinal.transactionIdentifier.nsu,\r",
											"          panHash: transactionFinal.card.panHashProcessor,\r",
											"          transactionId: transactionFinal.transactionId,\r",
											"          transactionFunction: transactionFinal.transactionFunction,\r",
											"          status: transactionFinal.status,\r",
											"          proxy: transactionFinal.card.proxy\r",
											"        });\r",
											"\r",
											"        await delay(100000);\r",
											"\r",
											"        if (FLAGS.validateMambuEnabled) {\r",
											"          try {\r",
											"            const mambuResponse = await validateMambu({\r",
											"              pm,\r",
											"              proxy: transactionFinal.card.proxy,\r",
											"              authorizationId: transactionFinal.transactionId\r",
											"            });\r",
											"            if (mambuResponse) {\r",
											"              console.log('Resposta recebida Mambu:', {\r",
											"                currencyCode: mambuResponse.currencyCode,\r",
											"                amount: mambuResponse.amount,\r",
											"                externalReferenceId: mambuResponse.externalReferenceId,\r",
											"                status: mambuResponse.status,\r",
											"                creditDebitIndicator: mambuResponse.creditDebitIndicator\r",
											"              });\r",
											"            }\r",
											"          } catch (err) {\r",
											"            console.error('Erro na validação Mambu:', err);\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  } catch (error) {\r",
											"    console.error('Erro no fluxo principal:', error);\r",
											"  }\r",
											"}\r",
											"\r",
											"main();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.clear()",
											"",
											"const helpers = JSON.parse(pm.collectionVariables.get(\"postmanUtils\"));",
											"// Converter strings de funções em funções executáveis",
											"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
											"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
											"const nsu = generateNsu(6);",
											"",
											"const authorizationCode = generateRandomString(5);",
											"pm.collectionVariables.set('authorizationCode', authorizationCode);",
											"pm.collectionVariables.set('nsuGlobal', nsu);",
											"const IntMaxValue = parseInt(\"2147483647\");",
											"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
											"pm.collectionVariables.set('authorizationId', authorizationId)",
											"pm.collectionVariables.set('timestampUtcIso8601', (new Date()).toISOString());",
											"const amount = _.random(1, 20);",
											"pm.collectionVariables.set('randomAmount', amount); // amount da transação",
											"pm.collectionVariables.set('replacementAmount', amount); // amount que será usado na reversão parcial",
											"//pm.collectionVariables.set('randomAmount', 0);",
											"var uuid = require('uuid');",
											"pm.collectionVariables.set('randomId', uuid.v4());",
											"pm.collectionVariables.set('currency', '986'); // Real = 986; Dollar = 840",
											"pm.collectionVariables.set('contryCode', 'BRA'); // Brasil = BRA; Luxemburgo = LUX",
											"pm.collectionVariables.set('transactionType', '00'); // 00 = purchase; 01 = Withdraw",
											"pm.collectionVariables.set('merchantName', 'Mercadinho Japones'); // TESTE é sempre aprovado pelo xnine, TESTE_NEGAR_POR_RISCO reprovado.",
											"pm.collectionVariables.set('entryMode', '05'); // Consultar Costumer Interface Especification",
											"pm.collectionVariables.set('mcc', '5311');",
											"pm.collectionVariables.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
											"pm.collectionVariables.set('posTransactionStatus', '0'); // 0 = Normal request; 1 = Deferred Authorization; 2 = Identity Check Phone Order; 3 = ATM Installment Inquiry; 4 = Preauthorized request; 5 = Time Based Payment Authorization Request—Brazil domestic transactions; 6 = ATC Update; 8 = Account Status Inquiry Service (ASI); 9 = Tokenization Request/Notification",
											"pm.collectionVariables.set('walletId', '111');",
											"pm.collectionVariables.set('responseCode', '00');",
											"pm.collectionVariables.set('denialCode', '00');",
											"pm.collectionVariables.set('eletronicSecurityLevel', '210');",
											"//pm.collectionVariables.set('processorCardId', 71208946);  //38458857, 7133380 6791315 vem no request",
											"pm.collectionVariables.set('acquirerCode',728384008);",
											"pm.collectionVariables.set('accountIdDebit',45545454);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-correlation-id",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-pismo-sign",
										"value": "eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw",
										"type": "text"
									},
									{
										"key": "x-cid",
										"value": "testandoooo",
										"type": "text"
									},
									{
										"key": "bypass-validation",
										"value": "{{BypassValidationHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{authorizationId}},\r\n    \"entity\": \"transaction\",\r\n    \"fields\": {\r\n        \"mti\": \"0100\",\r\n        \"card_expiration_date\": \"{{expirationDate}}\",\r\n        \"card_id\": 7133380,\r\n        \"account_id\": {{accountIdDebit}},\r\n        \"amount_transaction\": {{randomAmount}},\r\n        \"amount_local\": {{randomAmount}},\r\n        \"amount_settlement\": {{randomAmount}},\r\n        \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n        \"processing_code\": \"000000\",\r\n        \"transaction_type\": \"{{transactionType}}\",\r\n        \"nsu\": {{nsuGlobal}},\r\n        \"retrieval_reference_number\": {{nsuGlobal}},\r\n        \"authorization_code\": \"{{authorizationCode}}\",\r\n        \"response_code\": \"{{responseCode}}\",\r\n        \"denial_code\": \"{{denialCode}}\",\r\n        \"payment_card_brand\": \"Visa\",\r\n        \"currency\": \"{{currency}}\",\r\n        \"merchant_id_code\": \"963852CARDACC  \",\r\n        \"merchant_name\": \"{{merchantName}} stg master - R\",\r\n        \"merchant_city\": \"TESTE         \",\r\n        \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n        \"merchant_terminal_id\": \"1234ABCD\",\r\n        \"atc_chip\": \"\",\r\n        \"atc_database\": \"\",\r\n        \"cvv_data\": \"\",\r\n        \"entry_mode\": \"{{entryMode}}\",\r\n        \"mcc\": \"{{mcc}}\",\r\n        \"card_type\": \"PLASTIC\",\r\n        \"country_code\": \"\",\r\n        \"chip_validation\": true,\r\n        \"postal_code\": \"6338500000\",\r\n        \"chip_cryptogram_information_data\": \"\",\r\n        \"chip_transaction_date\": \"\",\r\n        \"chip_transaction_type\": \"\",\r\n        \"chip_amount_authorized\": \"\",\r\n        \"chip_transaction_currency_code\": \"\",\r\n        \"chip_application_interchange_profile\": \"\",\r\n        \"chip_terminal_country_code\": \"\",\r\n        \"chip_cardholder_verification_method\": \"\",\r\n        \"chip_terminal_capabilities\": \"\",\r\n        \"chip_amount_other\": \"\",\r\n        \"chip_application_transaction_counter\": \"\",\r\n        \"cardholder_postal_code\": \"\",\r\n        \"terminal_capability\": \"1\",\r\n        \"tvr\": \"\",\r\n        \"cvr\": \"\",\r\n        \"number_of_installments\": 1,\r\n        \"network_score\": 0,\r\n        \"pos_postal_code\": \"6338500000\",\r\n        \"acquirer_code\": \"{{acquirerCode}}\",\r\n        \"financial_network_code\": \"MC0\",\r\n        \"banknet_reference_number\": \"000030639\",\r\n         \"original_network_data\": {{originalNetworkData}},\r\n        \"cvv_presence\": false,\r\n        \"password_present\": true,\r\n        \"account_type\": \"20\",\r\n        \"validation_results\": [\r\n            {\r\n                \"name\": \"CURRENCY\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CURRENCY_ALLOWED\",\r\n                \"description\": \"Currency allowed\"\r\n            },\r\n            {\r\n                \"name\": \"ARQC\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CRYPTOGRAM\",\r\n                \"description\": \"No cryptogram present\"\r\n            },\r\n            {\r\n                \"name\": \"CVM\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"PIN_AND_CVV_VALID\",\r\n                \"description\": \"Pin and CVV are valid\"\r\n            },\r\n            {\r\n                \"name\": \"ENTRY_MODE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ENTRY_MODE_VALID\",\r\n                \"description\": \"Entry mode valid\"\r\n            },\r\n            {\r\n                \"name\": \"CHIP_SIGNATURE\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                \"description\": \"No chip signature present\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_TOKEN_STATUS\",\r\n                \"status\": \"SKIPPED\",\r\n                \"reason\": \"SKIPPED\",\r\n                \"description\": \"Validation not executed\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXISTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_FOUND\",\r\n                \"description\": \"Card exists.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_ATC\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_ATC_VALID\",\r\n                \"description\": \"Received null but the last is null. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\"\r\n            },\r\n            {\r\n                \"name\": \"CONTACTLESS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CONTACTLESS_ENABLED\",\r\n                \"description\": \"Contactless enabled.\"\r\n            },\r\n            {\r\n                \"name\": \"ACCOUNT_TYPE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                \"description\": \"Account Type: CHECKING_ACCOUNT. Card Mode: DEBIT.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_NOT_EXPIRED\",\r\n                \"description\": \"Card not expired.\",\r\n                \"additional_data\": {\r\n                    \"expiration_date\": \"2031-01-31\"\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                \"description\": \"Card inputted expiration date is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_VALID_UNTIL\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                \"description\": \"Card is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"CARD_STATUS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_STATUS_VALID\",\r\n                \"description\": \"Card status: NORMAL.\"\r\n            },\r\n            {\r\n                \"name\": \"PASSWORD_ATTEMPTS\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                \"description\": \"Password tries is valid.\"\r\n            },\r\n            {\r\n                \"name\": \"LEDGER\",\r\n                \"status\": \"APPROVED\",\r\n                \"reason\": \"LEDGER_APPROVED\",\r\n                \"description\": \"Ledger validations approved.\",\r\n                \"additional_data\": {\r\n                    \"available_credit_limit\": 2637.17,\r\n                    \"total_credit_limit\": 4000,\r\n                    \"max_credit_limit\": 4000\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlJudge}}/transactions",
									"host": [
										"{{UrlJudge}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEzY2VlZWViMWEwNjU1Nzg4Y2UyMDg0ZmZmY2FkMDJmNTFmYzMxNDAiLCJ0eXAiOiJKV1QifQ.eyJwYW4taGFzaCI6IkJQYmJWdnJWRHkvZHhmdDd3d1RaYUN1R0M1a2M0My9FSXdEaWh0cGpqMzFyUzNiRU1rbW80VzUxSlV3RGR1WkFabWR3MXpraG81NVIzdEZ1ZEVWNCtRPT0iLCJhY2NvdW50LWlkIjoiMTMzNDM4MjI5IiwiYm9keS1oYXNoIjoiV28xWEo5MWt4TlppM0d1bDlPdVRFOWF5MlZya1BvWlp1UXdUbXpDQnBuaz0iLCJpc3MiOiJhcGkucGlzbW8uaW8iLCJzdWIiOiJhdXRob3JpemF0aW9uIiwiZXhwIjoxNzAxNDM1ODQ4LCJpYXQiOjE3MDA1NzE4NDh9.XHw7x6ZXHaOB1R9doh69-SMwM4z4elLklJtySjYoRJ5QFewrn-1HOAVAdDgzSxQ8mqOJ9A6Y6bm0YbeUJrqZTi0weyNXAVi_sIDZK3ecDvDS_csJAhSigbDB-6LbFhJKIfRyTbH6UrLgs81_DNexd810dYDB-_Hdr4HEFJaqFIPLX8wNgt3pqSiRYQ0AJY553zDZec04sB4sudT7_FU5Jn6TyfyAUzZQdfYqk7MNubyIrxxVUoSmxwM5oaXhbr19Lv7cAkYUb46TmQ7uBCRlN3lsjavc69u0mZG6vEa6QKf9cgRUSxjdzh0F4Lau2BE_wMIrRPit_HgxQgE-gUC4-g",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Pos",
			"item": [
				{
					"name": "Autorizacao",
					"item": [
						{
							"name": "1- Antifraude(http/async)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Importações e funções auxiliares",
											"const uuid = require('uuid');",
											"const helpers = JSON.parse(pm.globals.get(\"postmanUtils\"));",
											"// Funções geradoras a partir do helpers",
											"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
											"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
											"",
											"// Valores gerados dinamicamente",
											"const idGeral = uuid.v4();",
											"const nsu = generateNsu(6);",
											"const authorizationCode = generateRandomString(5);",
											"const IntMaxValue = parseInt(\"2147483647\");",
											"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
											"const amount = _.random(1, 20);",
											"const timestampUtcIso8601 = (new Date()).toISOString();",
											"",
											"// Definição das variáveis globais organizadas por seção",
											"",
											"// IDs e códigos",
											"    pm.globals.set('correlationId', idGeral);",
											"    pm.globals.set('randomId', uuid.v4());",
											"    pm.collectionVariables.set('nsuGlobal', nsu);",
											"    pm.collectionVariables.set('authorizationCode', authorizationCode);",
											"    pm.globals.set('authorizationId', authorizationId);",
											"",
											"// Timestamp",
											"    pm.globals.set('timestampUtcIso8601', timestampUtcIso8601);",
											"",
											"// Valores de transação",
											"    pm.globals.set('randomAmount', amount);           // amount da transação",
											"    pm.globals.set('replacementAmount', amount);      // amount usado na reversão parcial",
											"",
											"// Moeda e localização",
											"    pm.globals.set('currency', '840');                 // Real = 986; Dollar = 840",
											"    pm.globals.set('contryCode', 'USA');               // Brasil = BRA; Luxemburgo = LUX",
											"",
											"// Tipo de transação e merchant",
											"    pm.globals.set('transactionType', '00');           // 00 = purchase; 01 = Withdraw",
											"    pm.globals.set('merchantName', 'Mercadinho Japones'); // TESTE = aprovado, TESTE_NEGAR_POR_RISCO = reprovado",
											"",
											"// Modo de entrada e MCC",
											"    pm.globals.set('entryMode', '05');                  // Consultar Customer Interface Specification",
											"    pm.globals.set('mcc', '5311');",
											"",
											"// Cartão e segurança",
											"    pm.globals.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
											"    pm.globals.set('eletronicSecurityLevel', '210');",
											"",
											"// Status da transação no POS",
											"    pm.globals.set('posTransactionStatus', '0');       // 0=Normal; 1=Deferred Auth; ... ; 9=Tokenization Request/Notification",
											"",
											"// Carteira digital e códigos de resposta",
											"    pm.globals.set('walletId', '111');",
											"    pm.globals.set('responseCode', '00');               // 00 = sucesso",
											"    pm.globals.set('denialCode', '00');",
											"",
											"// Contas e adquirente",
											"    pm.globals.set('accountIdDebit', 102509621);",
											"    pm.globals.set('acquirerCode', 728384008);",
											"",
											"",
											"// -- Variáveis da primeira lista que não tem equivalente no segundo script --",
											"// Com valores baseados no primeiro exemplo e comentados (ajuste se necessário)",
											"    pm.globals.set('processorCardId', 89640330);    // Exemplo do primeiro script",
											"    pm.globals.set('accountId', 103197472);         // Exemplo do primeiro script",
											"    pm.globals.set('customerId', 103194628);        // Exemplo do primeiro script",
											"    pm.globals.set('pan', \"o1C6dlN9ltOi5a3CBE4ipWCamyt23ci0uEIcGUgGp0oZIcBLimsP3RVRez/aoCTBAkB37vf7i7XQSXSm4szK4A==\");",
											"    pm.globals.set('numberOfInstallments', 3);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Importa UUID para geração de IDs únicos\r",
											"    var uuid = require('uuid');\r",
											"\r",
											"// Parse do payload da requisição\r",
											"    const requestPayload = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Recupera variáveis globais e de coleção necessárias\r",
											"    const type = postman.getGlobalVariable('transactionType');\r",
											"    const mambuUtils = JSON.parse(pm.collectionVariables.get(\"mambuUtils\"));\r",
											"    const validateMambu = new Function('return ' + mambuUtils.ValidateIfTransactionDMCWasHoldOnMambu)();\r",
											"    const judgeFunction = JSON.parse(pm.collectionVariables.get('judgeUtils'));\r",
											"    const getTransaction = new Function('return ' + judgeFunction.findAuthorizationTransaction)();\r",
											"\r",
											"// Geração de correlationId único para rastreamento da transação\r",
											"    const correlationId = uuid.v4().toString();\r",
											"\r",
											"// Variáveis globais de suporte\r",
											"    const pan = pm.globals.get('pan');\r",
											"    //var debitProgramCard = pm.globals.get('debitProgramId');\r",
											"\r",
											"// logs request\r",
											"    console.log(\"\\n|==================== DADOS REQUEST =====================================================|\");\r",
											"    console.log(\"| authorization_id:     \", pm.collectionVariables.get('authorizationId'));\r",
											"    console.log(\"| Nsu:                  \", requestPayload.fields.nsu);\r",
											"    console.log(\"| AuthorizationCode:    \", requestPayload.fields.authorization_code);\r",
											"    console.log(\"| ProcessCardId:        \", requestPayload.fields.card_id);\r",
											"    console.log(\"|=========================================================================================|\\n\");\r",
											"\r",
											"\r",
											"   // console.log('Debit Program Card:', debitProgramCard);\r",
											"\r",
											"// Parse da resposta para análise de aprovação\r",
											"    const response = JSON.parse(pm.response.stream.toString());\r",
											"    const statusCode = pm.response.status;\r",
											"\r",
											"\r",
											"// Caso resposta aprovativa, aguarda e executa a função de pós-autorização assincrona\r",
											"    if(response.approve === true || statusCode === \"OK\")\r",
											"    {        setTimeout(() => {\r",
											"            console.log(\"Executando envio pós-autorização após atraso de 2 segundos...\");\r",
											"            sendPosAuthorizationAsync();\r",
											"        }, 20000);\r",
											"    }\r",
											"\r",
											"/**\r",
											" * Função responsável por preparar e enviar o evento de autorização\r",
											" * para o serviço RabbitMQ, formatando o payload conforme padrão ISO 8583\r",
											" * com os campos necessários para o processamento downstream.\r",
											" */\r",
											"    function sendPosAuthorizationAsync() {\r",
											"    // Extração de dados do requestPayload para uso no evento\r",
											"        const authorizationId = requestPayload.id;\r",
											"        const randomAmount = requestPayload.fields.amount_transaction;\r",
											"        const cardId = requestPayload.fields.card_id;\r",
											"        const nsuGlobal = requestPayload.fields.nsu;\r",
											"        const authorizationCode = requestPayload.fields.authorization_code;\r",
											"        const merchantName = requestPayload.fields.merchant_name;\r",
											"        const contryCode = requestPayload.fields.merchant_state_or_country_code;\r",
											"        const currency = requestPayload.fields.currency;\r",
											"        const accountId = requestPayload.fields.account_id;\r",
											"        const acquirerCode = requestPayload.fields.acquirer_code;\r",
											"        const authorizationCategory = \"AUTHORIZATION\"; // 1 = autorizado, 4 = negado\r",
											"        const authorizationResponseCode = \"00\"; // 00 = aprovado, 51 = negado\r",
											"\r",
											"    // Credenciais básicas para autenticação no serviço\r",
											"        const login = 'dev';\r",
											"        const senha = 'R_u!7cy*2-BLpVQLkV!9';\r",
											"        const credentials = btoa(`${login}:${senha}`);   \r",
											"    \r",
											"    // Gerando ID e timestamp únicos para o evento\r",
											"        const networkAuthorizationEventId = uuid.v4();\r",
											"        const networkAuthorizationEventDate = (new Date()).toISOString();\r",
											"\r",
											"    // Buscando customerId do escopo global com fallback numérico\r",
											"        const customerId = pm.globals.get('customerId', 103194628);\r",
											"\r",
											"    // Alias para NSU (Número Sequencial Único)\r",
											"        const nsu = nsuGlobal;\r",
											"\r",
											"    // Recupera o Payload base de configuração para eventos Rabbit\r",
											"        const basePayload = pm.collectionVariables.get(\"rabbitPayload\");\r",
											"        let networkEventBody = JSON.parse(basePayload);\r",
											"\r",
											"    // === Atualização Campos Principais do Evento segundo ISO 8583 ===\r",
											"        networkEventBody.destinationAddress = \"rabbitmq://b-883c7458-b83c-4761-8b23-714f3dc3a84c.mq.us-east-1.amazonaws.com:5671/pismo.authorization.events.judge.v2\";\r",
											"        networkEventBody.message.event_id = correlationId;\r",
											"        networkEventBody.message.timestamp = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.org_id = \"TN-\" + authorizationId;\r",
											"        networkEventBody.message.cid = authorizationId;\r",
											"        networkEventBody.correlationId = authorizationId;\r",
											"        networkEventBody.message.Id = correlationId;\r",
											"\r",
											"    // === Dados específicos para transações DMC (Dual Message Capture) ===\r",
											"        networkEventBody.message.data.processing_code = \"003100\";\r",
											"        networkEventBody.message.data.mti = \"0100\";\r",
											"        networkEventBody.message.data.conciliation_type = \"UNDEFINED\"; // SINGLE_MESSAGE, DUAL_MESSAGE ou UNDEFINED\r",
											"        networkEventBody.message.data.authorization_response_code = \"00\";\r",
											"\r",
											"    // === Reforço da atualização de campos do cabeçalho message ===\r",
											"        networkEventBody.message.event_id = authorizationId;\r",
											"        networkEventBody.message.timestamp = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.org_id = \"TN-\" + authorizationId;\r",
											"        networkEventBody.message.cid = authorizationId;\r",
											"\r",
											"    // === Dados de autorização e identificação correlacionada ===\r",
											"        networkEventBody.message.data.authorization_category = authorizationCategory;\r",
											"        networkEventBody.message.data.org_id = \"TN-\" + authorizationId;\r",
											"        networkEventBody.message.data.cid = authorizationId;\r",
											"        networkEventBody.message.data.unique_cid = authorizationId;\r",
											"\r",
											"    // === Datas e horas do evento (UTC) ===\r",
											"        networkEventBody.message.data.event_date_hour = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.data.event_date_hour_utc = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.data.authorization_date_hour = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.data.original_authorization_date_hour = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.data.original_event_date_hour_utc = networkAuthorizationEventDate;\r",
											"\r",
											"    // === Dados financeiros e de contas ===\r",
											"        networkEventBody.message.data.account_id = accountId;\r",
											"        networkEventBody.message.data.card_id = cardId;\r",
											"        networkEventBody.message.data.authorization_id = authorizationId;\r",
											"        networkEventBody.message.data.customer_id = customerId;\r",
											"        networkEventBody.message.data.principal_amount = randomAmount;\r",
											"        networkEventBody.message.data.contract_amount = randomAmount;\r",
											"        networkEventBody.message.data.installment_amount = randomAmount;\r",
											"\r",
											"    // === Dados de cartão e código de autorização ===\r",
											"        networkEventBody.message.data.pan = pan;\r",
											"        networkEventBody.message.data.nsu = nsu;\r",
											"        networkEventBody.message.data.retrieval_reference_number = nsu;\r",
											"        networkEventBody.message.data.authorization_code = authorizationCode;\r",
											"        networkEventBody.message.data.authorization_response_code = authorizationResponseCode;\r",
											"\r",
											"    // === Dados de moeda ===\r",
											"        networkEventBody.message.data.local_currency_code = currency;\r",
											"        networkEventBody.message.data.cardholder_currency_code = currency;\r",
											"\r",
											"    // === Dados do merchant e adquirente ===\r",
											"        networkEventBody.message.data.merchant_name = merchantName;\r",
											"        networkEventBody.message.data.acquirer_bin = acquirerCode;\r",
											"        networkEventBody.message.data.merchant_state_or_country = contryCode;\r",
											"\r",
											"    // === Identificadores principais ===\r",
											"        networkEventBody.message.Id = authorizationId;\r",
											"        networkEventBody.correlationId = correlationId;\r",
											"        networkEventBody.event_id = authorizationId;\r",
											"\r",
											"    // === (Opcional) Program ID, descomentado se necessário ===\r",
											"        // networkEventBody.message.data.program_id = debitProgramCard;\r",
											"\r",
											"    // Monta o body da requisição para envio via RabbitMQ\r",
											"        var requestBody = {\r",
											"            \"properties\": {\r",
											"                \"content-type\": \"application/vnd.masstransit+json\"\r",
											"            },\r",
											"            \"routing_key\": \"\",\r",
											"            \"payload\": JSON.stringify(networkEventBody),\r",
											"            \"payload_encoding\": \"string\"\r",
											"        }    \r",
											"\r",
											"    // Recupera a URL do RabbitMQ do ambiente\r",
											"        var currentRabbitUrl = pm.environment.get('UrlRabbit');\r",
											"        console.log('URL RabbitMQ:', currentRabbitUrl);\r",
											"\r",
											"    // Cria a URL do endpoint para envio do evento\r",
											"        const url = currentRabbitUrl + '/api/exchanges/%2F/pismo.authorization.events.judge.v2/publish';\r",
											"\r",
											"    // Define headers com Content-Type e Autorização básica\r",
											"        const envName = pm.environment.name;\r",
											"        const headers = {\r",
											"            'Content-Type': 'application/vnd.masstransit+json',\r",
											"            'Authorization': 'Basic Z3Vlc3Q6Z3Vlc3Q=' // guest:guest padrão\r",
											"        };\r",
											"        if (envName !== \"Local\") {\r",
											"            headers['Authorization'] = `Basic ${credentials}`; // utilizado em ambientes não locais\r",
											"        }\r",
											"\r",
											"    // Envio da requisição para RabbitMQ\r",
											"        pm.sendRequest({\r",
											"            url: url,\r",
											"            method: 'POST',\r",
											"            header: headers,\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(requestBody)\r",
											"            }\r",
											"        }, (err, response) => {\r",
											"            if (err) {\r",
											"                console.log(\"Erro ao enviar a requisição:\", err);\r",
											"            } else {\r",
											"                console.log(\"Resposta recebida:\", response.stream.toString());\r",
											"\r",
											"            // Aguardar 30 segundos para processamento anterior\r",
											"                setTimeout(() => {\r",
											"                    getTransaction(pm, correlationId, authorizationCode, nsu, nsu);\r",
											"\r",
											"                // Aguardar 50 segundos para requisição e validação Mambu\r",
											"                    setTimeout(() => {\r",
											"                        console.log(\"Iniciando requisição para Mambu...\");\r",
											"\r",
											"                        const transactionData = JSON.parse(pm.collectionVariables.get('lastProcessedTransactionData'));\r",
											"\r",
											"                        validateMambu(pm, true, transactionData.Card.Proxy, transactionData.Id);\r",
											"\r",
											"                    // Aguarda 2 segundos e loga respostas do Mambu\r",
											"                        setTimeout(() => {\r",
											"                            const mambuResponse = JSON.parse(pm.collectionVariables.get('lastMambuResponse'));\r",
											"                            console.log(\"Resposta Mambu:\", mambuResponse);\r",
											"                        }, 2000);\r",
											"\r",
											"                    }, 50000);\r",
											"                }, 30000);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-correlation-id",
										"value": "{{correlationId}}",
										"type": "text"
									},
									{
										"key": "x-pismo-sign",
										"value": "eyJraWQiOiI3MjYyYTYwMjhlNTFkYmJkMTJkMWY0OGFmNGJkNmM0NDAwNDIzYWQzIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJ4bU94V1J2RUNSUStydVdZR1lcL1wvamxpZ2lUSVUzQjBMaGE5cldtNmNwaXc9Iiwic3ViIjoiYXV0aG9yaXphdGlvbiIsImFjY291bnQtaWQiOjMwNTQwLCJpc3MiOiJhcGkucGlzbW8uaW8iLCJleHAiOjE1NzM2OTY4MDAsImlhdCI6MTU3MjgzMjgwMCwicGFuLWhhc2giOiJURVNURS1qY01rNzNnRjlnbE1vdWtTOWRaVHBudko3clN5SkUwcTRIR3NGSEdSMkVZQzBSTWlBRFRwbGVrbkhEdEhSbWdXV3djTFlaZVpVNmRtakN4VmVHT0VpZz09In0.QOiulHmVaxUzmyK9hWTKelXQ63PCtZG4hzwG1-pIOIOmPUWPvO9WRxGWui2Z2hIDeOD3nK4feKHqHiFRVBjUDh7MIpUkOOxowDieYC9niZ3RFVK9okoXi0DWXDiaZEXd4fGbGFE6CQrAET1kDU3j__QDR1pkIjOv7hQJbT8n2JhSlVKhPi2KST_cIMcwZMzzf8xjbVqFVbje17t0GwrDKotTIAo-Ta8_wr_CLtnTQ3RCaqEy5Z6J6kF3xv4-ENsD83qAOzgaiZ8q1iY7rSHIWdxXTFhgC760GTgi9asmDFc2Ky8FNxFW5qpNFefO14nEaKdXzd_JHYu21YebFWro7A",
										"type": "text"
									},
									{
										"key": "x-cid",
										"value": "{{randomId}}",
										"type": "text"
									},
									{
										"key": "bypass-validation",
										"value": "{{BypassValidationHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{authorizationId}}\",\r\n  \"entity\": \"transaction\",\r\n  \"fields\": {\r\n    \"mti\": \"0100\",\r\n    \"card_id\": {{processorCardId}},\r\n    \"account_id\": \"{{accountId}}\",//5690506,\r\n    \"card_expiration_date\": \"{{expirationDate}}\",\r\n    \"amount_transaction\": {{randomAmount}},\r\n    \"amount_local\": {{randomAmount}},\r\n    \"amount_settlement\": {{randomAmount}},\r\n    \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n    \"processing_code\": \"{{transactionType}}3100\",\r\n    \"transaction_type\": \"{{transactionType}}\",\r\n    \"nsu\": \"{{nsuGlobal}}\",\r\n    \"retrieval_reference_number\": \"{{nsuGlobal}}\",\r\n    \"authorization_code\": \"{{authorizationCode}}\",\r\n    \"response_code\": \"{{responseCode}}\",\r\n    \"denial_code\": \"{{denialCode}}\",\r\n    \"payment_card_brand\": \"Mastercard\",\r\n    \"currency\": \"{{currency}}\",\r\n    \"merchant_id_code\": \"63215248       \",\r\n    \"merchant_name\": \"{{merchantName}}\",\r\n    \"merchant_city\": \"Luxemburg     \",\r\n    \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n    \"merchant_terminal_id\": \"62683744\",\r\n    \"atc_chip\": \"\",\r\n    \"atc_database\": \"\",\r\n    \"cvv_data\": \"CVV_PRESENT\",\r\n    \"entry_mode\": \"{{entryMode}}\",\r\n    \"mcc\": \"{{mcc}}\",\r\n    \"card_type\": \"RECURRING\",\r\n    \"country_code\": \"\",\r\n    \"chip_validation\": true,\r\n    \"postal_code\": \"1528      \",\r\n    \"chip_cryptogram_information_data\": \"\",\r\n    \"chip_transaction_date\": \"\",\r\n    \"chip_transaction_type\": \"\",\r\n    \"chip_amount_authorized\": \"\",\r\n    \"chip_transaction_currency_code\": \"\",\r\n    \"chip_application_interchange_profile\": \"\",\r\n    \"chip_terminal_country_code\": \"\",\r\n    \"chip_cardholder_verification_method\": \"\",\r\n    \"chip_terminal_capabilities\": \"\",\r\n    \"chip_amount_other\": \"\",\r\n    \"chip_application_transaction_counter\": \"\",\r\n    \"cardholder_postal_code\": \"\",\r\n    \"terminal_capability\": \"0\",\r\n    \"tvr\": \"\",\r\n    \"cvr\": \"\",\r\n    \"number_of_installments\": {{numberOfInstallments}},\r\n    \"network_score\": 0,\r\n    \"pos_postal_code\": \"1528      \",\r\n    \"acquirer_code\": \"006219\",\r\n    \"financial_network_code\": \"MRG\",\r\n    \"banknet_reference_number\": \"35UH3T\",\r\n    \"password_present\": true,\r\n    \"original_network_data\": {\r\n      \"de3_processing_code\": {\r\n        \"sf1_cardholder_transaction_type_code\": \"{{transactionType}}\",\r\n        \"sf2_cardholder_from_account_type_code\": \"00\",\r\n        \"sf3_cardholder_to_account_type_code\": \"00\"\r\n      },\r\n      \"de4_amount_transaction\": \"000000000001\",\r\n      \"de5_amount_settlement\": \"000000000001\",\r\n      \"de6_amount_cardholder_billing\": \"000000000005\",\r\n      \"de7_tranmission_date_and_time\": {\r\n        \"sf1_date\": \"0502\",\r\n        \"sf2_time\": \"035329\"\r\n      },\r\n      \"de9_conversion_rate_settlement\": {\r\n        \"sf1_decimal_indicator\": \"6\",\r\n        \"sf2_conversion_rate\": \"1000000\"\r\n      },\r\n      \"de10_conversion_rate_cardholder_billing\": {\r\n        \"sf1_decimal_indicator\": \"6\",\r\n        \"sf2_cardholderbilling_conversion_rate\": \"5000000\"\r\n      },\r\n      \"de11_stan\": \"757868\",\r\n      \"de12_time_local_transaction\": \"035329\",\r\n      \"de13_date_local_transaction\": \"0502\",\r\n      \"de14_date_expiration\": \"2704\",\r\n      \"de15_date_settlement\": \"0501\",\r\n      \"de16_date_conversion\": \"0501\",\r\n      \"de18_merchant_type\": \"5311\",\r\n      \"de22_pos_entry_mode\": {\r\n        \"sf1_pos_terminal_pan_entry_mode\": \"81\",\r\n        \"sf2_pos_terminal_pin_entry_mode\": \"0\"\r\n      },\r\n      \"de28_amount_transaction_fee\": {},\r\n      \"de29_amount_settlement_fee\": {},\r\n      \"de30_amount_transaction_processing_fee\": {},\r\n      \"de31_amount_settlement_processing_fee\": {},\r\n      \"de32_acquiring_institution_id_code\": \"006219\",\r\n      \"de33_forwarding_institution_id_code\": \"200512\",\r\n      \"de37_retrieval_reference_number\": {\r\n        \"sf1_transaction_date_and_initiator_discretionary_data\": \"2122037\",\r\n        \"sf2_terminal_transaction_number\": \"57868\"\r\n      },\r\n      \"de41_card_acceptor_terminal_id\": \"62683744\",\r\n      \"de42_card_acceptor_id_code\": \"63215248       \",\r\n      \"de43_card_acceptor_name_location_for_all_transactions\": {\r\n        \"sf1_card_acceptor_name\": \"{{merchantName}}\",\r\n        \"sf3_card_acceptor_city\": \"Luxemburg     \",\r\n        \"sf5_card_acceptor_state_or_country_code\": \"{{contryCode}}\"\r\n      },\r\n      \"de48_additional_data_private_user\": {\r\n        \"de48_tcc\": \"T\",\r\n        \"de48_start\": \"232\",\r\n        \"de48_size\": \"034\",\r\n        \"de48SubElements\": [\r\n          \"42\",\r\n          \"61\",\r\n          \"66\",\r\n          \"82\",\r\n          \"92\"\r\n        ],\r\n        \"se11_key_exchange_block_data\": {},\r\n        \"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r\n        \"se15_authorization_system_advice_date_and_time\": {},\r\n        \"se18_service_parameters\": {},\r\n        \"se23_payment_initiation_channel\": {},\r\n        \"se25_mastercard_cash_program_data\": {},\r\n        \"se26_wallet_program_data\": {\r\n            \"sf1_wallet_identifier\": \"{{walletId}}\"\r\n        },\r\n        \"se33_pan_mapping_file_information\": {},\r\n        \"se34_atc_information\": {},\r\n        \"se36_visa_mmv\": {},\r\n        \"se37_additional_merchant_data\": {},\r\n        \"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r\n        \"se41_eletronic_commercer_certificate_qualifying_information\": {},\r\n        \"se42_eletronic_commerce_indicator\": {\r\n          \"sf1_eletronic_commerce_security_level_indicator_ucaf_collection_indicator\": {{eletronicSecurityLevel}}\r\n        },\r\n        \"se43_ucaf\": \r\n        {\r\n            \"sf1_ucaf\": \"Teste\" //ThreeDSecureForMastercardSecureCode\r\n        },\r\n        \"se48_mobile_program_indicator\": {},\r\n        \"se49_time_validation_information\": {},\r\n        \"se51_merchant_on_behalf_services\": {},\r\n        \"se55_merchant_fraud_scoring_data\": {},\r\n        \"se57_security_services_additional_data_for_acquirers\": {},\r\n        \"se58_atm_additional_data\": {},\r\n        \"se61_pos_data_extended_condition_codes\": {\r\n          \"sf1_partial_approval_terminal_support_indicator\": \"0\",\r\n          \"sf2_purchase_amount_only_terminal_support_indicator\": \"0\",\r\n          \"sf3_realtime_substantiation_indicator\": \"0\",\r\n          \"sf4_merchant_transaction_fraud_scoring_indicator\": \"0\",\r\n          \"sf5_final_authorization_indicator\": \"1\"\r\n        },\r\n        \"se64_transit_program\": {},\r\n        \"se65_terminal_compliant_indicator\": {},\r\n         \"se66_authentication_data\": {\r\n            \"sf1_program_protocol\": \"2\", // ProgramProtocol\r\n            \"sf2_directory_server_transaction_id\": \"{{randomId}}\" //DSTransId\r\n         },\r\n        \"se67_money_send_information\": {},\r\n         \"se71_onbehalf_services\": [\r\n                    {\r\n                        \"sf1_ob_service\": \"18\",\r\n                        \"sf2_onbehalf_result1\": \"C\",\r\n                        \"sf3_onbehalf_result2\": \" \"\r\n                    }\r\n         ],\r\n        \"se74_additional_processing_information\": {},\r\n        \"se75_fraud_scoring_data\": {\r\n                            \"sf1_fraud_score\": \"046\",\r\n                            \"sf2_score_reason_code\": \"54\",\r\n                            \"sf3_rules_score\": \"046\",\r\n                            \"sf4_rules_reason_code1\": \"54\",\r\n                            \"sf5_rules_reason_code2\": \"00\"\r\n                        },\r\n        \"se78_payment_service_indicator\": {},\r\n        \"se79_chip_cvr_or_tvr_bit_error_results\": {},\r\n        \"se82_address_verification_service_request\": \"52\",\r\n        \"se87_card_validation_code_result_or_cvv2\": \"M\",\r\n        \"se93_fleet_card_id_request_data\": {}\r\n      },\r\n      \"de49_currency_code_transaction\": \"986\",\r\n      \"de50_currency_code_settlement\": \"986\",\r\n      \"de51_currency_code_cardholder_billing\": \"986\",\r\n      \"de60_advice_reason_code\": {},\r\n      \"de61_pos_data\": {\r\n        \"sf1_pos_terminal_attendance\": \"1\",\r\n        \"sf2_reserved_for_future_use\": \"0\",\r\n        \"sf3_pos_terminal_location\": \"2\",\r\n        \"sf4_pos_cardholder_presence\": \"5\",\r\n        \"sf5_pos_card_presence\": \"4\",\r\n        \"sf6_pos_card_capture_capabilities\": \"0\",\r\n        \"sf7_pos_transaction_status\": \"1\",\r\n        \"sf8_pos_transaction_security\": \"0\",\r\n        \"sf9_reserved_for_future_use\": \"0\",\r\n        \"sf10_cardholder_activated_terminal_level\": \"6\",\r\n        \"sf11_pos_card_data_terminal_input_capability_indicator\": \"6\",\r\n        \"sf12_pos_authorization_life_cycle\": \"00\",\r\n        \"sf13_pos_country_code_or_submerchant\": \"442\",\r\n        \"sf14_postal_code_or_submerchant\": \"1528      \"\r\n      },\r\n      \"de63_network_data\": {\r\n        \"sf1_financial_network_code\": \"MRG\",\r\n        \"sf2_banknet_reference_number\": \"35UH3T\"\r\n      },\r\n      \"de90_original_data_elements\": {},\r\n      \"de94_service_indicator\": {},\r\n      \"de95_replacement_amounts\": {},\r\n      \"de97_amount_net_settlement\": {},\r\n      \"de112_additional_data_national_use\": {},\r\n      \"de120_record_data\": {\r\n        \"de120_start\": \"319\",\r\n        \"de120_size\": \"033\",\r\n        \"sf1_avs_service_indicator1\": \"41185-125Ladeira Lagoa da Vov\"\r\n      },\r\n      \"de124_member_defined_data\": {},\r\n      \"start\": 1619927610373783000,\r\n      \"card_profile\": \"ACESSOBK01\"\r\n    },\r\n    \"cvv_presence\": true,\r\n    \"account_type\": \"00\",\r\n    \"validation_results\": [\r\n                    {\r\n                        \"name\": \"MAGNETIC_STRIPE\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"NO_MAGNETIC_STRIPE\",\r\n                        \"description\": \"No magnetic stripe\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"TERMINAL_CAPABILITY\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"TERMINAL_CAPABILITY_VALID\",\r\n                        \"description\": \"Terminal capability is valid\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ARQC\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"NO_CRYPTOGRAM\",\r\n                        \"description\": \"No cryptogram present\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CVM\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"NO_CVM_TRANSACTION_WITH_NO_AUTH_METHOD\",\r\n                        \"description\": \"Ica configured to allow no CVM\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ENTRY_MODE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ENTRY_MODE_VALID\",\r\n                        \"description\": \"Entry mode valid\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CHIP_SIGNATURE\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                        \"description\": \"No chip signature present\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_EXISTS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_FOUND\",\r\n                        \"description\": \"Card exists.\",\r\n                        \"additional_data\": {\r\n                            \"type\": \"RECURRING\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_MODE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_MODE_VALID\",\r\n                        \"description\": \"Valid card mode\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_TOKEN_STATUS\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"SKIPPED\",\r\n                        \"description\": \"Validation not executed\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"PROGRAM\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"PROGRAM_FOUND\",\r\n                        \"description\": \"Program 449 found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"PLATFORM_CONFIG\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"PLATFORM_CONFIG_FOUND\",\r\n                        \"description\": \"Program found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"PROGRAM_CONFIG\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"PROGRAM_CONFIG_FOUND\",\r\n                        \"description\": \"Program found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"AUTHORIZATION_DISABLED\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"AUTHORIZATION_CONFIG_APPROVED\",\r\n                        \"description\": \"Authorization enabled for current transaction\",\r\n                        \"additional_data\": {\r\n                            \"bin\": \"23402801\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"DCC\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"NOT_DCC_TRANSACTION\",\r\n                        \"description\": \"It is not a DCC transaction.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"BALANCE_CONFIG\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"BALANCE_CONFIG_FOUND\",\r\n                        \"description\": \"Balance Config exists.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CONTACTLESS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CONTACTLESS_ENABLED\",\r\n                        \"description\": \"Contactless enabled.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ACCOUNT_TYPE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                        \"description\": \"Account Type: CREDIT_CARD_ACCOUNT. Card Mode: CREDIT.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_ATC\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_ATC_VALID\",\r\n                        \"description\": \"Received null but the last is []. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"OPERATION\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"VALID_OPERATION\",\r\n                        \"description\": \"Valid operation (00) for OrgId (TN-c36a8d2d-d99a-4b82-b62a-faacdf3650e8) and ProgramId (449).\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"PASSWORD_ATTEMPTS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                        \"description\": \"Password tries is valid.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                        \"description\": \"Card inputted expiration date is valid.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_VALID_UNTIL\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                        \"description\": \"Card is valid.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_EXPIRATION_DATE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_NOT_EXPIRED\",\r\n                        \"description\": \"Card not expired.\",\r\n                        \"additional_data\": {\r\n                            \"expiration_date\": \"2031-01-31\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_STATUS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_STATUS_VALID\",\r\n                        \"description\": \"Card status: NORMAL.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_MODE_STATUS\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"CARD_MODE_STATUS_SKIPPED\",\r\n                        \"description\": \"Card mode status skipped\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ACCOUNT\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ACCOUNT_FOUND\",\r\n                        \"description\": \"Account found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ACCOUNT_LIMITS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ACCOUNT_LIMITS_FOUND\",\r\n                        \"description\": \"Account limits exists.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ACCOUNT_STATUS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ACCOUNT_STATUS_VALID\",\r\n                        \"description\": \"Account has a valid status\",\r\n                        \"additional_data\": {\r\n                            \"status\": \"NORMAL\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"ZERO_AMOUNT\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"ZERO_AMOUNT_SKIPPED\",\r\n                        \"description\": \"Skip validation\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CREDIT_LIMIT\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CREDIT_LIMIT_IMPACT_FOUND\",\r\n                        \"description\": \"Acceptances found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"MAX_TRANSACTIONS_FOR_TEMPORARY_CARD\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"MAX_TRANSACTIONS_IF_TEMPORARY_CARD_SKIPPED\",\r\n                        \"description\": \"Card is not temporary.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_TRANSACTION_LIMIT\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"LIMIT_APPROVED\",\r\n                        \"description\": \"Card transaction sufficient limit.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"LEDGER\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"LEDGER_APPROVED\",\r\n                        \"description\": \"Ledger validations approved.\",\r\n                        \"additional_data\": {\r\n                            \"available_credit_limit\": 2637.17,\r\n                            \"total_credit_limit\": 4000,\r\n                            \"max_credit_limit\": 4000\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"RULES\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"RULES_NOT_ENABLED\",\r\n                        \"description\": \"Rules Evaluation not enabled.\",\r\n                        \"additional_data\": {}\r\n                    }\r\n                ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlJudge}}/transactions/executeTransactionPosPaid",
									"host": [
										"{{UrlJudge}}"
									],
									"path": [
										"transactions",
										"executeTransactionPosPaid"
									]
								}
							},
							"response": []
						},
						{
							"name": "1- Antifraude(http/async) Visa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Importações e funções auxiliares",
											"const uuid = require('uuid');",
											"const helpers = JSON.parse(pm.globals.get(\"postmanUtils\"));",
											"// Funções geradoras a partir do helpers",
											"const generateRandomString = new Function('return ' + helpers.generateRandomString)();",
											"const generateNsu = new Function('return ' + helpers.generateRandomNsu)();",
											"",
											"// Valores gerados dinamicamente",
											"const idGeral = uuid.v4();",
											"const nsu = generateNsu(6);",
											"console.log(nsu)",
											"const authorizationCode = generateRandomString(5);",
											"const IntMaxValue = parseInt(\"2147483647\");",
											"const authorizationId = Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER - IntMaxValue + 1)) + IntMaxValue;",
											"const amount = _.random(1, 20);",
											"const timestampUtcIso8601 = (new Date()).toISOString();",
											"",
											"// Definição das variáveis globais organizadas por seção",
											"",
											"// IDs e códigos",
											"    pm.collectionVariables.set('correlationId', idGeral);",
											"    pm.globals.set('randomId', uuid.v4());",
											"    pm.collectionVariables.set('nsuGlobal', nsu);",
											"    pm.collectionVariables.set('authorizationCode', authorizationCode);",
											"    pm.collectionVariables.set('authorizationId', authorizationId);",
											"",
											"// Timestamp",
											"    pm.globals.set('timestampUtcIso8601', timestampUtcIso8601);",
											"",
											"// Valores de transação",
											"    pm.globals.set('randomAmount', amount);           // amount da transação",
											"    pm.globals.set('replacementAmount', amount);      // amount usado na reversão parcial",
											"",
											"// Moeda e localização",
											"    pm.globals.set('currency', '840');                 // Real = 986; Dollar = 840",
											"    pm.globals.set('contryCode', 'USA');               // Brasil = BRA; Luxemburgo = LUX",
											"",
											"// Tipo de transação e merchant",
											"    pm.globals.set('transactionType', '00');           // 00 = purchase; 01 = Withdraw",
											"    pm.globals.set('merchantName', 'Mercadinho Japones'); // TESTE = aprovado, TESTE_NEGAR_POR_RISCO = reprovado",
											"",
											"// Modo de entrada e MCC",
											"    pm.globals.set('entryMode', '05');                  // Consultar Customer Interface Specification",
											"    pm.globals.set('mcc', '5311');",
											"",
											"// Cartão e segurança",
											"    pm.globals.set('panDebit', 'nfAUixEHkJuIj8gVjh8Z+gGe8NsnrlShW1gH/EzhKECwyNTRYuXukNcj/AYRqo5qvouEmji/oajcEY1Oyt6Sjg==');",
											"    pm.globals.set('eletronicSecurityLevel', '210');",
											"",
											"// Status da transação no POS",
											"    pm.globals.set('posTransactionStatus', '0');       // 0=Normal; 1=Deferred Auth; ... ; 9=Tokenization Request/Notification",
											"",
											"// Carteira digital e códigos de resposta",
											"    pm.globals.set('walletId', '111');",
											"    pm.globals.set('responseCode', '00');               // 00 = sucesso",
											"    pm.globals.set('denialCode', '00');",
											"",
											"// Contas e adquirente",
											"    pm.globals.set('accountIdDebit', 102509621);",
											"    pm.globals.set('acquirerCode', 728384008);",
											"",
											"",
											"// -- Variáveis da primeira lista que não tem equivalente no segundo script --",
											"// Com valores baseados no primeiro exemplo e comentados (ajuste se necessário)",
											"    pm.globals.set('processorCardId', 89640330);    // Exemplo do primeiro script",
											"    pm.globals.set('accountId', 103197472);         // Exemplo do primeiro script",
											"    pm.globals.set('customerId', 103194628);        // Exemplo do primeiro script",
											"    pm.globals.set('pan', \"o1C6dlN9ltOi5a3CBE4ipWCamyt23ci0uEIcGUgGp0oZIcBLimsP3RVRez/aoCTBAkB37vf7i7XQSXSm4szK4A==\");",
											"    pm.globals.set('numberOfInstallments', 3);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Importa UUID para geração de IDs únicos\r",
											"    var uuid = require('uuid');\r",
											"\r",
											"// Parse do payload da requisição\r",
											"    const requestPayload = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Recupera variáveis globais e de coleção necessárias\r",
											"    const type = postman.getGlobalVariable('transactionType');\r",
											"    const mambuUtils = JSON.parse(pm.collectionVariables.get(\"mambuUtils\"));\r",
											"    const validateMambu = new Function('return ' + mambuUtils.ValidateIfTransactionDMCWasHoldOnMambu)();\r",
											"    const judgeFunction = JSON.parse(pm.collectionVariables.get('judgeUtils'));\r",
											"    const getTransaction = new Function('return ' + judgeFunction.findAuthorizationTransaction)();\r",
											"\r",
											"// Geração de correlationId único para rastreamento da transação\r",
											"    const correlationId = uuid.v4().toString();\r",
											"\r",
											"// Variáveis globais de suporte\r",
											"    const pan = pm.globals.get('pan');\r",
											"    //var debitProgramCard = pm.globals.get('debitProgramId');\r",
											"\r",
											"// Log inicial para auxiliar no debug\r",
											"    pm.test(\"Request (0200) Dados Principais\", function () {\r",
											"        console.log(\"authorization_id: \" + pm.globals.get('authorizationId'))\r",
											"        console.log(\"Nsu: \" + pm.collectionVariables.get('nsuGlobal'))\r",
											"        console.log(\"AuthorizationCode: \" + pm.collectionVariables.get('authorizationCode'))\r",
											"        console.log(\"ProcessCardId: \" + pm.globals.get('processorCardId'))\r",
											"    });\r",
											"\r",
											"   // console.log('Debit Program Card:', debitProgramCard);\r",
											"\r",
											"// Parse da resposta para análise de aprovação\r",
											"    const response = JSON.parse(pm.response.stream.toString());\r",
											"\r",
											"// Caso resposta aprovativa, aguarda e executa a função de pós-autorização assincrona\r",
											"    if(response.approve === true) {\r",
											"        setTimeout(() => {\r",
											"            console.log(\"Executando envio pós-autorização após atraso de 2 segundos...\");\r",
											"            sendPosAuthorizationAsync();\r",
											"        }, 20000);\r",
											"    }\r",
											"\r",
											"/**\r",
											" * Função responsável por preparar e enviar o evento de autorização\r",
											" * para o serviço RabbitMQ, formatando o payload conforme padrão ISO 8583\r",
											" * com os campos necessários para o processamento downstream.\r",
											" */\r",
											"    function sendPosAuthorizationAsync() {\r",
											"    // Extração de dados do requestPayload para uso no evento\r",
											"        const authorizationId = requestPayload.id;\r",
											"        const randomAmount = requestPayload.fields.amount_transaction;\r",
											"        const cardId = requestPayload.fields.card_id;\r",
											"        const nsuGlobal = requestPayload.fields.nsu;\r",
											"        const authorizationCode = requestPayload.fields.authorization_code;\r",
											"        const merchantName = requestPayload.fields.merchant_name;\r",
											"        const contryCode = requestPayload.fields.merchant_state_or_country_code;\r",
											"        const currency = requestPayload.fields.currency;\r",
											"        const accountId = requestPayload.fields.account_id;\r",
											"        const acquirerCode = requestPayload.fields.acquirer_code;\r",
											"        const authorizationCategory = \"AUTHORIZATION\"; // 1 = autorizado, 4 = negado\r",
											"        const authorizationResponseCode = \"00\"; // 00 = aprovado, 51 = negado\r",
											"\r",
											"    // Credenciais básicas para autenticação no serviço\r",
											"        const login = 'dev';\r",
											"        const senha = 'yC24rTyzb2_qkvEyPfPw';\r",
											"        const credentials = pm.collectionVariables.get('rabbitToken')   \r",
											"    \r",
											"    // Gerando ID e timestamp únicos para o evento\r",
											"        const networkAuthorizationEventId = uuid.v4();\r",
											"        const networkAuthorizationEventDate = (new Date()).toISOString();\r",
											"\r",
											"    // Buscando customerId do escopo global com fallback numérico\r",
											"        const customerId = pm.globals.get('customerId', 103194628);\r",
											"\r",
											"    // Alias para NSU (Número Sequencial Único)\r",
											"        const nsu = nsuGlobal;\r",
											"\r",
											"    // Recupera o Payload base de configuração para eventos Rabbit\r",
											"        const basePayload = pm.collectionVariables.get(\"rabbitPayload\");\r",
											"        let networkEventBody = JSON.parse(basePayload);\r",
											"\r",
											"    // === Atualização Campos Principais do Evento segundo ISO 8583 ===\r",
											"        networkEventBody.destinationAddress = \"rabbitmq://b-b3cf91f8-b9cf-4a07-abe3-180dc57eddb5.mq.us-east-1.amazonaws.com/pismo.authorization.events.judge.v2\";\r",
											"        networkEventBody.message.event_id = correlationId;\r",
											"        networkEventBody.message.timestamp = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.org_id = \"TN-\" + authorizationId;\r",
											"        networkEventBody.message.cid = authorizationId;\r",
											"        networkEventBody.correlationId = authorizationId;\r",
											"        networkEventBody.message.Id = correlationId;\r",
											"\r",
											"    // === Dados específicos para transações DMC (Dual Message Capture) ===\r",
											"        networkEventBody.message.data.processing_code = \"003100\";\r",
											"        networkEventBody.message.data.mti = \"0100\";\r",
											"        networkEventBody.message.data.conciliation_type = \"UNDEFINED\"; // SINGLE_MESSAGE, DUAL_MESSAGE ou UNDEFINED\r",
											"        networkEventBody.message.data.authorization_response_code = \"00\";\r",
											"\r",
											"    // === Reforço da atualização de campos do cabeçalho message ===\r",
											"        networkEventBody.message.event_id = authorizationId;\r",
											"        networkEventBody.message.timestamp = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.org_id = \"TN-\" + authorizationId;\r",
											"        networkEventBody.message.cid = authorizationId;\r",
											"\r",
											"    // === Dados de autorização e identificação correlacionada ===\r",
											"        networkEventBody.message.data.authorization_category = authorizationCategory;\r",
											"        networkEventBody.message.data.org_id = \"TN-\" + authorizationId;\r",
											"        networkEventBody.message.data.cid = authorizationId;\r",
											"        networkEventBody.message.data.unique_cid = authorizationId;\r",
											"\r",
											"    // === Datas e horas do evento (UTC) ===\r",
											"        networkEventBody.message.data.event_date_hour = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.data.event_date_hour_utc = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.data.authorization_date_hour = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.data.original_authorization_date_hour = networkAuthorizationEventDate;\r",
											"        networkEventBody.message.data.original_event_date_hour_utc = networkAuthorizationEventDate;\r",
											"\r",
											"    // === Dados financeiros e de contas ===\r",
											"        networkEventBody.message.data.account_id = accountId;\r",
											"        networkEventBody.message.data.card_id = cardId;\r",
											"        networkEventBody.message.data.authorization_id = authorizationId;\r",
											"        networkEventBody.message.data.customer_id = customerId;\r",
											"        networkEventBody.message.data.principal_amount = randomAmount;\r",
											"        networkEventBody.message.data.contract_amount = randomAmount;\r",
											"        networkEventBody.message.data.installment_amount = randomAmount;\r",
											"\r",
											"    // === Dados de cartão e código de autorização ===\r",
											"        networkEventBody.message.data.pan = pan;\r",
											"        networkEventBody.message.data.nsu = nsu;\r",
											"        networkEventBody.message.data.retrieval_reference_number = nsu;\r",
											"        networkEventBody.message.data.authorization_code = authorizationCode;\r",
											"        networkEventBody.message.data.authorization_response_code = authorizationResponseCode;\r",
											"\r",
											"    // === Dados de moeda ===\r",
											"        networkEventBody.message.data.local_currency_code = currency;\r",
											"        networkEventBody.message.data.cardholder_currency_code = currency;\r",
											"\r",
											"    // === Dados do merchant e adquirente ===\r",
											"        networkEventBody.message.data.merchant_name = merchantName;\r",
											"        networkEventBody.message.data.acquirer_bin = acquirerCode;\r",
											"        networkEventBody.message.data.merchant_state_or_country = contryCode;\r",
											"\r",
											"    // === Identificadores principais ===\r",
											"        networkEventBody.message.Id = authorizationId;\r",
											"        networkEventBody.correlationId = correlationId;\r",
											"        networkEventBody.event_id = authorizationId;\r",
											"\r",
											"    // === (Opcional) Program ID, descomentado se necessário ===\r",
											"        // networkEventBody.message.data.program_id = debitProgramCard;\r",
											"\r",
											"    // Monta o body da requisição para envio via RabbitMQ\r",
											"        var requestBody = {\r",
											"            \"properties\": {\r",
											"                \"content-type\": \"application/vnd.masstransit+json\"\r",
											"            },\r",
											"            \"routing_key\": \"\",\r",
											"            \"payload\": JSON.stringify(networkEventBody),\r",
											"            \"payload_encoding\": \"string\"\r",
											"        }    \r",
											"\r",
											"    // Recupera a URL do RabbitMQ do ambiente\r",
											"        var currentRabbitUrl = pm.environment.get('UrlRabbit');\r",
											"        console.log('URL RabbitMQ:', currentRabbitUrl);\r",
											"\r",
											"    // Cria a URL do endpoint para envio do evento\r",
											"        const url = currentRabbitUrl + '/api/exchanges/%2F/pismo.authorization.events.judge.v2/publish';\r",
											"\r",
											"    // Define headers com Content-Type e Autorização básica\r",
											"        const envName = pm.environment.name;\r",
											"        const headers = {\r",
											"            'Content-Type': 'application/vnd.masstransit+json',\r",
											"            'Authorization': 'Basic Z3Vlc3Q6Z3Vlc3Q=' // guest:guest padrão\r",
											"        };\r",
											"        if (envName !== \"Local\") {\r",
											"            headers['Authorization'] = `Basic ${credentials}`; // utilizado em ambientes não locais\r",
											"        }\r",
											"\r",
											"    // Envio da requisição para RabbitMQ\r",
											"        pm.sendRequest({\r",
											"            url: url,\r",
											"            method: 'POST',\r",
											"            header: headers,\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(requestBody)\r",
											"            }\r",
											"        }, (err, response) => {\r",
											"            if (err) {\r",
											"                console.log(\"Erro ao enviar a requisição:\", err);\r",
											"            } else {\r",
											"                console.log(\"Resposta recebida:\", response.stream.toString());\r",
											"\r",
											"            // Aguardar 30 segundos para processamento anterior\r",
											"                setTimeout(() => {\r",
											"                    getTransaction(pm, correlationId, authorizationCode, nsu, nsu);\r",
											"\r",
											"                // Aguardar 50 segundos para requisição e validação Mambu\r",
											"                    setTimeout(() => {\r",
											"                        console.log(\"Iniciando requisição para Mambu...\");\r",
											"\r",
											"                        const transactionData = JSON.parse(pm.collectionVariables.get('lastProcessedTransactionData'));\r",
											"\r",
											"                        validateMambu(pm, true, transactionData.Card.Proxy, transactionData.Id);\r",
											"\r",
											"                    // Aguarda 2 segundos e loga respostas do Mambu\r",
											"                        setTimeout(() => {\r",
											"                            const mambuResponse = JSON.parse(pm.collectionVariables.get('lastMambuResponse'));\r",
											"                            console.log(\"Resposta Mambu:\", mambuResponse);\r",
											"                        }, 2000);\r",
											"\r",
											"                    }, 50000);\r",
											"                }, 30000);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-correlation-id",
										"value": "{{correlationId}}",
										"type": "text"
									},
									{
										"key": "x-pismo-sign",
										"value": "eyJraWQiOiI3MjYyYTYwMjhlNTFkYmJkMTJkMWY0OGFmNGJkNmM0NDAwNDIzYWQzIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJ4bU94V1J2RUNSUStydVdZR1lcL1wvamxpZ2lUSVUzQjBMaGE5cldtNmNwaXc9Iiwic3ViIjoiYXV0aG9yaXphdGlvbiIsImFjY291bnQtaWQiOjMwNTQwLCJpc3MiOiJhcGkucGlzbW8uaW8iLCJleHAiOjE1NzM2OTY4MDAsImlhdCI6MTU3MjgzMjgwMCwicGFuLWhhc2giOiJURVNURS1qY01rNzNnRjlnbE1vdWtTOWRaVHBudko3clN5SkUwcTRIR3NGSEdSMkVZQzBSTWlBRFRwbGVrbkhEdEhSbWdXV3djTFlaZVpVNmRtakN4VmVHT0VpZz09In0.QOiulHmVaxUzmyK9hWTKelXQ63PCtZG4hzwG1-pIOIOmPUWPvO9WRxGWui2Z2hIDeOD3nK4feKHqHiFRVBjUDh7MIpUkOOxowDieYC9niZ3RFVK9okoXi0DWXDiaZEXd4fGbGFE6CQrAET1kDU3j__QDR1pkIjOv7hQJbT8n2JhSlVKhPi2KST_cIMcwZMzzf8xjbVqFVbje17t0GwrDKotTIAo-Ta8_wr_CLtnTQ3RCaqEy5Z6J6kF3xv4-ENsD83qAOzgaiZ8q1iY7rSHIWdxXTFhgC760GTgi9asmDFc2Ky8FNxFW5qpNFefO14nEaKdXzd_JHYu21YebFWro7A",
										"type": "text"
									},
									{
										"key": "x-cid",
										"value": "{{randomId}}",
										"type": "text"
									},
									{
										"key": "bypass-validation",
										"value": "{{BypassValidationHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{authorizationId}}\",\r\n  \"entity\": \"transaction\",\r\n  \"fields\": {\r\n    \"mti\": \"0100\",\r\n    \"card_id\": 89640330,\r\n    \"account_id\": \"{{accountId}}\",//5690506,\r\n    \"card_expiration_date\": \"{{expirationDate}}\",\r\n    \"amount_transaction\": {{randomAmount}},\r\n    \"amount_local\": {{randomAmount}},\r\n    \"amount_settlement\": {{randomAmount}},\r\n    \"transaction_timestamp\": \"{{timestampUtcIso8601}}\",\r\n    \"processing_code\": \"{{transactionType}}3100\",\r\n    \"transaction_type\": \"{{transactionType}}\",\r\n    \"nsu\": \"{{nsuGlobal}}\",\r\n    \"retrieval_reference_number\": \"{{nsuGlobal}}\",\r\n    \"authorization_code\": \"{{authorizationCode}}\",\r\n    \"response_code\": \"{{responseCode}}\",\r\n    \"denial_code\": \"{{denialCode}}\",\r\n    \"payment_card_brand\": \"Visa\",\r\n    \"currency\": \"{{currency}}\",\r\n    \"merchant_id_code\": \"63215248       \",\r\n    \"merchant_name\": \"{{merchantName}}\",\r\n    \"merchant_city\": \"Luxemburg     \",\r\n    \"merchant_state_or_country_code\": \"{{contryCode}}\",\r\n    \"merchant_terminal_id\": \"62683744\",\r\n    \"atc_chip\": \"\",\r\n    \"atc_database\": \"\",\r\n    \"cvv_data\": \"CVV_PRESENT\",\r\n    \"entry_mode\": \"{{entryMode}}\",\r\n    \"mcc\": \"{{mcc}}\",\r\n    \"card_type\": \"RECURRING\",\r\n    \"country_code\": \"\",\r\n    \"chip_validation\": true,\r\n    \"postal_code\": \"1528      \",\r\n    \"chip_cryptogram_information_data\": \"\",\r\n    \"chip_transaction_date\": \"\",\r\n    \"chip_transaction_type\": \"\",\r\n    \"chip_amount_authorized\": \"\",\r\n    \"chip_transaction_currency_code\": \"\",\r\n    \"chip_application_interchange_profile\": \"\",\r\n    \"chip_terminal_country_code\": \"\",\r\n    \"chip_cardholder_verification_method\": \"\",\r\n    \"chip_terminal_capabilities\": \"\",\r\n    \"chip_amount_other\": \"\",\r\n    \"chip_application_transaction_counter\": \"\",\r\n    \"cardholder_postal_code\": \"\",\r\n    \"terminal_capability\": \"0\",\r\n    \"tvr\": \"\",\r\n    \"cvr\": \"\",\r\n    \"number_of_installments\": {{numberOfInstallments}},\r\n    \"network_score\": 0,\r\n    \"pos_postal_code\": \"1528      \",\r\n    \"acquirer_code\": \"006219\",\r\n    \"financial_network_code\": \"MRG\",\r\n    \"banknet_reference_number\": \"35UH3T\",\r\n    \"password_present\": true,\r\n    \"original_network_data\": {{originalNetworkData}},\r\n    \"cvv_presence\": true,\r\n    \"account_type\": \"00\",\r\n    \"validation_results\": [\r\n                    {\r\n                        \"name\": \"MAGNETIC_STRIPE\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"NO_MAGNETIC_STRIPE\",\r\n                        \"description\": \"No magnetic stripe\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"TERMINAL_CAPABILITY\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"TERMINAL_CAPABILITY_VALID\",\r\n                        \"description\": \"Terminal capability is valid\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ARQC\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"NO_CRYPTOGRAM\",\r\n                        \"description\": \"No cryptogram present\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CVM\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"NO_CVM_TRANSACTION_WITH_NO_AUTH_METHOD\",\r\n                        \"description\": \"Ica configured to allow no CVM\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ENTRY_MODE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ENTRY_MODE_VALID\",\r\n                        \"description\": \"Entry mode valid\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CHIP_SIGNATURE\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"NO_CHIP_SIGNATURE\",\r\n                        \"description\": \"No chip signature present\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_EXISTS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_FOUND\",\r\n                        \"description\": \"Card exists.\",\r\n                        \"additional_data\": {\r\n                            \"type\": \"RECURRING\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_MODE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_MODE_VALID\",\r\n                        \"description\": \"Valid card mode\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_TOKEN_STATUS\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"SKIPPED\",\r\n                        \"description\": \"Validation not executed\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"PROGRAM\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"PROGRAM_FOUND\",\r\n                        \"description\": \"Program 449 found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"PLATFORM_CONFIG\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"PLATFORM_CONFIG_FOUND\",\r\n                        \"description\": \"Program found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"PROGRAM_CONFIG\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"PROGRAM_CONFIG_FOUND\",\r\n                        \"description\": \"Program found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"AUTHORIZATION_DISABLED\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"AUTHORIZATION_CONFIG_APPROVED\",\r\n                        \"description\": \"Authorization enabled for current transaction\",\r\n                        \"additional_data\": {\r\n                            \"bin\": \"23402801\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"DCC\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"NOT_DCC_TRANSACTION\",\r\n                        \"description\": \"It is not a DCC transaction.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"BALANCE_CONFIG\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"BALANCE_CONFIG_FOUND\",\r\n                        \"description\": \"Balance Config exists.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CONTACTLESS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CONTACTLESS_ENABLED\",\r\n                        \"description\": \"Contactless enabled.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ACCOUNT_TYPE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ACCOUNT_TYPE_VALID\",\r\n                        \"description\": \"Account Type: CREDIT_CARD_ACCOUNT. Card Mode: CREDIT.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_ATC\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_ATC_VALID\",\r\n                        \"description\": \"Received null but the last is []. Used these params: MinOffset: 5, MaxOffset: 15, IsAdvice: false.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"OPERATION\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"VALID_OPERATION\",\r\n                        \"description\": \"Valid operation (00) for OrgId (TN-c36a8d2d-d99a-4b82-b62a-faacdf3650e8) and ProgramId (449).\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"PASSWORD_ATTEMPTS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r\n                        \"description\": \"Password tries is valid.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r\n                        \"description\": \"Card inputted expiration date is valid.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_VALID_UNTIL\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_VALID_UNTIL_VALID\",\r\n                        \"description\": \"Card is valid.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_EXPIRATION_DATE\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_NOT_EXPIRED\",\r\n                        \"description\": \"Card not expired.\",\r\n                        \"additional_data\": {\r\n                            \"expiration_date\": \"2031-01-31\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_STATUS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CARD_STATUS_VALID\",\r\n                        \"description\": \"Card status: NORMAL.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_MODE_STATUS\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"CARD_MODE_STATUS_SKIPPED\",\r\n                        \"description\": \"Card mode status skipped\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ACCOUNT\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ACCOUNT_FOUND\",\r\n                        \"description\": \"Account found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ACCOUNT_LIMITS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ACCOUNT_LIMITS_FOUND\",\r\n                        \"description\": \"Account limits exists.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"ACCOUNT_STATUS\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"ACCOUNT_STATUS_VALID\",\r\n                        \"description\": \"Account has a valid status\",\r\n                        \"additional_data\": {\r\n                            \"status\": \"NORMAL\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"ZERO_AMOUNT\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"ZERO_AMOUNT_SKIPPED\",\r\n                        \"description\": \"Skip validation\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CREDIT_LIMIT\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"CREDIT_LIMIT_IMPACT_FOUND\",\r\n                        \"description\": \"Acceptances found.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"MAX_TRANSACTIONS_FOR_TEMPORARY_CARD\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"MAX_TRANSACTIONS_IF_TEMPORARY_CARD_SKIPPED\",\r\n                        \"description\": \"Card is not temporary.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"CARD_TRANSACTION_LIMIT\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"LIMIT_APPROVED\",\r\n                        \"description\": \"Card transaction sufficient limit.\",\r\n                        \"additional_data\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"LEDGER\",\r\n                        \"status\": \"APPROVED\",\r\n                        \"reason\": \"LEDGER_APPROVED\",\r\n                        \"description\": \"Ledger validations approved.\",\r\n                        \"additional_data\": {\r\n                            \"available_credit_limit\": 2637.17,\r\n                            \"total_credit_limit\": 4000,\r\n                            \"max_credit_limit\": 4000\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"RULES\",\r\n                        \"status\": \"SKIPPED\",\r\n                        \"reason\": \"RULES_NOT_ENABLED\",\r\n                        \"description\": \"Rules Evaluation not enabled.\",\r\n                        \"additional_data\": {}\r\n                    }\r\n                ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{UrlJudge}}/transactions/executeTransactionPosPaid",
									"host": [
										"{{UrlJudge}}"
									],
									"path": [
										"transactions",
										"executeTransactionPosPaid"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Request-Feed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um UUID v4\r",
							"function generateUUID() {\r",
							"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
							"        const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
							"        return v.toString(16);\r",
							"    });\r",
							"}\r",
							"\r",
							"const correlationId = generateUUID();\r",
							"\r",
							"// Monta o objeto conforme o payload solicitado\r",
							"const authorizedTransactionEvent = {\r",
							"  authorizationTransactionId: correlationId,\r",
							"  document: \"93833920459\",\r",
							"  cardId: \"2233066295800000925\",\r",
							"  transactionAmountInCents: 10000,\r",
							"  amountSettlement: 0.0,\r",
							"  amountLocal: 100.0,\r",
							"  mcg: \"Supermarkets\",\r",
							"  city: \"RIO          \",\r",
							"  stateOrCountryCode: \"BRA\",\r",
							"  merchantName: \"GROCERY, SUPERMARKETS \",\r",
							"  transactionType: \"SALE\",\r",
							"  zip: \"\",\r",
							"  markup: null,\r",
							"  iof: null,\r",
							"  dollarExchangeRate: null,\r",
							"  entryMode: 90,\r",
							"  has3DS: false,\r",
							"  transactionTimeStamp: \"2025-08-06T16:56:04.2284412Z\",\r",
							"  acquirerCode: \"999698\",\r",
							"  merchantTerminalId: \"\",\r",
							"  currencyCode: \"986\",\r",
							"  transactionStatus: 1,\r",
							"  mcc: \"5411\",\r",
							"  cardAlias: \"TESTE DMC BV\",\r",
							"  agency: null,\r",
							"  accountNumber: null,\r",
							"  cancelTransactionTimeStamp: \"0001-01-01T00:00:00\",\r",
							"  authorizationCode: \"MNUQO\",\r",
							"  companyKey: \"SDB_BV\",\r",
							"  correlationId: correlationId,\r",
							"  withdrawalFeeAmount: null,\r",
							"  transactionParentId: correlationId,\r",
							"  amountOriginal: 100.0,\r",
							"  netAmount: 100.0,\r",
							"  iofAmount: 0.0,\r",
							"  markupAmount: 0.0,\r",
							"  walletId: 0,\r",
							"  deniedRules: [],\r",
							"  responseCode: \"00\",\r",
							"  isPre: false,\r",
							"  isPos: false,\r",
							"  isDebit: true,\r",
							"  numberOfInstallments: 1,\r",
							"  cardBrand: \"Mastercard\"\r",
							"};\r",
							"\r",
							"// Armazenar no ambiente/variável global para uso posterior\r",
							"const rawJson = JSON.stringify(authorizedTransactionEvent);\r",
							"// Escapa aspas para inserir como string JSON dentro do JSON do body da API RabbitMQ\r",
							"const escapedJson = rawJson.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\r",
							"\r",
							"pm.globals.set('authorizedTransactionEventEscaped', escapedJson);\r",
							"\r",
							"pm.globals.set('correlationId', correlationId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code precisa ser ok (200)\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Precisa receber resposta de sucesso do rabbit\", function() {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.routed).to.equal(true);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "yC24rTyzb2_qkvEyPfPw",
							"type": "string"
						},
						{
							"key": "username",
							"value": "dev",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{BasicAuthRabbit}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/vnd.masstransit+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"properties\": {\r\n    \"content_type\": \"application/json\",\r\n    \"correlation_id\": \"{{correlationId}}\",\r\n    \"headers\": {\r\n      \"source\": \"postman\"\r\n    }\r\n  },\r\n  \"routing_key\": \"transaction.holding\",\r\n  \"payload\": \"{{authorizedTransactionEventEscaped}}\",\r\n  \"payload_encoding\": \"string\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UrlRabbit}}/api/exchanges/%2F/operational.judge.holding/publish",
					"host": [
						"{{UrlRabbit}}"
					],
					"path": [
						"api",
						"exchanges",
						"%2F",
						"operational.judge.holding",
						"publish"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//rabbit payload\r",
					"    const rabbitPayload = {\r",
					"    \"destinationAddress\": \"amqps://admin:Kh7My4K!sWchDAQn2%40F%40aX@b-19ea6c87-f107-437d-80a8-943cd8e03483.mq.us-east-1.amazonaws.com:5671/Operational.Judge.authorization.events\",\r",
					"    \"headers\": {},\r",
					"    \"message\": {\r",
					"        \"event_id\": \"74c317fb-70b3-4758-b178-7d3be37b3987\",\r",
					"        \"event_type\": \"network-authorization\",\r",
					"        \"org_id\": \"TN-ef23ffe3-c69b-4e9c-ab22-d865fe0a25ee\",\r",
					"        \"schema_version\": 1,\r",
					"        \"cid\": \"1a0858e8-1c33-94db-bb2a-7184a3f61118\",\r",
					"        \"timestamp\": \"2025-07-03T14:11:45.345Z\",\r",
					"        \"domain\": \"networktransactions\",\r",
					"        \"data\": {\r",
					"            \"authorization_category\": \"CANCELLATION\",\r",
					"            \"authorization_type\": \"NETWORK\",\r",
					"            \"org_id\": \"TN-ef23ffe3-c69b-4e9c-ab22-d865fe0a25ee\",\r",
					"            \"cid\": \"60a9b3bc-9685-9698-8d9d-5eb816385177\",\r",
					"            \"unique_cid\": \"6172cdf3-a796-47c7-bff2-24477adf598f\",\r",
					"            \"event_date_hour\": \"2025-07-03T11:11:45\",\r",
					"            \"event_date_hour_utc\": \"2025-07-03T14:11:45Z\",\r",
					"            \"authorization_date_hour\": \"2025-07-03T11:11:45\",\r",
					"            \"original_authorization_date_hour\": \"2025-07-03T11:11:24\",\r",
					"            \"original_event_date_hour_utc\": \"2025-07-03T14:11:24Z\",\r",
					"            \"account_id\": 287146203,\r",
					"            \"card_id\": 7133380,\r",
					"            \"program_id\": 3155,\r",
					"            \"org_operation_id\": 13811,\r",
					"            \"authorization_id\": 16248544153,\r",
					"            \"customer_id\": 287603833,\r",
					"            \"type\": \"AUTH_EVENT\",\r",
					"            \"caller\": \"MASTERCARD\",\r",
					"            \"mti\": \"1240\",\r",
					"            \"extended_authorization_days\": null,\r",
					"            \"pan\": \"TfFR59DgTO4KNlVOtMZkGKs40xwqQ4ckypfeeVzm0lNKOpMi/HIQNsnQf8r9lMElDWTs6lo6APs3nw9bGrff7w==\",\r",
					"            \"nsu\": \"311897\",\r",
					"            \"retrieval_reference_number\": \"311897\",\r",
					"            \"authorization_code\": \"JE32K\",\r",
					"            \"authorization_response_code\": \"00\",\r",
					"            \"processing_code\": \"003800\",\r",
					"            \"principal_amount\": 120,\r",
					"            \"contract_amount\": 120,\r",
					"            \"installment_amount\": 40,\r",
					"            \"local_amount\": 120,\r",
					"            \"settlement_amount\": 340,\r",
					"            \"number_of_installments\": 3,\r",
					"            \"airport_tax\": null,\r",
					"            \"local_currency_code\": \"840\",\r",
					"            \"cardholder_currency_code\": \"840\",\r",
					"            \"settlement_currency_code\": \"840\",\r",
					"            \"local_currency_code_literal\": \"USD\",\r",
					"            \"cardholder_currency_code_literal\": \"USD\",\r",
					"            \"settlement_currency_code_literal\": \"USD\",\r",
					"            \"authorization_status\": 2,\r",
					"            \"custom_response_code\": \"\",\r",
					"            \"acquirer_bin\": null,\r",
					"            \"merchant_category_id\": \"5199\",\r",
					"            \"merchant_name\": \"Matheus Carvalho QA\",\r",
					"            \"merchant_city\": \"Prince Isabel PB\",\r",
					"            \"merchant_state_or_country\": \"USA\",\r",
					"            \"merchant_zip_code\": \"\",\r",
					"            \"merchant_denial_code\": null,\r",
					"            \"merchant_terminal\": \"\",\r",
					"            \"soft_descriptor\": \"Matheus Carvalho QAPrince Isabel PBBRA\",\r",
					"            \"card_acceptor_id\": \"\",\r",
					"            \"point_of_sale\": {\r",
					"                \"entry_mode\": \"051\"\r",
					"            },\r",
					"            \"transaction_status\": null,\r",
					"            \"password_present\": false,\r",
					"            \"cvv_present\": false,\r",
					"            \"track1_present\": false,\r",
					"            \"track2_present\": false,\r",
					"            \"arqc_present\": false,\r",
					"            \"advice_reason_code\": \"\",\r",
					"            \"advice_detail_code\": \"\",\r",
					"            \"incoming_response_code\": \"00\",\r",
					"            \"incoming_authorization_code\": \"054BA4\",\r",
					"            \"postings\": {\r",
					"                \"cash_back_amount\": 0\r",
					"            },\r",
					"            \"rates\": {\r",
					"                \"conversion_rate\": 1,\r",
					"                \"cardholder_conversion_rate\": 1,\r",
					"                \"settlement_conversion_rate\": 1\r",
					"            },\r",
					"            \"card_owner\": {\r",
					"                \"account_id\": 287146203,\r",
					"                \"customer_id\": 287603833\r",
					"            },\r",
					"            \"installments_information\": [\r",
					"                {\r",
					"                    \"installment_amount\": 40,\r",
					"                    \"principal_amount\": 40,\r",
					"                    \"number\": 1,\r",
					"                    \"postings\": {},\r",
					"                    \"calculated_fees\": []\r",
					"                },\r",
					"                {\r",
					"                    \"installment_amount\": 40,\r",
					"                    \"principal_amount\": 40,\r",
					"                    \"number\": 2,\r",
					"                    \"postings\": {},\r",
					"                    \"calculated_fees\": []\r",
					"                },\r",
					"                {\r",
					"                    \"installment_amount\": 40,\r",
					"                    \"principal_amount\": 40,\r",
					"                    \"number\": 3,\r",
					"                    \"postings\": {},\r",
					"                    \"calculated_fees\": []\r",
					"                }\r",
					"            ],\r",
					"            \"tid\": null,\r",
					"            \"ledger_update_id\": null,\r",
					"            \"conciliation_type\": \"DUAL_MESSAGE\",\r",
					"            \"token_information\": null,\r",
					"            \"metadata\": {\r",
					"                \"TimeSpentInMs\": 1985\r",
					"            },\r",
					"            \"validation_results\": [\r",
					"                {\r",
					"                    \"name\": \"CARD_EXISTS\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_FOUND\",\r",
					"                    \"description\": \"Card exists.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"token\": \"\",\r",
					"                        \"type\": \"RECURRING\",\r",
					"                        \"pan_hash\": \"El6lXtzJxc/DHj+96w9n+UcFRPzmDgCBpmFuSF1VJy1wI6G5ou5S9PQmHgwb2B0d/00uTsoTLPLi0WPd0+15tA==\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_MODE\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_MODE_VALID\",\r",
					"                    \"description\": \"Valid card mode\",\r",
					"                    \"additional_data\": {\r",
					"                        \"mode_type\": \"CREDIT\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_TOKEN_STATUS\",\r",
					"                    \"status\": \"SKIPPED\",\r",
					"                    \"reason\": \"SKIPPED\",\r",
					"                    \"description\": \"Validation not executed\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"PROGRAM\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"PROGRAM_FOUND\",\r",
					"                    \"description\": \"Program 14043 found.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"program_id\": 14043\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"PROCESSING_CODE\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"PROCESSING_CODE_FOUND\",\r",
					"                    \"description\": \"Processing code by network 00 and processing code mapped is 003800.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"processing_code_by_network\": \"00\",\r",
					"                        \"processing_code_mapped\": \"003800\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"PLATFORM_CONFIG\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"PLATFORM_CONFIG_FOUND\",\r",
					"                    \"description\": \"Program found.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"PROGRAM_CONFIG\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"PROGRAM_CONFIG_FOUND\",\r",
					"                    \"description\": \"Program found.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"AUTHORIZATION_DISABLED\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"AUTHORIZATION_CONFIG_APPROVED\",\r",
					"                    \"description\": \"Authorization enabled for current transaction\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"DCC\",\r",
					"                    \"status\": \"SKIPPED\",\r",
					"                    \"reason\": \"NOT_DCC_TRANSACTION\",\r",
					"                    \"description\": \"It is not a DCC transaction.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"BALANCE_CONFIG\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"BALANCE_CONFIG_FOUND\",\r",
					"                    \"description\": \"Balance Config exists.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CONTACTLESS\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CONTACTLESS_ENABLED\",\r",
					"                    \"description\": \"Contactless enabled.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"is_contactless_enabled\": true,\r",
					"                        \"entry_mode\": \"051\",\r",
					"                        \"is_token_present\": false\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"ACCOUNT_TYPE\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"ACCOUNT_TYPE_VALID\",\r",
					"                    \"description\": \"Valid account type selection.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"account_type\": \"30\",\r",
					"                        \"account_type_selection\": \"CREDIT\",\r",
					"                        \"card_mode\": \"CREDIT\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_ATC\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_ATC_VALID\",\r",
					"                    \"description\": \"Received 2 but the last is [1]. Used these params: MinOffset: null, MaxOffset: null, IsAdvice: false.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"inputted_card_atc\": \"2\",\r",
					"                        \"persisted_card_atc\": \"[1]\",\r",
					"                        \"is_advice\": false,\r",
					"                        \"merchant_category\": \"0742\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"OPERATION\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"VALID_OPERATION\",\r",
					"                    \"description\": \"Valid operation (003800) for OrgId (TN-ef23ffe3-c69b-4e9c-ab22-d865fe0a25ee) and ProgramId (14043).\",\r",
					"                    \"additional_data\": {\r",
					"                        \"org_id\": \"TN-ef23ffe3-c69b-4e9c-ab22-d865fe0a25ee\",\r",
					"                        \"processing_code\": \"003800\",\r",
					"                        \"program_id\": \"14043\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"PASSWORD_ATTEMPTS\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\r",
					"                    \"description\": \"Password tries is valid.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"password_max_tries\": \"3\",\r",
					"                        \"password_tries\": \"0\",\r",
					"                        \"has_invalid_password\": false\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\r",
					"                    \"description\": \"Card inputted expiration date is valid.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"expiration_date\": \"3006\",\r",
					"                        \"inputted_expiration_date\": \"\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_VALID_UNTIL\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_VALID_UNTIL_VALID\",\r",
					"                    \"description\": \"Card is valid.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_EXPIRATION_DATE\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_NOT_EXPIRED\",\r",
					"                    \"description\": \"Card not expired.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"expiration_date\": \"2030-06-30\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_STATUS\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_STATUS_VALID\",\r",
					"                    \"description\": \"Card status: NORMAL.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"status\": \"NORMAL\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_MODE_STATUS\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CARD_MODE_STATUS_ACTIVE\",\r",
					"                    \"description\": \"Valid card mode status\",\r",
					"                    \"additional_data\": {\r",
					"                        \"status\": \"ACTIVE\"\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"ACCOUNT\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"ACCOUNT_FOUND\",\r",
					"                    \"description\": \"Account found.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"account_id\": 287146203\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"ACCOUNT_LIMITS\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"ACCOUNT_LIMITS_FOUND\",\r",
					"                    \"description\": \"Account limits exists.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"account_id\": 287146203\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"ACCOUNT_STATUS\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"ACCOUNT_STATUS_VALID\",\r",
					"                    \"description\": \"Account has a valid status\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"ZERO_AMOUNT\",\r",
					"                    \"status\": \"SKIPPED\",\r",
					"                    \"reason\": \"ZERO_AMOUNT_SKIPPED\",\r",
					"                    \"description\": \"Skip validation\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CREDIT_LIMIT\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"CREDIT_LIMIT_IMPACT_FOUND\",\r",
					"                    \"description\": \"Acceptances found.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"MAX_TRANSACTIONS_FOR_TEMPORARY_CARD\",\r",
					"                    \"status\": \"SKIPPED\",\r",
					"                    \"reason\": \"MAX_TRANSACTIONS_IF_TEMPORARY_CARD_SKIPPED\",\r",
					"                    \"description\": \"Card is not temporary.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"CARD_TRANSACTION_LIMIT\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"LIMIT_APPROVED\",\r",
					"                    \"description\": \"Card transaction sufficient limit.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"LEDGER\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"LEDGER_APPROVED\",\r",
					"                    \"description\": \"Ledger validations approved.\",\r",
					"                    \"additional_data\": {\r",
					"                        \"available_credit_limit\": 2000.88,\r",
					"                        \"total_credit_limit\": 2559,\r",
					"                        \"max_credit_limit\": 2559,\r",
					"                        \"dry_run\": false,\r",
					"                        \"validation_results\": [\r",
					"                            {\r",
					"                                \"account_id\": 287146203,\r",
					"                                \"ledger_operation_status\": {\r",
					"                                    \"validation_status\": \"APPROVED\"\r",
					"                                },\r",
					"                                \"available_amounts\": {\r",
					"                                    \"validation_status\": \"APPROVED\",\r",
					"                                    \"details\": {\r",
					"                                        \"result\": {\r",
					"                                            \"available_credit_limit\": 1880.88,\r",
					"                                            \"available_withdraw_limit\": 767.7,\r",
					"                                            \"available_installment_limit\": 0,\r",
					"                                            \"available_savings_account_limit\": 0,\r",
					"                                            \"held_funds\": 0,\r",
					"                                            \"additional_funds\": 0,\r",
					"                                            \"total_overdraft_limit\": 0,\r",
					"                                            \"overlimit\": 0\r",
					"                                        }\r",
					"                                    }\r",
					"                                }\r",
					"                            }\r",
					"                        ]\r",
					"                    }\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"RULES\",\r",
					"                    \"status\": \"SKIPPED\",\r",
					"                    \"reason\": \"RULES_NOT_ENABLED\",\r",
					"                    \"description\": \"Rules Evaluation not enabled.\",\r",
					"                    \"additional_data\": {}\r",
					"                },\r",
					"                {\r",
					"                    \"name\": \"ANTI_FRAUD\",\r",
					"                    \"status\": \"APPROVED\",\r",
					"                    \"reason\": \"ANTI_FRAUD_APPROVE\",\r",
					"                    \"description\": \"AntiFraud approved this authorization\",\r",
					"                    \"additional_data\": {}\r",
					"                }\r",
					"            ],\r",
					"            \"related_accounts\": [\r",
					"                {\r",
					"                    \"account_id\": 287146203,\r",
					"                    \"is_centralizer\": false,\r",
					"                    \"level\": 0,\r",
					"                    \"parent_account_id\": null\r",
					"                }\r",
					"            ],\r",
					"            \"ledger_impact_accounts\": null,\r",
					"            \"pismo_metadata\": {\r",
					"                \"network-transactions-api\": {\r",
					"                    \"aggregator_key\": \"impact=AvailableCreditLimit::operation=DEBIT::accounts=287146203\"\r",
					"                }\r",
					"            },\r",
					"            \"conciliation_information\": {\r",
					"                \"message_number\": \"01\",\r",
					"                \"acquirer_reference_number\": \"ABC123YZ25\",\r",
					"                \"processing_julian_date\": \"1022\",\r",
					"                \"interchange_fee_amount\": null,\r",
					"                \"interchange_fee_indicator\": null,\r",
					"                \"installment_number\": null,\r",
					"                \"file_path\": \"fromEndpoint/endpointCall.ipm\",\r",
					"                \"is_first_confirmation\": true\r",
					"            },\r",
					"            \"origin\": \"\",\r",
					"            \"file_date\": \"\",\r",
					"            \"atc\": 3,\r",
					"            \"anti_fraud_execution_time\": 0,\r",
					"            \"labels\": [\r",
					"                \"INCREMENT_ATC\",\r",
					"                \"INCREMENT_NUMBER_OF_TRANSACTIONS\"\r",
					"            ],\r",
					"            \"cancelled_by_elapsed_time\": false,\r",
					"            \"created_from_authorization_not_found\": false,\r",
					"            \"anti_fraud_url\": null,\r",
					"            \"authorization_url\": null,\r",
					"            \"three_domain_security\": {\r",
					"                \"service_indicator\": \"\",\r",
					"                \"electronic_commerce_indicator\": \"\",\r",
					"                \"cardholder_authentication\": \"\",\r",
					"                \"authentication_data\": \"\"\r",
					"            },\r",
					"            \"single_installment\": false,\r",
					"            \"authorization_processed\": true\r",
					"        }\r",
					"    },\r",
					"    \"messageType\": [\r",
					"        \"urn:message:Authorizer.Clearing.Operational.Confirmation.Infrastructure.Strategies.Pismo.Payloads:NetworkAuthorizationEvent\"\r",
					"    ],\r",
					"    \"CorrelationId\": \"1a0858e8-1c33-94db-bb2a-7184a3f61118\"\r",
					"}\r",
					"\r",
					"pm.collectionVariables.set('rabbitPayload', JSON.stringify(rabbitPayload))\r",
					"\r",
					"\r",
					"// authorization category\r",
					"    const authorizationCategory = {\r",
					"    1: { description: \"AUTHORIZATION\" },\r",
					"    2: { description: \"CANCELLATION\" },\r",
					"    3: { description: \"CONFIRMATION\" },\r",
					"    4: { description: \"DECLINED\" },\r",
					"    5: { description: \"INSTALLMENT\" },\r",
					"    6: { description: \"PARTIAL_CANCELLATION\" },\r",
					"    7: { description: \"VOUCHER\" },\r",
					"    8: { description: \"REPLACEMENT\" }\r",
					"};\r",
					"pm.collectionVariables.set('authorizationCategory', JSON.stringify(authorizationCategory));\r",
					"\r",
					"// rabbit credentials\r",
					"    function getBasicAuthCredentialsByEnvironment(envName) {\r",
					"        const environmentCredentials = {\r",
					"            \"Local\": {\r",
					"                login: 'local_user',\r",
					"                senha: 'local_password'\r",
					"            },\r",
					"            \"Staging\": {\r",
					"                login: 'dev',\r",
					"                senha: 'R_u!7cy*2-BLpVQLkV!9'\r",
					"            },\r",
					"            \"Sandbox\": {\r",
					"                login: 'dev',\r",
					"                senha: 'yC24rTyzb2_qkvEyPfPw'\r",
					"            }\r",
					"            // Adicione outros ambientes se necessário\r",
					"        };\r",
					"\r",
					"        const creds = environmentCredentials[envName] || {\r",
					"            login: 'dev',\r",
					"            senha: 'R_u!7cy*2-BLpVQLkV!9'\r",
					"        };\r",
					"\r",
					"        return btoa(`${creds.login}:${creds.senha}`);\r",
					"    }\r",
					"\r",
					"    const envName = pm.environment.name;\r",
					"    const credentials = getBasicAuthCredentialsByEnvironment(envName);\r",
					"    //console.log(`Ambiente: ${envName}, Authorization header: Basic ${credentials}`);\r",
					"\r",
					"pm.collectionVariables.set('rabbitToken', credentials)\r",
					"\r",
					"// declara function sentNetworkEvent\r",
					"const sendNetworkEventBody = minifiedFunction(`return new Promise((resolve, reject) => {\r",
					"  try {\r",
					"    const {\r",
					"      pm,\r",
					"      correlationId,\r",
					"      destinationAddress,\r",
					"      messageNamespace,\r",
					"      mti,\r",
					"      conciliationType,\r",
					"      type,\r",
					"      debitProgramCard,\r",
					"      authorizationCategory,\r",
					"      authorizationResponseCode = \"00\",\r",
					"      pan = null,\r",
					"      requestPayload,\r",
					"      exchangeName,\r",
					"      caller,\r",
					"      custom_response_code = \"\",\r",
					"      adviceCode = \"\"\r",
					"    } = params;\r",
					"    const {\r",
					"      id: authorizationId,\r",
					"      fields = {}\r",
					"    } = requestPayload || {};\r",
					"    const {\r",
					"      amount_transaction: randomAmount,\r",
					"      card_id: cardId,\r",
					"      nsu,\r",
					"      authorization_code: authorizationCode,\r",
					"      merchant_name: merchantName,\r",
					"      merchant_state_or_country_code: countryCode,\r",
					"      currency,\r",
					"      account_id: accountId,\r",
					"      acquirer_code: acquirerCode,\r",
					"      processing_code: processingCode,\r",
					"      retrieval_reference_number: retrievalReferenceNumber,\r",
					"      number_of_installments: numberOfInstallments,\r",
					"      original_network_data: originalNetworkData,\r",
					"      mcc,\r",
					"      merchant_city: mercharCity,\r",
					"      merchant_id_code: merchantIdCode,\r",
					"      response_code: responseCode\r",
					"    } = fields;\r",
					"\r",
					"   let panHash = pan;\r",
					"   let adviceReson = adviceCode;\r",
					"\r",
					"    if(originalNetworkData.de2_primary_account_number != '' && originalNetworkData.de2_primary_account_number != null){\r",
					"    panHash = originalNetworkData.de2_primary_account_number;\r",
					"    }\r",
					"\r",
					"    const credentials = pm.collectionVariables.get(\"rabbitToken\");\r",
					"    const networkAuthorizationEventId = correlationId;\r",
					"    const networkAuthorizationEventDate = (new Date()).toISOString();\r",
					"    const customerId = pm.globals.get('customerId', 103194628);\r",
					"    const basePayload = pm.collectionVariables.get(\"rabbitPayload\");\r",
					"    let networkEventBody = JSON.parse(basePayload);\r",
					"    networkEventBody.destinationAddress = destinationAddress;\r",
					"    networkEventBody.messageType = [ \"urn:message:\" + messageNamespace ];\r",
					"    networkEventBody.message.data.authorization_status = 2;\r",
					"    networkEventBody.message.data.mti = mti;\r",
					"    networkEventBody.message.data.conciliation_type = conciliationType;\r",
					"    networkEventBody.message.data.authorization_response_code = authorizationResponseCode;\r",
					"    networkEventBody.message.event_id = networkAuthorizationEventId.toString();\r",
					"    networkEventBody.message.timestamp = networkAuthorizationEventDate;\r",
					"    networkEventBody.message.org_id = \"TN-\" + networkAuthorizationEventId.toString();\r",
					"    networkEventBody.message.cid = networkAuthorizationEventId.toString();\r",
					"\r",
					"    Object.assign(networkEventBody.message.data, {\r",
					"      authorization_category: authorizationCategory,\r",
					"      org_id: \"TN-\" + networkAuthorizationEventId.toString(),\r",
					"      cid: networkAuthorizationEventId.toString(),\r",
					"      unique_cid: networkAuthorizationEventId.toString(),\r",
					"      event_date_hour: networkAuthorizationEventDate,\r",
					"      event_date_hour_utc: networkAuthorizationEventDate,\r",
					"      authorization_date_hour: networkAuthorizationEventDate,\r",
					"      original_authorization_date_hour: networkAuthorizationEventDate,\r",
					"      original_event_date_hour_utc: networkAuthorizationEventDate,\r",
					"      account_id: accountId,\r",
					"      card_id: cardId,\r",
					"      authorization_id: authorizationId,\r",
					"      customer_id: customerId,\r",
					"      principal_amount: randomAmount,\r",
					"      contract_amount: randomAmount,\r",
					"      installment_amount: randomAmount,\r",
					"      pan: panHash,\r",
					"      nsu: nsu,\r",
					"      retrieval_reference_number: retrievalReferenceNumber,\r",
					"      authorization_code: authorizationCode,\r",
					"      authorization_response_code: authorizationResponseCode,\r",
					"      local_currency_code: currency,\r",
					"      cardholder_currency_code: currency,\r",
					"      merchant_name: merchantName,\r",
					"      acquirer_bin: acquirerCode,\r",
					"      processing_code: processingCode,\r",
					"      merchant_state_or_country: countryCode,\r",
					"      program_id: debitProgramCard,\r",
					"      caller: caller,\r",
					"      custom_response_code: custom_response_code,\r",
					"      incoming_response_code: responseCode,\r",
					"      number_of_installments: numberOfInstallments,\r",
					"      merchant_category_id: mcc,\r",
					"      merchant_city: mercharCity,\r",
					"      card_acceptor_id: merchantIdCode,\r",
					"      advice_reason_code: adviceReson\r",
					"    });\r",
					"\r",
					"    networkEventBody.message.Id = networkAuthorizationEventId.toString();\r",
					"    networkEventBody.correlationId = networkAuthorizationEventId.toString();\r",
					"    const requestBody = {\r",
					"      properties: {\r",
					"        \"content-type\": \"application/vnd.masstransit+json\"\r",
					"      },\r",
					"      routing_key: \"\",\r",
					"      payload: JSON.stringify(networkEventBody),\r",
					"      payload_encoding: \"string\"\r",
					"    };\r",
					"    const currentRabbitUrl = pm.environment.get('UrlRabbit');\r",
					"    const url = \\`\\${currentRabbitUrl}/api/exchanges/%2F/\\${exchangeName}/publish\\`;\r",
					"    const envName = pm.environment.name;\r",
					"    const headers = {\r",
					"      'Content-Type': 'application/vnd.masstransit+json',\r",
					"      'Authorization': 'Basic Z3Vlc3Q6Z3Vlc3Q='\r",
					"    };\r",
					"    if (envName !== \"Local\") {\r",
					"      headers['Authorization'] = \\`Basic \\${credentials}\\`;\r",
					"    }\r",
					"    pm.sendRequest({\r",
					"      url,\r",
					"      method: 'POST',\r",
					"      header: headers,\r",
					"      body: {\r",
					"        mode: 'raw',\r",
					"        raw: JSON.stringify(requestBody)\r",
					"      }\r",
					"    }, (err, response) => {\r",
					"      if (err) {\r",
					"        reject(err);\r",
					"        return;\r",
					"      }\r",
					"      var result = \"Fila: \" + messageNamespace + \", Status: \" + response.stream.toString();\r",
					"      resolve(result);\r",
					"    });\r",
					"  } catch (error) {\r",
					"    reject(error);\r",
					"  }\r",
					"});`);\r",
					"\r",
					"const sentNetworkBody = minifiedFunction(sendNetworkEventBody);\r",
					"//pm.collectionVariables.set(\"sendNetworkEvent\", sendNetworkEventBody);\r",
					"\r",
					"// busca transação no judge => get\r",
					"  const findAuthorizationTransactionBody = `\r",
					"    return new Promise((resolve, reject) => {\r",
					"        try {\r",
					"            const { pm, fields, correlationId } = params;\r",
					"\r",
					"            const {\r",
					"                nsu,\r",
					"                authorization_code: authorizationCode,\r",
					"                retrieval_reference_number: retrievalReferenceNumber\r",
					"            } = fields;\r",
					"\r",
					"            const envName = pm.environment.name;\r",
					"\r",
					"            const headers = {\r",
					"                'Content-Type': 'application/json',\r",
					"                'x-correlation-id': correlationId,\r",
					"                'x-cid': 'testandoooo',\r",
					"                'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA',\r",
					"                'x-pismo-sign': 'eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw',\r",
					"                'bypass-validation': pm.collectionVariables.get(\"byPassSecretSTG\")\r",
					"            };\r",
					"\r",
					"            if (envName === \"Local\")\r",
					"            {\r",
					"                headers['unlock-get-transaction'] = \"eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTY3ODcxNjg0OSwiaWF0IjoxNjc4NzE2ODQ5fQ.YgDVfDTVlEP3VKSCMCsanMRnJupFr9fB_jeNTpnBQ74\";\r",
					"                headers['bypass-validation'] = pm.collectionVariables.get(\"byPassSecretLocal\");\r",
					"            }\r",
					"            else if (envName === \"Sandbox\")\r",
					"            {\r",
					"                headers['unlock-get-transaction'] = pm.collectionVariables.get(\"byPassSecretSandbox\")\r",
					"            }\r",
					"            else\r",
					"            {\r",
					"                headers['unlock-get-transaction'] = pm.collectionVariables.get(\"byPassSecretSTG\")\r",
					"            }\r",
					"\r",
					"\r",
					"            const urlJudge = pm.environment.get('UrlJudge') +\r",
					"                \"/GetTransaction?authorizationCode=\" + authorizationCode +\r",
					"                \"&nsu=\" + nsu +\r",
					"                \"&retrievalReferenceNumber=\" + retrievalReferenceNumber;\r",
					"\r",
					"            pm.sendRequest({\r",
					"                url: urlJudge,\r",
					"                method: 'GET',\r",
					"                header: headers\r",
					"            }, (err, response) => {\r",
					"                if (err) {\r",
					"                    return reject(err);\r",
					"                }\r",
					"\r",
					"                if (response.code === 200) {\r",
					"                    const responseData = response.json ? response.json() : {};\r",
					"                    resolve(responseData);\r",
					"                } else {\r",
					"                    const errorMsg = \"Erro na resposta: código \" + response.code;\r",
					"                    reject(new Error(errorMsg));\r",
					"                }\r",
					"            });\r",
					"        } catch (error) {\r",
					"            reject(error);\r",
					"        }\r",
					"    });\r",
					"    `;\r",
					"    \r",
					"    const findTransaction = minifiedFunction(findAuthorizationTransactionBody);\r",
					"    pm.collectionVariables.set(\"findAuthorizationTransaction\", findTransaction);\r",
					"\r",
					"// validacao na mambu\r",
					"\r",
					"const validateMambuFunction = `\r",
					"    return new Promise((resolve, reject) => {\r",
					"        try {\r",
					"        const { pm, aprovedOrReversedm, proxy, authorizationId } = params;\r",
					"        const mambuCredentials = btoa('svc_mambu_api_stg:B@ankacess!209JuTMambu016codesec');\r",
					"        const urlMambu = \\`\\${pm.environment.get('UrlApiMambu')}/api/cards/\\${proxy}/authorizationholds/\\${authorizationId}\\`;\r",
					"        const headers = { \r",
					"            'content-type': 'application/json', \r",
					"            'Authorization': \\`Basic \\${mambuCredentials}\\`, \r",
					"            'accept': 'application/vnd.mambu.v2+json' \r",
					"        };\r",
					"\r",
					"        pm.sendRequest({ url: urlMambu, method: 'GET', header: headers }, (err, response) => {\r",
					"            if (err) {\r",
					"            return reject(err);\r",
					"            }\r",
					"            try {\r",
					"            const responseData = JSON.parse(response.stream.toString());\r",
					"            resolve(responseData);\r",
					"            } catch (e) {\r",
					"            reject(e);\r",
					"            }\r",
					"        });\r",
					"        } catch (error) {\r",
					"        reject(error);\r",
					"        }\r",
					"    });\r",
					"    `;\r",
					"\r",
					"pm.collectionVariables.set('validateMambuFunction', validateMambuFunction)\r",
					"\r",
					"// envia novo request pro judge, util para reversão.\r",
					"    const sendJudgeTransactionRequest = `\r",
					"  return new Promise((resolve, reject) => {\r",
					"    try {\r",
					"      const { pm, requestBody, correlationId } = params;\r",
					"\r",
					"      const url = \\`${pm.environment.get('UrlJudge')}/transactions\\`;\r",
					"      const envName = pm.environment.name;\r",
					"\r",
					"            const headers = {\r",
					"                'Content-Type': 'application/json',\r",
					"                'x-correlation-id': correlationId,\r",
					"                'x-cid': 'testandoooo',\r",
					"                'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA',\r",
					"                'x-pismo-sign': 'eyJraWQiOiI3MjYyYTYwMjhlNTFkYmJkMTJkMWY0OGFmNGJkNmM0NDAwNDIzYWQzIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJ4bU94V1J2RUNSUStydVdZR1lcL1wvamxpZ2lUSVUzQjBMaGE5cldtNmNwaXc9Iiwic3ViIjoiYXV0aG9yaXphdGlvbiIsImFjY291bnQtaWQiOjMwNTQwLCJpc3MiOiJhcGkucGlzbW8uaW8iLCJleHAiOjE1NzM2OTY4MDAsImlhdCI6MTU3MjgzMjgwMCwicGFuLWhhc2giOiJURVNURS1qY01rNzNnRjlnbE1vdWtTOWRaVHBudko3clN5SkUwcTRIR3NGSEdSMkVZQzBSTWlBRFRwbGVrbkhEdEhSbWdXV3djTFlaZVpVNmRtakN4VmVHT0VpZz09In0.QOiulHmVaxUzmyK9hWTKelXQ63PCtZG4hzwG1-pIOIOmPUWPvO9WRxGWui2Z2hIDeOD3nK4feKHqHiFRVBjUDh7MIpUkOOxowDieYC9niZ3RFVK9okoXi0DWXDiaZEXd4fGbGFE6CQrAET1kDU3j__QDR1pkIjOv7hQJbT8n2JhSlVKhPi2KST_cIMcwZMzzf8xjbVqFVbje17t0GwrDKotTIAo-Ta8_wr_CLtnTQ3RCaqEy5Z6J6kF3xv4-ENsD83qAOzgaiZ8q1iY7rSHIWdxXTFhgC760GTgi9asmDFc2Ky8FNxFW5qpNFefO14nEaKdXzd_JHYu21YebFWro7A',\r",
					"                    'bypass-validation':pm.collectionVariables.get(\"byPassSecretSTG\")\r",
					"            };\r",
					"\r",
					"            if (envName === \"Local\")\r",
					"            {\r",
					"                headers['unlock-get-transaction'] = pm.collectionVariables.get(\"byPassSecretLocal\")\r",
					"                headers['bypass-validation'] = pm.collectionVariables.get(\"byPassSecretSTG\")\r",
					"            }\r",
					"            else if (envName === \"Sandbox\")\r",
					"            {\r",
					"                headers['unlock-get-transaction'] = pm.collectionVariables.get(\"byPassSecretSandbox\")\r",
					"                headers['bypass-validation'] = pm.collectionVariables.get(\"byPassSecretSandbox\")\r",
					"\r",
					"            }\r",
					"\r",
					"      pm.sendRequest(\r",
					"        {\r",
					"          url,\r",
					"          method: 'POST',\r",
					"          header: headers,\r",
					"          body: {\r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify(requestBody),\r",
					"          },\r",
					"        },\r",
					"        (err, response) => {\r",
					"          if (err) {\r",
					"            return reject(err);\r",
					"          }\r",
					"          try {\r",
					"            const responseData = JSON.parse(response.stream.toString());\r",
					"            resolve(responseData);\r",
					"          } catch (e) {\r",
					"            reject(e);\r",
					"          }\r",
					"        }\r",
					"      );\r",
					"    } catch (error) {\r",
					"      reject(error);\r",
					"    }\r",
					"  });\r",
					"`;\r",
					"\r",
					"pm.collectionVariables.set('sendJudgeTransactionRequest', sendJudgeTransactionRequest)\r",
					"\r",
					"\r",
					"const cardApiUrl = pm.environment.get('core_card_new_url');\r",
					"// pos 18491673\r",
					"///7133380\r",
					"// 89640330\r",
					"let cardId = 7133380;\r",
					"\r",
					"/****\r",
					" * \r",
					" * /**** objeto por brand */\r",
					"\r",
					"    pm.collectionVariables.set('brandName', 'Mastercard')\r",
					"    const activedBrand = pm.variables.get('brandName');\r",
					"\r",
					"    /********Objetos de original network data */\r",
					"    let masterOriginalNetwork = {\r",
					"        \"de2_primary_account_number\": `${pm.variables.get(\"panDebit\")}`,\r",
					"        \"de3_processing_code\": {\r",
					"            \"sf1_cardholder_transaction_type_code\": `${pm.variables.get(\"transactionType\")}`,\r",
					"            \"sf2_cardholder_from_account_type_code\": \"20\",\r",
					"            \"sf3_cardholder_to_account_type_code\": \"00\"\r",
					"        },\r",
					"        \"de4_amount_transaction\": \"000000010012\",\r",
					"        \"de5_amount_settlement\": \"000000010012\",\r",
					"        \"de6_amount_cardholder_billing\": \"000000010012\",\r",
					"        \"de7_tranmission_date_and_time\": {\r",
					"            \"sf1_date\": \"0222\",\r",
					"            \"sf2_time\": \"160408\"\r",
					"        },\r",
					"        \"de9_conversion_rate_settlement\": {\r",
					"            \"sf1_decimal_indicator\": \"6\",\r",
					"            \"sf2_conversion_rate\": \"1000000\"\r",
					"        },\r",
					"        \"de10_conversion_rate_cardholder_billing\": {\r",
					"            \"sf1_decimal_indicator\": \"6\",\r",
					"            \"sf2_cardholderbilling_conversion_rate\": \"1000000\"\r",
					"        },\r",
					"        \"de11_stan\": \"000003\",\r",
					"        \"de12_time_local_transaction\": \"160408\",\r",
					"        \"de13_date_local_transaction\": \"0222\",\r",
					"        \"de14_date_expiration\": \"2702\",\r",
					"        \"de15_date_settlement\": \"0222\",\r",
					"        \"de16_date_conversion\": \"0222\",\r",
					"        \"de18_merchant_type\": `${pm.variables.get(\"mcc\")}`,\r",
					"        \"de22_pos_entry_mode\": {\r",
					"            \"sf1_pos_terminal_pan_entry_mode\": `${pm.variables.get(\"entryMode\")}`,\r",
					"            \"sf2_pos_terminal_pin_entry_mode\": \"1\"\r",
					"        },\r",
					"        \"de26_pos_pin_capture_code\": \"04\",\r",
					"        \"de28_amount_transaction_fee\": {},\r",
					"        \"de29_amount_settlement_fee\": {},\r",
					"        \"de30_amount_transaction_processing_fee\": {},\r",
					"        \"de31_amount_settlement_processing_fee\": {},\r",
					"        \"de32_acquiring_institution_id_code\": \"728384008\",\r",
					"        \"de33_forwarding_institution_id_code\": \"9000000283\",\r",
					"        \"de37_retrieval_reference_number\": {\r",
					"            \"sf1_transaction_date_and_initiator_discretionary_data\": \"3400001\",\r",
					"            \"sf2_terminal_transaction_number\": \"00005\"\r",
					"        },\r",
					"        \"de41_card_acceptor_terminal_id\": \"1234ABCD\",\r",
					"        \"de42_card_acceptor_id_code\": \"963852CARDACC  \",\r",
					"        \"de43_card_acceptor_name_location_for_all_transactions\": {\r",
					"                            \"sf1_card_acceptor_name\": \"SHOPEE* BAZAR \",\r",
					"                            \"sf2_space\": \" \",\r",
					"                            \"sf3_card_acceptor_city\": \"S o Paulo    \",\r",
					"                            \"sf4_space\": \" \",\r",
					"                            \"sf5_card_acceptor_state_or_country_code\": \"BRA\"\r",
					"                        },\r",
					"        \"de48_additional_data_private_user\": {\r",
					"            \"de48_tcc\": \"R\",\r",
					"            \"de48_start\": \"277\",\r",
					"            \"de48_size\": \"001\",\r",
					"            \"se11_key_exchange_block_data\": {},\r",
					"            \"se13_mastercard_hosted_mobile_phone_top_up_request_data\": {},\r",
					"            \"se15_authorization_system_advice_date_and_time\": {},\r",
					"            \"se18_service_parameters\": {},\r",
					"            \"se23_payment_initiation_channel\": {},\r",
					"            \"se25_mastercard_cash_program_data\": {},\r",
					"            \"se26_wallet_program_data\": {},\r",
					"            \"se33_pan_mapping_file_information\": {},\r",
					"            \"se34_atc_information\": {},\r",
					"            \"se36_visa_mmv\": {},\r",
					"            \"se37_additional_merchant_data\": {},\r",
					"            \"se40_eletronic_commerce_merchant_cardholder_certificate_serial_number\": {},\r",
					"            \"se41_eletronic_commercer_certificate_qualifying_information\": {},\r",
					"            \"se42_eletronic_commerce_indicator\": {},\r",
					"            \"se43_ucaf\": {\r",
					"                \r",
					"            },\r",
					"            \"se48_mobile_program_indicator\": {},\r",
					"            \"se49_time_validation_information\": {},\r",
					"            \"se51_merchant_on_behalf_services\": {},\r",
					"            \"se55_merchant_fraud_scoring_data\": {},\r",
					"            \"se57_security_services_additional_data_for_acquirers\": {},\r",
					"            \"se58_atm_additional_data\": {},\r",
					"            \"se61_pos_data_extended_condition_codes\": {},\r",
					"            \"se64_transit_program\": {},\r",
					"            \"se65_terminal_compliant_indicator\": {},\r",
					"            \"se66_authentication_data\": {\r",
					"                \"sf1_program_protocol\": \"2\",\r",
					"                \"sf2_directory_server_transaction_id\": `${pm.variables.get(\"authorizationId\")}`\r",
					"            },\r",
					"            \"se67_money_send_information\": {},\r",
					"            \"se74_additional_processing_information\": {},\r",
					"            \"se75_fraud_scoring_data\": {\r",
					"                                \"sf1_fraud_score\": \"046\",\r",
					"                                \"sf2_score_reason_code\": \"54\",\r",
					"                                \"sf3_rules_score\": \"046\",\r",
					"                                \"sf4_rules_reason_code1\": \"54\",\r",
					"                                \"sf5_rules_reason_code2\": \"00\"\r",
					"                            },\r",
					"            \"se78_payment_service_indicator\": {},\r",
					"            \"se79_chip_cvr_or_tvr_bit_error_results\": {},\r",
					"            \"se87_card_validation_code_result_or_cvv2\": \"M\",\r",
					"            \"se93_fleet_card_id_request_data\": {}\r",
					"        },\r",
					"        \"de49_currency_code_transaction\": \"840\",\r",
					"        \"de50_currency_code_settlement\": \"840\",\r",
					"        \"de51_currency_code_cardholder_billing\": \"840\",\r",
					"        \"de55_integrated_circuit_card\": {},\r",
					"        \"de60_advice_reason_code\": {},\r",
					"        \"de61_pos_data\": {\r",
					"            \"sf1_pos_terminal_attendance\": \"0\",\r",
					"            \"sf2_reserved_for_future_use\": \"0\",\r",
					"            \"sf3_pos_terminal_location\": \"0\",\r",
					"            \"sf4_pos_cardholder_presence\": \"0\",\r",
					"            \"sf5_pos_card_presence\": \"0\",\r",
					"            \"sf6_pos_card_capture_capabilities\": \"0\",\r",
					"            \"sf7_pos_transaction_status\": \"0\",\r",
					"            \"sf8_pos_transaction_security\": \"0\",\r",
					"            \"sf9_reserved_for_future_use\": \"0\",\r",
					"            \"sf10_cardholder_activated_terminal_level\": \"0\",\r",
					"            \"sf11_pos_card_data_terminal_input_capability_indicator\": \"0\",\r",
					"            \"sf12_pos_authorization_life_cycle\": \"00\",\r",
					"            \"sf13_pos_country_code_or_submerchant\": \"840\",\r",
					"            \"sf14_postal_code_or_submerchant\": \"6338500000\"\r",
					"        },\r",
					"        \"de63_network_data\": {\r",
					"            \"sf1_financial_network_code\": \"MC0\",\r",
					"            \"sf2_banknet_reference_number\": \"000030639\"\r",
					"        },\r",
					"        \"de90_original_data_elements\": {},\r",
					"        \"de94_service_indicator\": {},\r",
					"        \"de95_replacement_amounts\": {},\r",
					"        \"de97_amount_net_settlement\": {},\r",
					"        \"de112_additional_data_national_use\": {},\r",
					"        \"de120_record_data\": {},\r",
					"        \"de124_member_defined_data\": {},\r",
					"        \"start\": 1645545850625559600,\r",
					"        \"anti_fraud_url\": \"https://any-test.com\"\r",
					"    };\r",
					"    let visaOriginalNetwork = {\r",
					"        \"f2_primary_account_number\": \"[card-hash]\",\r",
					"        \"f3_processing_code\": \"002000\",\r",
					"        \"f4_amount_transaction\": \"000000001000\",\r",
					"        \"f6_amount_cardholder_billing\": \"000000000793\",\r",
					"        \"f7_transmission_date_and_time\": \"0516210120\",\r",
					"        \"f10_conversion_rate_cardholder_billing\": \"71982500\",\r",
					"        \"f11_stan\": \"009836\",\r",
					"        \"f12_time_local_transaction\": \"140120\",\r",
					"        \"f13_date_local_transaction\": \"0516\",\r",
					"        \"f14_date_expiration\": \"2609\",\r",
					"        \"f15_date_liquidation\": \"0517\",\r",
					"        \"f18_merchant_type\": \"5999\",\r",
					"        \"f19_acquiring_institution_country_code\": \"0076\",\r",
					"        \"f22_pos_entry_mode\": \"0100\",\r",
					"        \"f25_pos_condition_code\": \"59\",\r",
					"        \"f32_acquiring_institution_id_code\": \"476113\",\r",
					"        \"f34_electronic_ecommerce_data\": {\r",
					"        \"sf01_authentication_data\": {}\r",
					"        },\r",
					"        \"f37_retrieval_reference_number\": \"213621009836\",\r",
					"        \"f41_card_acceptor_terminal_id\": \"TERMID01\",\r",
					"        \"f42_card_acceptor_id_code\": \"CARD ACCEPTOR  \",\r",
					"        \"f43_card_acceptor_location\": \"ACQUIRER NAME            CITY NAME    BR\",\r",
					"        \"f44_additional_response_data\": \"4546546546\",\r",
					"        \"f48_additional_data_private\": \"01234567891011\",\r",
					"        \"f49_currency_code_transaction\": \"0986\",\r",
					"        \"f51_currency_code_cardholder_billing\": \"0840\",\r",
					"        \"f55_integrated_circuit_card\": {\r",
					"            \"sf2_cryptogram_information_data\": \"80\",\r",
					"            \"sf3_issuer_application_data\": \"09010A09B02003\",\r",
					"            \"sf5_terminal_verification_result\": \"0080099000\",\r",
					"            \"sf6_transaction_date\": \"221205\",\r",
					"            \"sf7_transaction_type\": \"00\",\r",
					"            \"sf8_amount_authorized\": \"000000099900\",\r",
					"            \"sf9_transaction_currency_code\": \"0986\",\r",
					"            \"sf10_application_interchange_profile\": \"3B00\",\r",
					"            \"sf11_terminal_country_code\": \"0076\",\r",
					"            \"sf12_cardholder_verification_method\": \"020300\",\r",
					"            \"sf13_terminal_capabilities\": \"E0F0C7\",\r",
					"            \"sf15_amount_other\": \"000000000000\",\r",
					"            \"sf23_application_transaction_counter\": \"002A\"\r",
					"        },\r",
					"        \"f56_payment_account_reference_data\": {},\r",
					"        \"f59_national_point_of_service_geographic_data\": \"0000099902200\",\r",
					"        \"f60_additional_pos_data\": \"000000070519\",\r",
					"        \"f62_custom_payment_services\": {\r",
					"        \"sf2_transaction_identifier\": \"0302136641547109\",\r",
					"        \"sf21_online_risk_assessment_risk_score_reason_codes\": \"095A\",\r",
					"        \"sf22_online_risk_assessment_condition_codes\": \"02C200\"\r",
					"        },\r",
					"        \"f63_private_use\": {\r",
					"        \"sf1_network_id\": \"0002\",\r",
					"        \"sf4_stip_switch_reason_code\": \"9001\"\r",
					"        },\r",
					"        \"f104_transaction_description_transaction_specific_data\": {\r",
					"        \"sf5d_installments_data\": {},\r",
					"        \"sf69_payment_format\": {},\r",
					"        \"sf67_national_payment_format\": {}\r",
					"        },\r",
					"        \"f117_national_use\": {\r",
					"        \"usage_6_argentina_agro\": {}\r",
					"        },\r",
					"        \"f123_verification_data\": {\r",
					"        \"token_data\": {\r",
					"            \"token_requestor_id\": \"999999\"\r",
					"        },\r",
					"        \"address_verification_data\": {},\r",
					"        \"activation_verification_data\": {}\r",
					"        },\r",
					"        \"f125_supporting_information_data\": {\r",
					"        \"token_device\": {},\r",
					"        \"wallet_provider\": {}\r",
					"        },\r",
					"        \"f126_visa_private_use_fields\": {\r",
					"        \"sf20_dsecure_indicator\": \"1\",\r",
					"        \"sf9_cavv_data\": \"5465465\",\r",
					"        \"sf8_transaction_id\": \"455477777777\"\r",
					"        }\r",
					"    };\r",
					"\r",
					"    let originalNetworkDataActived = buildNetworkData();\r",
					"    /******** FIM original network data      */\r",
					"    try\r",
					"    {\r",
					"        pm.collectionVariables.set('originalNetworkData', originalNetworkDataActived)\r",
					"    }\r",
					"    catch(err)\r",
					"    {\r",
					"        console.log(err)\r",
					"    }\r",
					"\r",
					"    function buildNetworkData(){\r",
					"        return JSON.stringify(activedBrand == 'Mastercard' ? masterOriginalNetwork : visaOriginalNetwork)\r",
					"    }\r",
					"    // fim original netwotk data por brand\r",
					"\r",
					"\r",
					"// request card api    \r",
					"   /* pm.sendRequest({\r",
					"        url: `http://${cardApiUrl}/api/v1/searches/processor/${cardId}`,\r",
					"        method: 'get',\r",
					"        header: {\r",
					"            'Content-Type': 'application/json'\r",
					"        },\r",
					"        body: {\r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify({\r",
					"    \"server_key\": \"60f3aa977c6b30cc0b6e8c77053586bbeb000600\",\r",
					"    \"server_secret\": \":%ps?Rc/ot>E8.{gCI4Obu2%5tS.KYx[fV&>Tcvip~nv4Uet\",\r",
					"    \"account_id\": 102334057\r",
					"    })\r",
					"        }\r",
					"    }, (err, response) => {\r",
					"        if (!err) {\r",
					"            const responseBody = response.json();\r",
					"            let card = JSON.parse(JSON.stringify(responseBody))\r",
					"            //console.log(card)\r",
					"            pm.collectionVariables.set('pan', card.panHashProcessor)\r",
					"            pm.collectionVariables.set('processorCardId', card.processor.cardId)\r",
					"            pm.collectionVariables.set('expiration_date', card.expirationDate)\r",
					"            \r",
					"            if(card.functionalities != null && card.functionalities != '')\r",
					"            {\r",
					"                pm.collectionVariables.set('ProgramId', card.functionalities[0].processor.programId)\r",
					"                pm.collectionVariables.set('accountId', card.functionalities[0].processor.accountId)\r",
					"                //pm.globals.set('functionalities', card.functionalities)\r",
					"                var debitProgram = card.functionalities.find(item => item.type === \"Debit\")\r",
					"                pm.collectionVariables.set('debitProgramId', debitProgram.program.programProcessorId)\r",
					"            }      \r",
					"    //      console.log(\"card aqui \"+ JSON.stringify(responseBody))\r",
					"        }\r",
					"    });\r",
					"    \r",
					"    console.log(\"\\n|==================== INFORMAÇÕES API CARTÕES ==========================================|\");\r",
					"    console.log(\"| processorCardId (card):\", pm.collectionVariables.get('processorCardId'));\r",
					"    console.log(\"| panHash:               \", pm.collectionVariables.get('pan'));\r",
					"    console.log(\"| account_id:            \", pm.collectionVariables.get('accountId'));\r",
					"    console.log(\"| ProgramId:             \", pm.collectionVariables.get('ProgramId'));\r",
					"    console.log(\"| debitProgram:          \", pm.collectionVariables.get('debitProgramId'));\r",
					"    console.log(\"|=========================================================================================|\\n\");\r",
					"*/\r",
					"function minifiedFunction(bodyFunction) {\r",
					"  // Remove quebras de linha (\\r\\n, \\n, \\r) e substitui por espaço\r",
					"  let bodyString = bodyFunction.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\r",
					"  \r",
					"  // Remove múltiplos espaços em sequência, substituindo por um espaço\r",
					"  bodyString = bodyString.replace(/\\s+/g, ' ');\r",
					"  \r",
					"  // Remove caracteres de controle invisíveis (ex: \\u200B, \\uFEFF)\r",
					"  bodyString = bodyString.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\r",
					"  \r",
					"  // Remove espaços no começo e fim da string\r",
					"  bodyString = bodyString.trim();\r",
					"  \r",
					"  return bodyString;\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "rabbitPayload",
			"value": "{\n  \"destinationAddress\": \"\",\n  \"headers\": {},\n  \"message\": {\n    \"event_id\": \"\",\n    \"timestamp\": \"\",\n    \"domain\": \"networktransactions\",\n    \"event_type\": \"network-authorization\",\n    \"schema_version\": 1,\n    \"org_id\": \"\",\n    \"cid\": \"\",\n    \"data\": {\n      \"authorization_category\": \"\",\n      \"conciliation_type\": \"UNDEFINED\",\n      \"authorization_status\": 1,\n      \"authorization_type\": \"NETWORK\",\n      \"org_id\": \"\",\n      \"cid\": \"\",\n      \"unique_cid\": \"\",\n      \"soft_descriptor\": \"TESTE\",\n      \"event_date_hour\": \"\",\n      \"event_date_hour_utc\": \"\",\n      \"authorization_date_hour\": \"\",\n      \"original_authorization_date_hour\": \"\",\n      \"original_event_date_hour_utc\": \"\",\n      \"account_id\": \"\",\n      \"card_id\": \"\",\n      \"program_id\": 1080,\n      \"org_operation_id\": 13852,\n      \"authorization_id\": \"\",\n      \"customer_id\": \"\",\n      \"number_of_installments\": \"3\",\n      \"principal_amount\": \"\",\n      \"contract_amount\": \"\",\n      \"installment_amount\": \"\",\n      \"airport_tax\": null,\n      \"type\": \"AUTH_EVENT\",\n      \"caller\": \"Mastercard\",\n      \"mti\": \"0200\",\n      \"pan\": \"\",\n      \"nsu\": \"\",\n      \"retrieval_reference_number\": \"\",\n      \"authorization_code\": \"\",\n      \"authorization_response_code\": \"\",\n      \"processing_code\": \"00\",\n      \"settlement_amount\": \"13\",\n      \"settlement_currency_code\": \"840\",\n      \"local_amount\": \"13\",\n      \"local_currency_code\": \"\",\n      \"cardholder_currency_code\": \"\",\n      \"merchant_category_id\": \"5199\",\n      \"merchant_name\": \"\",\n      \"merchant_city\": \"São Paulo\",\n      \"merchant_state_or_country\": \"BRA\",\n      \"card_acceptor_id\": \"\",\n      \"acquirer_bin\": \"\",\n      \"password_present\": false,\n      \"cvv_present\": false,\n      \"track1_present\": false,\n      \"track2_present\": false,\n      \"arqc_present\": false,\n      \"advice_reason_code\": \"\",\n      \"advice_detail_code\": \"\",\n      \"incoming_response_code\": \"00\",\n      \"incoming_authorization_code\": \"\",\n      \"point_of_sale\": {\n        \"entry_mode\": \"811\"\n      },\n      \"transaction_status\": \"PRE_AUTHORIZED_REQUEST\",\n      \"postings\": {\n        \"iof_amount\": 3,\n        \"fee_amount\": 3,\n        \"cash_back_amount\": 0\n      },\n      \"tid\": \"\",\n      \"custom_response_code\": \"\",\n      \"ledger_update_id\": \"e6b21dbc-1c21-457a-a5a5-0e7e6815f73e\",\n      \"token_information\": null,\n      \"metadata\": null,\n      \"validation_results\": [\n        {\n          \"name\": \"CARD_EXISTS\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CARD_FOUND\",\n          \"description\": \"Card exists.\"\n        },\n        {\n          \"name\": \"CARD_TOKEN_STATUS\",\n          \"status\": \"SKIPPED\",\n          \"reason\": \"SKIPPED\",\n          \"description\": \"Validation not executed\"\n        },\n        {\n          \"name\": \"CARD_ATC\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CARD_ATC_VALID\",\n          \"description\": \"Received null but the last is null. Used these params: MinOffset: 0, MaxOffset: 0, IsAdvice: false.\"\n        },\n        {\n          \"name\": \"CONTACTLESS\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CONTACTLESS_ENABLED\",\n          \"description\": \"Contactless enabled.\"\n        },\n        {\n          \"name\": \"ACCOUNT_TYPE\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"ACCOUNT_TYPE_VALID\",\n          \"description\": \"Account Type: NON_SPECIFIED_ACCOUNT. Card Mode: CREDIT.\"\n        },\n        {\n          \"name\": \"OPERATION\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"VALID_OPERATION\",\n          \"description\": \"Valid operation (003100) for OrgId (TN-ef23ffe3-c69b-4e9c-ab22-d865fe0a25ee) and ProgramId (1080).\"\n        },\n        {\n          \"name\": \"PASSWORD_ATTEMPTS\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CARD_PASSWORD_ATTEMPTS_VALID\",\n          \"description\": \"Password tries is valid.\"\n        },\n        {\n          \"name\": \"CARD_EXPIRATION_DATE\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CARD_NOT_EXPIRED\",\n          \"description\": \"Card not expired.\",\n          \"additional_data\": {\n            \"expiration_date\": \"2031-01-31\"\n          }\n        },\n        {\n          \"name\": \"CARD_INPUTTED_EXPIRATION_DATE\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CARD_INPUTTED_EXPIRATION_DATE_VALID\",\n          \"description\": \"Card inputted expiration date is valid.\"\n        },\n        {\n          \"name\": \"CARD_VALID_UNTIL\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CARD_VALID_UNTIL_VALID\",\n          \"description\": \"Card is valid.\"\n        },\n        {\n          \"name\": \"CARD_STATUS\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CARD_STATUS_VALID\",\n          \"description\": \"Card status: NORMAL.\"\n        },\n        {\n          \"name\": \"ACCOUNT_LIMITS\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"ACCOUNT_LIMITS_FOUND\",\n          \"description\": \"Account limits exists.\"\n        },\n        {\n          \"name\": \"ACCOUNT_STATUS\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"ACCOUNT_STATUS_VALID\",\n          \"description\": \"Account has a valid status: 1.\"\n        },\n        {\n          \"name\": \"CREDIT_LIMIT\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"CREDIT_LIMIT_IMPACT_FOUND\",\n          \"description\": \"Acceptances found.\"\n        },\n        {\n          \"name\": \"MAX_TRANSACTIONS_FOR_TEMPORARY_CARD\",\n          \"status\": \"SKIPPED\",\n          \"reason\": \"MAX_TRANSACTIONS_IF_TEMPORARY_CARD_SKIPPED\",\n          \"description\": \"Card is not temporary.\"\n        },\n        {\n          \"name\": \"CARD_TRANSACTION_LIMIT\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"LIMIT_APPROVED\",\n          \"description\": \"Card transaction sufficient limit.\"\n        },\n        {\n          \"name\": \"LEDGER\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"LEDGER_APPROVED\",\n          \"description\": \"Ledger validations approved.\"\n        },\n        {\n          \"name\": \"RULES\",\n          \"status\": \"SKIPPED\",\n          \"reason\": \"RULES_NOT_ENABLED\",\n          \"description\": \"Rules Evaluation not enabled.\"\n        },\n        {\n          \"name\": \"ANTI_FRAUD\",\n          \"status\": \"APPROVED\",\n          \"reason\": \"ANTI_FRAUD_APPROVE\",\n          \"description\": \"AntiFraud approve this authorization\"\n        }\n      ],\n      \"conciliation_information\": null,\n      \"origin\": \"\",\n      \"file_date\": \"\",\n      \"atc\": null,\n      \"anti_fraud_execution_time\": 861,\n      \"labels\": [\n        \"INCREMENT_NUMBER_OF_TRANSACTIONS\"\n      ],\n      \"rates\": {\n        \"cardholder_conversion_rate\": 11.8312,\n        \"international_iof_rate\": 5\n      }\n    },\n    \"Id\": \"\"\n  },\n  \"messageType\": [\n    \"urn:message:Operational.Judge.Infrastructure.Strategies.Pismo.PayLoads:ProcessorAuthorizationEvent\"\n  ],\n  \"correlationId\": \"\"\n}\n",
			"type": "string"
		},
		{
			"key": "mambuUtils",
			"value": "{\n  \"ValidateIfTransactionDMCWasHoldOnMambu\": \"function(pm, aprovedOrReversedm, proxyCardNumber, authorizationId) {\\n  const mambuCredentials = btoa('svc_mambu_api_stg:B@ankacess!209JuTMambu016codesec');\\n  const urlMambu = `${pm.environment.get('UrlApiMambu')}/api/cards/${proxyCardNumber}/authorizationholds/${authorizationId}`;\\n  const headers = { 'content-type': 'application/json', 'Authorization': `Basic ${mambuCredentials}`, 'accept': 'application/vnd.mambu.v2+json' };\\n\\n  pm.sendRequest({ url: urlMambu, method: 'GET', header: headers }, (err, response) => {\\n    if (err) {\\n      console.log('Erro ao enviar a requisição:', err);\\n      pm.collectionVariables.set('lastMambuResponse', JSON.stringify({ error: err.toString() }));\\n    } else {\\n      try {\\n        const responseData = JSON.parse(response.stream.toString());\\n        pm.collectionVariables.set('lastMambuResponse', JSON.stringify(responseData));\\n        console.log('Resposta salva na variável de coleção lastMambuResponse');\\n      } catch (e) {\\n        console.log('Erro ao parsear a resposta:', e);\\n        pm.collectionVariables.set('lastMambuResponse', JSON.stringify({ error: 'Erro ao parsear a resposta' }));\\n      }\\n    }\\n  });\\n}\"\n}\n",
			"type": "string"
		},
		{
			"key": "postmanUtils",
			"value": " {\n\t\"generateRandomString\": \"function(length) { const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; let result = ''; for (let i = 0; i < length; i++) { const randomIndex = Math.floor(Math.random() * characters.length); result += characters[randomIndex].toUpperCase(); } return result; }\",\n\t\n\t\"generateUUID\": \"function() { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); }); }\",\n\t\n\t\"formatCurrency\": \"function(amount) { return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(amount); }\",\n\t\"generateRandomNsu\": \"function(length) { const min = Math.pow(10, length - 1); const max = Math.pow(10, length) - 1; return Math.floor(min + Math.random() * (max - min + 1)).toString(); }\"\n  }",
			"type": "string"
		},
		{
			"key": "judgeUtils",
			"value": "{\n  \"findAuthorizationTransaction\": \"function(pm, correlationId, authorizationCode, nsu, retrievalReferenceNumber) { const envName = pm.environment.name; const headers = { 'Content-Type': 'application/json', 'x-correlation-id': correlationId, 'x-cid': 'testandoooo', 'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg4OUFBQkJBMEVBRjRBRjkyOTA2MTEwNUVDREEyRkVCNkNDMTI2NkEiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJpSnFydWc2dlN2a3BCaEVGN05vdjYyekJKbW8ifQ.eyJuYmYiOjE3Mzc1NzY3MzAsImV4cCI6MTczNzYxOTkzMCwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIiLCJhdWQiOlsiaHR0cHM6Ly9sb2dpbi5zdGFnaW5nLmJhbmtseS5jb20uYnIvcmVzb3VyY2VzIiwidG93bmVyLmNvcmUuanVkaXRoIiwidG93bmVyLmNvcmUucmVsb2FkIl0sImNsaWVudF9pZCI6IjI0ZTZmMzE0LTVkMGMtNDUyMi05OGQzLTJjZTQyNWI0ZjI0MSIsImJhY2tvZmZpY2UiOiJ0cnVlIiwianRpIjoiTmJHdDYzUUJEaVlWQVM0Rnp4VmlidyIsInNjb3BlIjpbInRvd25lci5jb3JlLmp1ZGl0aCIsInRvd25lci5jb3JlLnJlbG9hZCJdfQ.Na7P4ndgvgxpjxpn3SOfaW5yJlaFsUVzwYX-CwKaqTOWQ_otUMFQIUyIQiM5OYlanSqv590B7aqkhp64xNmkW09F7PH0BldxZ7iUF3vhlutIvFFGaOlyE0XHTJz7dH7cwUSbUV6Dv82gSJsAR343fMYcFyd5OZtKGYvk0v9awcGC_OsLlIFzNPiBAZCgjP4i2ai-74ExYKZhfqpFCSXUTs5VZpTMvf-80SsHWybLvGF3V8fPrIqmSwcIcUW0EmB1SpGFhTTEdlSpjT7i23b_040oOgBRJXiDuquG5cWo9CSllFUz-1WfCzJHe5U8sU5S-aLFge-Tetp9bzfRYfvqHA', 'x-pismo-sign': 'eyJraWQiOiIxM2NlZWVlYjFhMDY1NTc4OGNlMjA4NGZmZmNhZDAyZjUxZmMzMTQwIiwiYWxnIjoiUlMyNTYifQ.eyJib2R5LWhhc2giOiJMVW9meVJKOUdOWnQ4dVB0N1FrQ0RrdU01ZzRpMFpNelFZZURrN0pvMlFnPSIsInN1YiI6ImF1dGhvcml6YXRpb24iLCJhY2NvdW50LWlkIjoxMjc2OTgzNTIsImlzcyI6ImFwaS5waXNtby5pbyIsImV4cCI6MTcwMTA0MzIwMCwiaWF0IjoxNzAwMTc5MjAwLCJwYW4taGFzaCI6IjZkWFo4S2tVcmpYM3NaR0djUXJHSm1vS1pUeUNCZE9sYU45T2tnbGdOYWpObFZpcVBZMmlXcFFjY0gyaVNVUEx6WFo4Qmwvdkl0ajIrR2pjMjhyNmlRPT0ifQ.LdyNLvwnGjiz0nEHlrpkjaPq7hj-v-0SlOyRbetn9UjrjGYBVA2-jmG9JliXfm_jl7IHlJRHGKu3znp03Gp8vUWuy8k4wHWuMr4XdwWrsunv-4U9PlNZoURCfICLTQlHa4CB8j6ROjzQ7Zg-yjc8yfUk2G2waN0gTZXlc21qFK6-J-i0tYvEPjufqjvDy3j-Lw0l4X_yRqU2GRwPxjJoY0RCG0DLsV3Ob1TolQ5uVQ45SozPqeMzE-uge8e7gz1cvYsxz7r0OjVKkbV8pEekDdSdaLGK5RfWQ1BUxnYC82pjGXc_rnaQnr2BG2jw-VtZiHgA7PH-NXoMba8dozQRNw', 'bypass-validation': '1099a7908cc3d60dd5de5cc2f5a1de5120d0eb5bace714f1dc7acd83f91d44d860b767b4f34e5aacf87ba44331e8aa377ab0ad9ec3c7ebd2f02e3c5925049ada' }; if (envName !== \\\"Local\\\") { headers['unlock-get-transaction'] = '1099a7908cc3d60dd5de5cc2f5a1de5120d0eb5bace714f1dc7acd83f91d44d860b767b4f34e5aacf87ba44331e8aa377ab0ad9ec3c7ebd2f02e3c5925049ada'; } else { headers['unlock-get-transaction'] = 'eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTY3ODcxNjg0OSwiaWF0IjoxNjc4NzE2ODQ5fQ.YgDVfDTVlEP3VKSCMCsanMRnJupFr9fB_jeNTpnBQ74'; } const urlJudge = `${pm.environment.get('UrlJudge')}/GetTransaction?authorizationCode=${authorizationCode}&nsu=${nsu}&retrievalReferenceNumber=${retrievalReferenceNumber}`; pm.sendRequest({ url: urlJudge, method: 'GET', header: headers }, (err, response) => { if (err) { console.log('Erro ao enviar a requisição:', err); pm.collectionVariables.set('lastProcessedTransactionData', JSON.stringify({ error: err.toString() })); } else if (response.code === 200) { const responseData = JSON.parse(response.stream.toString()); pm.collectionVariables.set('lastProcessedTransactionData', JSON.stringify(responseData)); console.log(\\\"Resposta salva na variável global 'lastProcessedTransactionData'\\\"); } else { const errorMsg = `Erro na resposta: código ${response.code}`; console.log(errorMsg); pm.collectionVariables.set('lastProcessedTransactionData', JSON.stringify({ error: errorMsg })); } }); }\"\n}\n",
			"type": "string"
		},
		{
			"key": "lastMambuResponse",
			"value": ""
		},
		{
			"key": "brandName",
			"value": "Mastercard",
			"type": "string"
		},
		{
			"key": "originalNetworkData",
			"value": ""
		},
		{
			"key": "nsuGlobal",
			"value": "",
			"type": "string"
		},
		{
			"key": "authorizationCode",
			"value": ""
		},
		{
			"key": "rabbitToken",
			"value": ""
		},
		{
			"key": "authorizationCategory",
			"value": ""
		},
		{
			"key": "sendNetworkEvent",
			"value": "return new Promise((resolve, reject) => { try { const { pm, correlationId, destinationAddress, messageNamespace, mti, conciliationType, type, debitProgramCard, authorizationCategory, authorizationResponseCode = \"00\", pan = null, requestPayload } = params; const { id: authorizationId, fields = {} } = requestPayload || {}; const { amount_transaction: randomAmount, card_id: cardId, nsu, authorization_code: authorizationCode, merchant_name: merchantName, merchant_state_or_country_code: countryCode, currency, account_id: accountId, acquirer_code: acquirerCode, processing_code: processingCode } = fields; const credentials = pm.collectionVariables.get(\"rabbitToken\"); const networkAuthorizationEventId = correlationId; const networkAuthorizationEventDate = (new Date()).toISOString(); const customerId = pm.globals.get('customerId', 103194628); const basePayload = pm.collectionVariables.get(\"rabbitPayload\"); let networkEventBody = JSON.parse(basePayload); networkEventBody.destinationAddress = destinationAddress; networkEventBody.messageType = [ \"urn:message:\" + messageNamespace ]; networkEventBody.message.data.authorization_status = 2; networkEventBody.message.data.mti = mti; networkEventBody.message.data.conciliation_type = conciliationType; networkEventBody.message.data.authorization_response_code = authorizationResponseCode; networkEventBody.message.event_id = networkAuthorizationEventId.toString(); networkEventBody.message.timestamp = networkAuthorizationEventDate; networkEventBody.message.org_id = \"TN-\" + networkAuthorizationEventId.toString(); networkEventBody.message.cid = networkAuthorizationEventId.toString(); Object.assign(networkEventBody.message.data, { authorization_category: authorizationCategory, org_id: \"TN-\" + networkAuthorizationEventId.toString(), cid: networkAuthorizationEventId.toString(), unique_cid: networkAuthorizationEventId.toString(), event_date_hour: networkAuthorizationEventDate, event_date_hour_utc: networkAuthorizationEventDate, authorization_date_hour: networkAuthorizationEventDate, original_authorization_date_hour: networkAuthorizationEventDate, original_event_date_hour_utc: networkAuthorizationEventDate, account_id: accountId, card_id: cardId, authorization_id: authorizationId, customer_id: customerId, principal_amount: randomAmount, contract_amount: randomAmount, installment_amount: randomAmount, pan: pan, nsu: nsu, retrieval_reference_number: nsu, authorization_code: authorizationCode, authorization_response_code: authorizationResponseCode, local_currency_code: currency, cardholder_currency_code: currency, merchant_name: merchantName, acquirer_bin: acquirerCode, processing_code: processingCode, merchant_state_or_country: countryCode, program_id: debitProgramCard }); networkEventBody.message.Id = networkAuthorizationEventId.toString(); networkEventBody.correlationId = networkAuthorizationEventId.toString(); const requestBody = { properties: { \"content-type\": \"application/vnd.masstransit+json\" }, routing_key: \"\", payload: JSON.stringify(networkEventBody), payload_encoding: \"string\" }; const currentRabbitUrl = pm.environment.get('UrlRabbit'); const url = `${currentRabbitUrl}/api/exchanges/%2F/pismo.authorization.events.judge.v2/publish`; const envName = pm.environment.name; const headers = { 'Content-Type': 'application/vnd.masstransit+json', 'Authorization': 'Basic Z3Vlc3Q6Z3Vlc3Q=' }; if (envName !== \"Local\") { headers['Authorization'] = `Basic ${credentials}`; } pm.sendRequest({ url, method: 'POST', header: headers, body: { mode: 'raw', raw: requestBody } }, (err, response) => { if (err) { reject(err); return; } var result = \"Fila: \" + messageNamespace \" + \", Status: \" + response.stream.toString() resolve(result); }); } catch (error) { reject(error); } });"
		},
		{
			"key": "lastSendNetworkEventStatus",
			"value": "",
			"type": "string"
		},
		{
			"key": "findAuthorizationTransaction",
			"value": ""
		},
		{
			"key": "correlationId",
			"value": ""
		},
		{
			"key": "authorizationId",
			"value": ""
		},
		{
			"key": "validateMambuFunction",
			"value": ""
		},
		{
			"key": "pan",
			"value": ""
		},
		{
			"key": "processorCardId",
			"value": ""
		},
		{
			"key": "expiration_date",
			"value": ""
		},
		{
			"key": "ProgramId",
			"value": ""
		},
		{
			"key": "accountId",
			"value": ""
		},
		{
			"key": "debitProgramId",
			"value": ""
		},
		{
			"key": "timestampUtcIso8601",
			"value": ""
		},
		{
			"key": "randomAmount",
			"value": ""
		},
		{
			"key": "replacementAmount",
			"value": ""
		},
		{
			"key": "randomId",
			"value": ""
		},
		{
			"key": "currency",
			"value": ""
		},
		{
			"key": "contryCode",
			"value": ""
		},
		{
			"key": "transactionType",
			"value": ""
		},
		{
			"key": "merchantName",
			"value": ""
		},
		{
			"key": "entryMode",
			"value": ""
		},
		{
			"key": "mcc",
			"value": ""
		},
		{
			"key": "panDebit",
			"value": ""
		},
		{
			"key": "posTransactionStatus",
			"value": ""
		},
		{
			"key": "walletId",
			"value": ""
		},
		{
			"key": "responseCode",
			"value": ""
		},
		{
			"key": "denialCode",
			"value": ""
		},
		{
			"key": "eletronicSecurityLevel",
			"value": ""
		},
		{
			"key": "acquirerCode",
			"value": ""
		},
		{
			"key": "accountIdDebit",
			"value": ""
		},
		{
			"key": "sendJudgeTransactionRequest",
			"value": ""
		},
		{
			"key": "byPassSecretSTG",
			"value": "1099a7908cc3d60dd5de5cc2f5a1de5120d0eb5bace714f1dc7acd83f91d44d860b767b4f34e5aacf87ba44331e8aa377ab0ad9ec3c7ebd2f02e3c5925049ada",
			"type": "string"
		},
		{
			"key": "byPassSecretLocal",
			"value": "eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTY3ODcxNjg0OSwiaWF0IjoxNjc4NzE2ODQ5fQ.YgDVfDTVlEP3VKSCMCsanMRnJupFr9fB_jeNTpnBQ7",
			"type": "string"
		},
		{
			"key": "byPassSecretSandbox",
			"value": "QWxvIGV1IHNvdSBvIFNlaXbDo28gZGEgbWFzc2EuIFZvY8OqcyBzw6NvIG11aXRvIHNpbXDDoXRpY29zLiBUZW0gcXVlIGZhemVyIGNlcnRvIHBhcmEgZGFyIGNlcnRv",
			"type": "string"
		}
	]
}